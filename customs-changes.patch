From 77cdfb3e997e3b6557c53d291fb60eaf6d5c8204 Mon Sep 17 00:00:00 2001
From: Nils Kjellman <nils@queenslab.se>
Date: Thu, 15 May 2025 21:12:47 +0200
Subject: [PATCH 1/2] Implement customs

---
 .github/workflows/main.yml                    |   54 +
 .gitignore                                    |   17 +
 CosmoCargo.sln                                |   24 +
 README.md                                     |  175 +
 backend/.gitignore                            |   93 +
 backend/CosmoCargo.csproj                     |   22 +
 backend/Data/AppDbContext.cs                  |   93 +
 backend/Data/DbInitializer.cs                 |  701 ++
 backend/Data/SnakeCaseNamingConvention.cs     |   35 +
 backend/Dockerfile                            |   36 +
 backend/Endpoints/AuthEndpoints.cs            |   52 +
 backend/Endpoints/HealthcheckEndpoints.cs     |   10 +
 backend/Endpoints/PilotEndpoints.cs           |  109 +
 backend/Endpoints/ShipmentEndpoints.cs        |  161 +
 backend/Endpoints/UserEndpoints.cs            |   61 +
 .../20250429132240_Initial.Designer.cs        |  216 +
 backend/Migrations/20250429132240_Initial.cs  |  101 +
 ...84123_AddCustomsFormToShipment.Designer.cs |  249 +
 ...20250515184123_AddCustomsFormToShipment.cs |   91 +
 .../Migrations/AppDbContextModelSnapshot.cs   |  246 +
 backend/Model/CustomsForm.cs                  |   14 +
 backend/Model/Exceptions/NotFoundException.cs |   15 +
 backend/Model/Queries/PaginatedResult.cs      |   20 +
 backend/Model/Queries/PaginationParams.cs     |   21 +
 .../Queries/PilotAvailabilityResponse.cs      |    9 +
 backend/Model/Queries/PilotsFilter.cs         |    8 +
 backend/Model/Queries/ShipmentsFilter.cs      |   10 +
 backend/Model/RiskLevel.cs                    |   10 +
 backend/Model/Shipment.cs                     |   30 +
 backend/Model/ShipmentContact.cs              |   12 +
 backend/Model/ShipmentStatus.cs               |   50 +
 backend/Model/User.cs                         |   23 +
 backend/Model/UserRole.cs                     |    9 +
 backend/Program.cs                            |  157 +
 backend/Properties/launchSettings.json        |   14 +
 backend/Services/IPilotService.cs             |   16 +
 backend/Services/IShipmentService.cs          |   15 +
 backend/Services/IUserService.cs              |   12 +
 backend/Services/PilotService.cs              |  132 +
 backend/Services/ShipmentService.cs           |  145 +
 backend/Services/UserService.cs               |   48 +
 backend/Utils/ClaimsPrincipalExtensions.cs    |   12 +
 backend/Utils/Crypto.cs                       |   15 +
 backend/Utils/EndpointExtensions.cs           |   60 +
 backend/appsettings.json                      |   18 +
 docker-compose.yml                            |   74 +
 frontend/.eslintrc.json                       |    6 +
 frontend/.gitignore                           |   36 +
 frontend/Dockerfile                           |   26 +
 frontend/app/about/page.tsx                   |  108 +
 frontend/app/contact/page.tsx                 |  143 +
 frontend/app/dashboard/layout.tsx             |   57 +
 frontend/app/dashboard/page.tsx               |  478 +
 frontend/app/dashboard/pilots/[id]/page.tsx   |  208 +
 frontend/app/dashboard/pilots/add/page.tsx    |  149 +
 frontend/app/dashboard/pilots/page.tsx        |  281 +
 frontend/app/dashboard/shipments/add/page.tsx |  523 ++
 .../app/dashboard/shipments/assigned/page.tsx |  157 +
 .../app/dashboard/shipments/ongoing/page.tsx  |  181 +
 frontend/app/dashboard/shipments/page.tsx     |  282 +
 frontend/app/dashboard/user-settings/page.tsx |  128 +
 frontend/app/error.tsx                        |   66 +
 frontend/app/faq/page.tsx                     |  121 +
 frontend/app/globals.css                      |  150 +
 frontend/app/layout.tsx                       |   26 +
 frontend/app/login/page.tsx                   |  159 +
 frontend/app/not-found.tsx                    |   48 +
 frontend/app/page.tsx                         |   20 +
 frontend/app/services/page.tsx                |  197 +
 frontend/next.config.js                       |    9 +
 frontend/package-lock.json                    | 8026 +++++++++++++++++
 frontend/package.json                         |   59 +
 frontend/postcss.config.js                    |    6 +
 frontend/public/android-chrome-192x192.png    |  Bin 0 -> 13849 bytes
 frontend/public/android-chrome-512x512.png    |  Bin 0 -> 44014 bytes
 frontend/public/apple-touch-icon.png          |  Bin 0 -> 12375 bytes
 frontend/public/favicon-16x16.png             |  Bin 0 -> 725 bytes
 frontend/public/favicon-32x32.png             |  Bin 0 -> 1612 bytes
 frontend/public/favicon.ico                   |  Bin 0 -> 15406 bytes
 frontend/public/logo.svg                      |    7 +
 frontend/public/manifest.json                 |   20 +
 frontend/public/robots.txt                    |    3 +
 frontend/public/site.webmanifest              |    1 +
 .../src/components/BrowserRouterWrapper.tsx   |   12 +
 frontend/src/components/ClientProviders.tsx   |   23 +
 frontend/src/components/DashboardHeader.tsx   |  127 +
 frontend/src/components/DashboardSidebar.tsx  |  217 +
 frontend/src/components/FeatureList.tsx       |   96 +
 frontend/src/components/Footer.tsx            |  197 +
 frontend/src/components/Header.tsx            |  183 +
 frontend/src/components/HeroSection.tsx       |   73 +
 frontend/src/components/ProtectedRoute.tsx    |   22 +
 frontend/src/components/SpaceBackground.tsx   |  132 +
 frontend/src/components/ui/badge.tsx          |   41 +
 frontend/src/components/ui/button.tsx         |   56 +
 frontend/src/components/ui/card.tsx           |   83 +
 frontend/src/components/ui/chart.tsx          |  360 +
 frontend/src/components/ui/checkbox.tsx       |   35 +
 frontend/src/components/ui/dialog.tsx         |  117 +
 frontend/src/components/ui/form.tsx           |  177 +
 frontend/src/components/ui/input.tsx          |   22 +
 frontend/src/components/ui/label.tsx          |   24 +
 frontend/src/components/ui/pagination.tsx     |   45 +
 frontend/src/components/ui/select.tsx         |  158 +
 frontend/src/components/ui/separator.tsx      |   28 +
 frontend/src/components/ui/sheet.tsx          |  137 +
 frontend/src/components/ui/sidebar.tsx        |  761 ++
 frontend/src/components/ui/skeleton.tsx       |   15 +
 frontend/src/components/ui/table.tsx          |  117 +
 frontend/src/components/ui/tabs.tsx           |   53 +
 frontend/src/components/ui/textarea.tsx       |   21 +
 frontend/src/components/ui/toast.tsx          |  127 +
 frontend/src/components/ui/toaster.tsx        |   33 +
 frontend/src/components/ui/tooltip.tsx        |   27 +
 frontend/src/components/ui/use-toast.ts       |    3 +
 frontend/src/contexts/AuthContext.tsx         |  102 +
 frontend/src/data/mock-data.ts                |  177 +
 frontend/src/hooks/use-mobile.tsx             |   19 +
 frontend/src/hooks/use-toast.ts               |  181 +
 frontend/src/lib/utils.ts                     |    6 +
 frontend/src/model/paginated-result.ts        |    7 +
 frontend/src/model/shipment.ts                |   37 +
 frontend/src/model/types.ts                   |   22 +
 frontend/src/model/user.ts                    |   12 +
 frontend/src/services/api.ts                  |   54 +
 frontend/src/services/pilot-service.ts        |   98 +
 frontend/src/services/shipment-service.ts     |   94 +
 frontend/src/types/user.ts                    |   20 +
 frontend/src/utils/shipment-status.ts         |   68 +
 frontend/tailwind.config.ts                   |  137 +
 frontend/tsconfig.json                        |   29 +
 131 files changed, 19761 insertions(+)
 create mode 100644 .github/workflows/main.yml
 create mode 100644 .gitignore
 create mode 100644 CosmoCargo.sln
 create mode 100644 README.md
 create mode 100644 backend/.gitignore
 create mode 100644 backend/CosmoCargo.csproj
 create mode 100644 backend/Data/AppDbContext.cs
 create mode 100644 backend/Data/DbInitializer.cs
 create mode 100644 backend/Data/SnakeCaseNamingConvention.cs
 create mode 100644 backend/Dockerfile
 create mode 100644 backend/Endpoints/AuthEndpoints.cs
 create mode 100644 backend/Endpoints/HealthcheckEndpoints.cs
 create mode 100644 backend/Endpoints/PilotEndpoints.cs
 create mode 100644 backend/Endpoints/ShipmentEndpoints.cs
 create mode 100644 backend/Endpoints/UserEndpoints.cs
 create mode 100644 backend/Migrations/20250429132240_Initial.Designer.cs
 create mode 100644 backend/Migrations/20250429132240_Initial.cs
 create mode 100644 backend/Migrations/20250515184123_AddCustomsFormToShipment.Designer.cs
 create mode 100644 backend/Migrations/20250515184123_AddCustomsFormToShipment.cs
 create mode 100644 backend/Migrations/AppDbContextModelSnapshot.cs
 create mode 100644 backend/Model/CustomsForm.cs
 create mode 100644 backend/Model/Exceptions/NotFoundException.cs
 create mode 100644 backend/Model/Queries/PaginatedResult.cs
 create mode 100644 backend/Model/Queries/PaginationParams.cs
 create mode 100644 backend/Model/Queries/PilotAvailabilityResponse.cs
 create mode 100644 backend/Model/Queries/PilotsFilter.cs
 create mode 100644 backend/Model/Queries/ShipmentsFilter.cs
 create mode 100644 backend/Model/RiskLevel.cs
 create mode 100644 backend/Model/Shipment.cs
 create mode 100644 backend/Model/ShipmentContact.cs
 create mode 100644 backend/Model/ShipmentStatus.cs
 create mode 100644 backend/Model/User.cs
 create mode 100644 backend/Model/UserRole.cs
 create mode 100644 backend/Program.cs
 create mode 100644 backend/Properties/launchSettings.json
 create mode 100644 backend/Services/IPilotService.cs
 create mode 100644 backend/Services/IShipmentService.cs
 create mode 100644 backend/Services/IUserService.cs
 create mode 100644 backend/Services/PilotService.cs
 create mode 100644 backend/Services/ShipmentService.cs
 create mode 100644 backend/Services/UserService.cs
 create mode 100644 backend/Utils/ClaimsPrincipalExtensions.cs
 create mode 100644 backend/Utils/Crypto.cs
 create mode 100644 backend/Utils/EndpointExtensions.cs
 create mode 100644 backend/appsettings.json
 create mode 100644 docker-compose.yml
 create mode 100644 frontend/.eslintrc.json
 create mode 100644 frontend/.gitignore
 create mode 100644 frontend/Dockerfile
 create mode 100644 frontend/app/about/page.tsx
 create mode 100644 frontend/app/contact/page.tsx
 create mode 100644 frontend/app/dashboard/layout.tsx
 create mode 100644 frontend/app/dashboard/page.tsx
 create mode 100644 frontend/app/dashboard/pilots/[id]/page.tsx
 create mode 100644 frontend/app/dashboard/pilots/add/page.tsx
 create mode 100644 frontend/app/dashboard/pilots/page.tsx
 create mode 100644 frontend/app/dashboard/shipments/add/page.tsx
 create mode 100644 frontend/app/dashboard/shipments/assigned/page.tsx
 create mode 100644 frontend/app/dashboard/shipments/ongoing/page.tsx
 create mode 100644 frontend/app/dashboard/shipments/page.tsx
 create mode 100644 frontend/app/dashboard/user-settings/page.tsx
 create mode 100644 frontend/app/error.tsx
 create mode 100644 frontend/app/faq/page.tsx
 create mode 100644 frontend/app/globals.css
 create mode 100644 frontend/app/layout.tsx
 create mode 100644 frontend/app/login/page.tsx
 create mode 100644 frontend/app/not-found.tsx
 create mode 100644 frontend/app/page.tsx
 create mode 100644 frontend/app/services/page.tsx
 create mode 100644 frontend/next.config.js
 create mode 100644 frontend/package-lock.json
 create mode 100644 frontend/package.json
 create mode 100644 frontend/postcss.config.js
 create mode 100644 frontend/public/android-chrome-192x192.png
 create mode 100644 frontend/public/android-chrome-512x512.png
 create mode 100644 frontend/public/apple-touch-icon.png
 create mode 100644 frontend/public/favicon-16x16.png
 create mode 100644 frontend/public/favicon-32x32.png
 create mode 100644 frontend/public/favicon.ico
 create mode 100644 frontend/public/logo.svg
 create mode 100644 frontend/public/manifest.json
 create mode 100644 frontend/public/robots.txt
 create mode 100644 frontend/public/site.webmanifest
 create mode 100644 frontend/src/components/BrowserRouterWrapper.tsx
 create mode 100644 frontend/src/components/ClientProviders.tsx
 create mode 100644 frontend/src/components/DashboardHeader.tsx
 create mode 100644 frontend/src/components/DashboardSidebar.tsx
 create mode 100644 frontend/src/components/FeatureList.tsx
 create mode 100644 frontend/src/components/Footer.tsx
 create mode 100644 frontend/src/components/Header.tsx
 create mode 100644 frontend/src/components/HeroSection.tsx
 create mode 100644 frontend/src/components/ProtectedRoute.tsx
 create mode 100644 frontend/src/components/SpaceBackground.tsx
 create mode 100644 frontend/src/components/ui/badge.tsx
 create mode 100644 frontend/src/components/ui/button.tsx
 create mode 100644 frontend/src/components/ui/card.tsx
 create mode 100644 frontend/src/components/ui/chart.tsx
 create mode 100644 frontend/src/components/ui/checkbox.tsx
 create mode 100644 frontend/src/components/ui/dialog.tsx
 create mode 100644 frontend/src/components/ui/form.tsx
 create mode 100644 frontend/src/components/ui/input.tsx
 create mode 100644 frontend/src/components/ui/label.tsx
 create mode 100644 frontend/src/components/ui/pagination.tsx
 create mode 100644 frontend/src/components/ui/select.tsx
 create mode 100644 frontend/src/components/ui/separator.tsx
 create mode 100644 frontend/src/components/ui/sheet.tsx
 create mode 100644 frontend/src/components/ui/sidebar.tsx
 create mode 100644 frontend/src/components/ui/skeleton.tsx
 create mode 100644 frontend/src/components/ui/table.tsx
 create mode 100644 frontend/src/components/ui/tabs.tsx
 create mode 100644 frontend/src/components/ui/textarea.tsx
 create mode 100644 frontend/src/components/ui/toast.tsx
 create mode 100644 frontend/src/components/ui/toaster.tsx
 create mode 100644 frontend/src/components/ui/tooltip.tsx
 create mode 100644 frontend/src/components/ui/use-toast.ts
 create mode 100644 frontend/src/contexts/AuthContext.tsx
 create mode 100644 frontend/src/data/mock-data.ts
 create mode 100644 frontend/src/hooks/use-mobile.tsx
 create mode 100644 frontend/src/hooks/use-toast.ts
 create mode 100644 frontend/src/lib/utils.ts
 create mode 100644 frontend/src/model/paginated-result.ts
 create mode 100644 frontend/src/model/shipment.ts
 create mode 100644 frontend/src/model/types.ts
 create mode 100644 frontend/src/model/user.ts
 create mode 100644 frontend/src/services/api.ts
 create mode 100644 frontend/src/services/pilot-service.ts
 create mode 100644 frontend/src/services/shipment-service.ts
 create mode 100644 frontend/src/types/user.ts
 create mode 100644 frontend/src/utils/shipment-status.ts
 create mode 100644 frontend/tailwind.config.ts
 create mode 100644 frontend/tsconfig.json

diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
new file mode 100644
index 0000000..eed9228
--- /dev/null
+++ b/.github/workflows/main.yml
@@ -0,0 +1,54 @@
+name: CosmoCargo CI
+
+on:
+  push:
+  workflow_dispatch:
+
+jobs:
+
+  test-backend:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+
+      - name: Setup .NET
+        uses: actions/setup-dotnet@v4
+        with:
+          dotnet-version: '9.0.x'
+
+      - name: Backend - Restore dependencies
+        run: dotnet restore ./backend
+
+      - name: Backend - Build
+        run: dotnet build ./backend --no-restore
+
+      - name: Backend - Test
+        run: dotnet test ./backend --no-build --verbosity normal
+
+  test-frontend:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: '22'
+          cache: 'npm'
+          cache-dependency-path: './frontend/package-lock.json'
+
+      - name: Frontend - Install dependencies
+        working-directory: ./frontend
+        run: npm ci --include=dev
+
+      - name: Frontend - Lint
+        working-directory: ./frontend
+        run: npm run lint
+
+  build-docker:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+
+      - name: Build Docker images
+        run: docker compose build
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..8186285
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,17 @@
+# Dependencies
+/node_modules
+**/node_modules
+
+# Build outputs
+**/bin
+**/obj
+**/.next
+**/dist
+
+# IDE files
+.vs
+.vscode
+*.suo
+*.user
+
+.env
\ No newline at end of file
diff --git a/CosmoCargo.sln b/CosmoCargo.sln
new file mode 100644
index 0000000..7a32c40
--- /dev/null
+++ b/CosmoCargo.sln
@@ -0,0 +1,24 @@
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.5.2.0
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CosmoCargo", "backend\CosmoCargo.csproj", "{C859EB8F-97E7-12B1-A2A0-38F7FD3DF85D}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{C859EB8F-97E7-12B1-A2A0-38F7FD3DF85D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{C859EB8F-97E7-12B1-A2A0-38F7FD3DF85D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C859EB8F-97E7-12B1-A2A0-38F7FD3DF85D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{C859EB8F-97E7-12B1-A2A0-38F7FD3DF85D}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {96F11667-7EE9-422C-B82F-03306FFE4930}
+	EndGlobalSection
+EndGlobal
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..3c13990
--- /dev/null
+++ b/README.md
@@ -0,0 +1,175 @@
+# 🚀 CosmoCargo™ – Den Intergalaktiska Fraktcentralen
+
+## 🪐 Bakgrund
+
+**CosmoCargo™** är den ledande aktören inom rymdlogistik, med leveranser till över 9000 rymdstationer och kolonier i hela galaxen, från de innersta månarna vid Jupiter till de yttre handelszonerna i Andromedatriangeln. Tusentals transporter koordineras dagligen genom ett sofistikerat bokningssystem som används av kunder, piloter och administratörer. Allt måste gå snabbt, säkert och smidigt i det intergalaktiska kaoset.
+
+## 🛠️ Tech Stack
+
+### Frontend
+- React
+- TypeScript
+- Next.js
+- Tanstack Query
+- Tailwind CSS
+
+### Backend
+- .NET
+- Minimal API
+- REST
+- Entity Framework
+- PostgreSQL
+
+### Infrastruktur
+- Docker
+
+## 🚀 Utveckling
+
+### Förutsättningar
+- Docker Desktop 3.4+
+- Node.js 22+
+- .NET SDK 9
+
+### Kör lokalt
+
+1. Starta hela systemet med Docker:
+```bash
+docker compose up --detach --build
+```
+
+2. Vänta på seedningen av databasen (tar ca 2min, endast första gången):
+   - Se logg för `cosmocargo-backend-1` containern
+
+3. Systemet är nu tillgängligt på:
+   - Frontend: http://localhost:3000
+   - Backend: http://localhost:5000
+
+### Tips
+
+Om du vill jobba med frontend:
+1. Starta systemet enligt ovan
+2. Stoppa frontend-containern `cosmocargo-frontend-1` (för att minska belastningen på din dator)
+3. Kör: `cd frontend && npm run dev`
+   - Frontend finns nu tillgängig på http://localhost:3001 (med hot reload)
+  
+Om du vill jobba med backend:
+1. Starta systemet enligt ovan
+2. Stoppa backend-containern `cosmocargo-backend-1` (för att förhindra konflikter i redan använda portar)
+3. Kör: `cd backend && dotnet watch`
+   - Backend finns nu tillgängig på http://localhost:5000 (med hot reload)
+
+## 📄 Befintlig funktionalitet
+
+Användare i systemet kan ha en av följande roller: **Kund**, **Pilot** eller **Admin**.
+
+#### 👩‍🚀 Kund
+- En kund kan skapa en frakt via formulär
+- En kund kan se sina frakter
+
+#### 🚀 Pilot
+- En pilot kan se tilldelade frakter
+- En pilot kan uppdatera fraktens status till: *Under Transport* eller *Levererad*
+
+#### 🧑‍💼 Admin
+- En admin kan se alla frakter
+- En admin kan godkänna/neka frakter
+- En admin kan tilldela en frakt till en pilot
+
+---
+
+# Uppgifter
+
+Vi tänker oss att du kan lägga 4 timmar, eller mer om du känner för det, på en eller flera av uppgifterna nedan. Uppgifterna är medvetet luddiga/öppna för att tillåta kreativitet men skriv gärna om du avviker från exempel/specar i dokumentationen/readme.
+
+## 📄 Uppgift 1: Galactic Cargo Declaration™ (Frontend/Backend/Fullstack)
+
+Universum står inför ett handelskrig och intergalaktiska tullar kommer införas. CosmoCargo har anlitat dig för att ta fram ett system för tullhantering.
+
+### Funktionalitet / Krav
+- **Kund**: Fylla i ett valfritt tullformulär i samband med skapandet av en frakt
+- **Admin**: Granskar formuläret
+- **Pilot**: Ser om frakten är högriskklassad och om karantän behövs
+
+### Formulär (exempel)
+
+| Fält | Typ | Beskrivning |
+|------|-----|-------------|
+| `containsLifeforms`  | Innehåller levande varelser |
+| `lifeformType` | (Om levande varelser) Beskrivning av art, intelligens, riskklass |
+| `isPlasmaActive`  | Innehåller plasma-aktiva material |
+| `plasmaStabilityLevel` | Stabilitetsskala (om plasmaaktiv) |
+| `originPlanetLawsConfirmed` | Intygande om laglig export |
+| `customsNotes` | Frivillig kommentar |
+
+### Valideringsregler (exempel)
+
+- `containsLifeforms === true` ⇒ `lifeformType` är obligatoriskt
+- `isPlasmaActive === true` ⇒ `plasmaStabilityLevel` måste anges (1–10)
+- `plasmaStabilityLevel < 4` ⇒ `quarantineRequired` måste vara true
+- `originPlanetLawsConfirmed` måste vara ikryssad
+
+### Automatiserad Riskbedömning (exempel)
+
+Bygg en funktion som klassificerar risknivå baserat på tullformulär.
+
+### Riskklassificering (exempel)
+
+| Villkor | Risknivå |
+|---------|----------|
+| Plasmaaktiv + stabilitet < 5 + livsform | 🔴 Kritisk |
+| Livsform + okänd art | 🔶 Hög |
+| Plasmaaktiv med stabilitet 5–7 | 🟡 Medel |
+| Inga specialegenskaper | 🟢 Låg |
+
+---
+
+## 📄 Uppgift 2: Intergalactic Chaos Engine™ (Backend/Fullstack)
+
+I rymden kan allt gå fel. Ta rollen som Master of the Universe och bygg en Intergalactic Chaos Engine som slupmässigt genererar olika händelser som påverkar frakterna.
+
+### Funktionalitet / Krav
+- Var X:e sekund muteras en slumpmässig frakt baserat på en kaoshändelse
+- Ta hänsyn till sannorlikheter
+- Visa dessa i ett “Galactic Event Feed” för admins med tidsstämpel och påverkan (frontend), alternativt endast loggning (backend)
+
+### Förslag på händelser
+
+| Händelse | Effekt på frakt |
+|---------|----------|
+| Meteorstorm | Försening |
+| Maskhål | Destination omdirigeras |
+| Piratattack | Vikt ändras till 0 |
+| Virus i biosensor | Livsformflagga ändras till “Instabil” |
+| Svart hål nära rutten | Status ändras till “Försvunnen i svart hål”  |
+| AI gör uppror | Pilot och destination ändras till "Okänd"  |
+
+### Sannorlikhet
+
+- Vissa frakttyper (beroende på kategori) har större sannolikhet att drabbas
+
+## 📄 Uppgift 3: Intergalactic AI Support™ (Fullstack)
+
+CosmoCargo vill kunna erbjudea sina kunder en tillgänglig och engegerande kanal för att snabbt få hjälp med supportärenden och guida användaren genom systemet. Du är anlitad för att implementera en chatbot som ska svara på kundernas vanligaste frågor.
+
+### Funktionalitet / Krav
+- Svara på frågor baserat på kundens fraktdata
+- Svara på frågor om formulär eller regler
+
+### Förslag på smart konversation (exempel)
+
+| Fråga från användare | Svar från bot |
+|---------|----------|
+| "Vart är mitt paket?" | "Din frakt med ID SHIP-992 befinner sig vid Mars"  |
+| "Hur fyller jag i tullformuläret?"  | "Jag kan guida dig! Har frakten plasmaaktivt innehåll?"  |
+| "Vad betyder 'försvunnen i svart hål'?"  | "Det paketet kommer aldrig komma fram" |
+| "Vad är risknivå 5?"  | "Ditt paket har ett faligt innehåll och det är hög risk för att något kommer gå fel" |
+
+---
+
+## ✅ Bedömningskriterier
+
+- Funktionalitet & kravuppfyllnad
+- Responsiv design
+- Struktur & kodkvalitet
+- Dokumentation
+- Användning av lämpliga AI-verktyg
diff --git a/backend/.gitignore b/backend/.gitignore
new file mode 100644
index 0000000..d9080b7
--- /dev/null
+++ b/backend/.gitignore
@@ -0,0 +1,93 @@
+# .NET build output
+bin/
+obj/
+
+# Visual Studio files
+.vs/
+*.user
+*.userosscache
+*.sln.docstates
+*.suo
+*.userprefs
+
+# Visual Studio Code
+.vscode/
+
+# Rider
+.idea/
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+[Aa][Rr][Mm]/
+[Aa][Rr][Mm]64/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+[Ll]ogs/
+
+# NuGet Packages
+*.nupkg
+*.snupkg
+**/packages/*
+!**/packages/build/
+
+# Local development settings
+appsettings.Development.json
+appsettings.Local.json
+
+# SQL Server files
+*.mdf
+*.ldf
+*.ndf
+
+# Azure Functions
+local.settings.json
+
+# Test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# ReSharper
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# Visual Studio cache files
+*.cache
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# Visual Studio Trace Files
+*.e2e
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Node.js
+node_modules/
+npm-debug.log
+yarn-debug.log
+yarn-error.log
+
+# Environment files
+.env
+.env.local
+.env.development
+.env.test
+.env.production 
\ No newline at end of file
diff --git a/backend/CosmoCargo.csproj b/backend/CosmoCargo.csproj
new file mode 100644
index 0000000..ae891be
--- /dev/null
+++ b/backend/CosmoCargo.csproj
@@ -0,0 +1,22 @@
+<Project Sdk="Microsoft.NET.Sdk.Web">
+
+  <PropertyGroup>
+    <TargetFramework>net9.0</TargetFramework>
+    <Nullable>enable</Nullable>
+    <ImplicitUsings>enable</ImplicitUsings>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.0" />
+    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.4" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.0" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.0">
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
+    </PackageReference>
+    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.0" />
+    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
+    <PackageReference Include="Scalar.AspNetCore" Version="2.1.13" />
+  </ItemGroup>
+
+</Project> 
\ No newline at end of file
diff --git a/backend/Data/AppDbContext.cs b/backend/Data/AppDbContext.cs
new file mode 100644
index 0000000..9586487
--- /dev/null
+++ b/backend/Data/AppDbContext.cs
@@ -0,0 +1,93 @@
+using CosmoCargo.Model;
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Data
+{
+    public class AppDbContext : DbContext
+    {
+        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
+        {
+        }
+
+        public DbSet<User> Users { get; set; }
+        public DbSet<Shipment> Shipments { get; set; }
+
+        protected override void OnModelCreating(ModelBuilder modelBuilder)
+        {
+            base.OnModelCreating(modelBuilder);
+
+            modelBuilder.ApplySnakeCaseNamingConvention();
+
+            modelBuilder.Entity<User>(entity =>
+            {
+                entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).ValueGeneratedOnAdd();
+                entity.Property(e => e.Email).IsRequired();
+                entity.Property(e => e.PasswordHash).IsRequired();
+                entity.Property(e => e.Name).IsRequired();
+                entity.Property(e => e.Role).IsRequired();
+                entity.Property(e => e.Experience);
+                entity.Property(e => e.IsActive);
+                entity.HasIndex(e => e.Email).IsUnique();
+                entity.Property(e => e.CreatedAt).IsRequired();
+                entity.Property(e => e.UpdatedAt).IsRequired();
+
+                entity.HasMany(u => u.CustomerShipments)
+                    .WithOne(s => s.Customer)
+                    .HasForeignKey(s => s.CustomerId)
+                    .OnDelete(DeleteBehavior.Restrict);
+
+                entity.HasMany(u => u.PilotShipments)
+                    .WithOne(s => s.Pilot)
+                    .HasForeignKey(s => s.PilotId)
+                    .OnDelete(DeleteBehavior.Restrict);
+            });
+
+            modelBuilder.Entity<Shipment>(entity =>
+            {
+                entity.ToTable("shipments");
+                entity.HasKey(e => e.Id);
+                entity.Property(e => e.Id).ValueGeneratedOnAdd();
+                
+                entity.ComplexProperty(e => e.Sender, sender =>
+                {
+                    sender.Property(s => s.Name).IsRequired().HasColumnName("sender_name");
+                    sender.Property(s => s.Email).IsRequired().HasColumnName("sender_email");
+                    sender.Property(s => s.Planet).IsRequired().HasColumnName("sender_planet");
+                    sender.Property(s => s.Station).IsRequired().HasColumnName("sender_station");
+                });
+                
+                entity.ComplexProperty(e => e.Receiver, receiver =>
+                {
+                    receiver.Property(r => r.Name).IsRequired().HasColumnName("receiver_name");
+                    receiver.Property(r => r.Email).IsRequired().HasColumnName("receiver_email");
+                    receiver.Property(r => r.Planet).IsRequired().HasColumnName("receiver_planet");
+                    receiver.Property(r => r.Station).IsRequired().HasColumnName("receiver_station");
+                });
+                
+                // Package information
+                entity.Property(e => e.Weight).IsRequired();
+                entity.Property(e => e.Category).IsRequired();
+                entity.Property(e => e.Priority).IsRequired();
+                entity.Property(e => e.Description);
+                entity.Property(e => e.HasInsurance).IsRequired();
+                
+                // Status and tracking
+                entity.Property(e => e.Status).IsRequired();
+                entity.Property(e => e.CreatedAt).IsRequired();
+                entity.Property(e => e.UpdatedAt).IsRequired();
+
+                entity.ComplexProperty(e => e.Customs, customs =>
+                {
+                    customs.Property(c => c.ContainsLifeforms).IsRequired().HasColumnName("customs_contains_lifeforms");
+                    customs.Property(c => c.LifeformType).HasColumnName("customs_lifeform_type");
+                    customs.Property(c => c.IsPlasmaActive).IsRequired().HasColumnName("customs_is_plasma_active");
+                    customs.Property(c => c.PlasmaStabilityLevel).HasColumnName("customs_plasma_stability_level");
+                    customs.Property(c => c.OriginPlanetLawsConfirmed).IsRequired().HasColumnName("customs_origin_planet_laws_confirmed");
+                    customs.Property(c => c.CustomsNotes).HasColumnName("customs_notes");
+                    customs.Property(c => c.QuarantineRequired).HasColumnName("customs_quarantine_required");
+                });
+            });
+        }
+    }
+}
diff --git a/backend/Data/DbInitializer.cs b/backend/Data/DbInitializer.cs
new file mode 100644
index 0000000..163c532
--- /dev/null
+++ b/backend/Data/DbInitializer.cs
@@ -0,0 +1,701 @@
+using CosmoCargo.Model;
+using Microsoft.EntityFrameworkCore;
+using System.Collections.Concurrent;
+using Npgsql;
+
+namespace CosmoCargo.Data
+{
+    public static class DbInitializer
+    {
+        private static int TotalCustomers = Random.Shared.Next(200_000, 300_000);
+        private static int TotalPilots = Random.Shared.Next(100_000, 200_000);
+        private static int TotalAdmins = Random.Shared.Next(50_000, 100_000);
+        private static int TotalShipments = Random.Shared.Next(6_000_000, 8_000_000);
+
+        private static readonly ConcurrentDictionary<string, byte> _takenEmails = new ConcurrentDictionary<string, byte>();
+        private static Guid DemoCustomerId;
+        private static Guid DemoPilotId;
+        private static Guid DemoAdminId;
+        private const int BatchSize = 200_000;
+        private const int MaxRetries = 3;
+        private const int MaxDegreeOfParallelism = 5;
+        private const int DeadlockRetryDelay = 2000;
+        private static readonly string[] _origins =
+        [
+            "Earth,Stockholm Station",
+            "Earth,Gothenburg Station",
+            "Earth,Malmö Station",
+            "Earth,Alpha Station",
+            "Earth,Beta Station",
+            "Earth,Gamma Station",
+            "Mars,Olympus Station",
+            "Mars,Base One",
+            "Moon,Colony Alpha",
+            "Titan,Research Station",
+            "Europa,Ice Harbor",
+            "Ganymede,Outpost",
+            "Callisto,Mining Facility",
+            "Io,Research Base",
+            "Enceladus,Station"
+        ];
+
+        private static readonly string[] _destinations =
+        [
+            "Mars,Olympus Station",
+            "Mars,Base One",
+            "Moon,Colony Alpha",
+            "Titan,Research Station",
+            "Europa,Ice Harbor",
+            "Ganymede,Outpost",
+            "Callisto,Mining Facility",
+            "Io,Research Base",
+            "Enceladus,Station",
+            "Triton,Research Base",
+            "Pluto,Station",
+            "Charon,Outpost",
+            "Ceres,Mining Facility",
+            "Vesta,Research Station",
+            "Pallas,Colony"
+        ];
+
+        private static readonly string[] _categories =
+        [
+            "Scientific Equipment", "Medical Supplies", "Construction Materials",
+            "Food Supplies", "Mining Equipment", "Research Samples",
+            "Spare Parts", "Personal Effects", "Industrial Machinery",
+            "Water Supplies", "Oxygen Tanks", "Fuel Cells",
+            "Electronics", "Raw Materials", "Agricultural Products"
+        ];
+
+        private static readonly string[] _priorities = ["Low", "Normal", "High", "Urgent"];
+
+        private static readonly string[] _firstNames =
+        [
+            "Erik", "Anna", "Maria", "Johan", "Anders", "Karin", "Lars", "Sofia",
+            "Mikael", "Emma", "Per", "Lisa", "Karl", "Eva", "Peter", "Linda",
+            "Andreas", "Sara", "Thomas", "Jenny", "Daniel", "Maria", "Fredrik",
+            "Emma", "Magnus", "Anna", "Jonas", "Sofia", "Martin", "Karin"
+        ];
+
+        private static readonly string[] _lastNames =
+        [
+            "Andersson", "Johansson", "Karlsson", "Nilsson", "Eriksson", "Larsson",
+            "Olsson", "Persson", "Svensson", "Gustafsson", "Pettersson", "Jonsson",
+            "Jansson", "Hansson", "Bengtsson", "Jönsson", "Lindberg", "Jakobsson",
+            "Magnusson", "Olofsson", "Lindström", "Lindqvist", "Lindgren", "Axelsson",
+            "Berg", "Bergström", "Lundberg", "Lundgren", "Lundqvist", "Mattsson"
+        ];
+
+        private static readonly string[] _experienceLevels =
+        [
+            "1 year", "2 years", "3 years", "4 years", "5 years", "6 years",
+            "7 years", "8 years", "9 years", "10 years", "11 years", "12 years",
+            "13 years", "14 years", "15 years", "16 years", "17 years", "18 years",
+            "19 years", "20 years"
+        ];
+
+        private static readonly string[] _industries =
+        [
+            "logistics", "space transport", "interplanetary shipping", "cargo management",
+            "space logistics", "freight forwarding", "supply chain", "transportation",
+            "space operations", "cargo operations", "shipping management", "space navigation",
+            "cargo handling", "space logistics management", "interplanetary operations"
+        ];
+
+        private static string GenerateUniqueEmail(string firstName, string lastName, string domain)
+        {
+            var baseEmail = $"{firstName.ToLower()}.{lastName.ToLower()}";
+            var email = $"{baseEmail}@{domain}";
+            var counter = 2;
+
+            while (!_takenEmails.TryAdd(email, 0))
+            {
+                email = $"{baseEmail}.{counter}@{domain}";
+                counter++;
+            }
+
+            return email;
+        }
+
+        private static void Log(string message)
+        {
+            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] {message}");
+        }
+
+        public static async Task InitializeAsync(IServiceProvider serviceProvider)
+        {
+            using var scope = serviceProvider.CreateScope();
+            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+            
+            // Apply migrations
+            await context.Database.ExecuteSqlRawAsync(@"
+                CREATE TABLE IF NOT EXISTS ""__EFMigrationsHistory"" (
+                    ""MigrationId"" character varying(150) NOT NULL,
+                    ""ProductVersion"" character varying(32) NOT NULL,
+                    CONSTRAINT ""PK___EFMigrationsHistory"" PRIMARY KEY (""MigrationId"")
+                );
+            ");
+            await context.Database.MigrateAsync();
+
+            if (await context.Users.AnyAsync())
+                return;
+
+            Log("DATABASE: Start seeding");
+
+            await SeedDemoUsers(serviceProvider);
+            await SeedCustomers(serviceProvider);
+            await SeedPilots(serviceProvider);
+            await SeedAdmins(serviceProvider);
+            await SeedShipments(serviceProvider);
+
+            Log("DATABASE: Seeding completed!");
+        }
+
+        private static async Task BulkInsertUsersAsync(AppDbContext context, User[] users)
+        {
+            var connection = (NpgsqlConnection)context.Database.GetDbConnection();
+            if (connection.State != System.Data.ConnectionState.Open)
+                await connection.OpenAsync();
+
+            using var writer = await connection.BeginBinaryImportAsync(
+                "COPY users (id, name, email, password_hash, role, experience, is_active, created_at, updated_at) FROM STDIN (FORMAT BINARY)");
+
+            foreach (var user in users)
+            {
+                await writer.StartRowAsync();
+                await writer.WriteAsync(user.Id);
+                await writer.WriteAsync(user.Name);
+                await writer.WriteAsync(user.Email);
+                await writer.WriteAsync(user.PasswordHash);
+                await writer.WriteAsync((int)user.Role);
+                await writer.WriteAsync(user.Experience);
+                await writer.WriteAsync(user.IsActive);
+                await writer.WriteAsync(user.CreatedAt);
+                await writer.WriteAsync(user.UpdatedAt);
+            }
+
+            await writer.CompleteAsync();
+        }
+
+        private static async Task BulkInsertShipmentsAsync(AppDbContext context, Shipment[] shipments)
+        {
+            var connection = (NpgsqlConnection)context.Database.GetDbConnection();
+            if (connection.State != System.Data.ConnectionState.Open)
+                await connection.OpenAsync();
+
+            // Set optimal settings for bulk copy
+            await using var cmd = new NpgsqlCommand("SET synchronous_commit TO OFF", connection);
+            await cmd.ExecuteNonQueryAsync();
+
+            using var writer = await connection.BeginBinaryImportAsync(
+                "COPY shipments (id, customer_id, pilot_id, sender_name, sender_email, sender_planet, sender_station, receiver_name, receiver_email, receiver_planet, receiver_station, weight, category, priority, description, has_insurance, status, created_at, updated_at) FROM STDIN (FORMAT BINARY)");
+
+            foreach (var shipment in shipments)
+            {
+                await writer.StartRowAsync();
+                await writer.WriteAsync(shipment.Id);
+                await writer.WriteAsync(shipment.CustomerId);
+                await writer.WriteAsync(shipment.PilotId);
+                await writer.WriteAsync(shipment.Sender.Name);
+                await writer.WriteAsync(shipment.Sender.Email);
+                await writer.WriteAsync(shipment.Sender.Planet);
+                await writer.WriteAsync(shipment.Sender.Station);
+                await writer.WriteAsync(shipment.Receiver.Name);
+                await writer.WriteAsync(shipment.Receiver.Email);
+                await writer.WriteAsync(shipment.Receiver.Planet);
+                await writer.WriteAsync(shipment.Receiver.Station);
+                await writer.WriteAsync(shipment.Weight);
+                await writer.WriteAsync(shipment.Category);
+                await writer.WriteAsync(shipment.Priority);
+                await writer.WriteAsync(shipment.Description);
+                await writer.WriteAsync(shipment.HasInsurance);
+                await writer.WriteAsync((int)shipment.Status);
+                await writer.WriteAsync(shipment.CreatedAt);
+                await writer.WriteAsync(shipment.UpdatedAt);
+            }
+
+            await writer.CompleteAsync();
+        }
+
+        private static async Task SeedDemoUsers(IServiceProvider serviceProvider)
+        {
+            Log("Starting to seed demo customers");
+
+            using var scope = serviceProvider.CreateScope();
+            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+
+            DemoCustomerId = Guid.NewGuid();
+            DemoPilotId = Guid.NewGuid();
+            DemoAdminId = Guid.NewGuid();
+
+            var random = new Random(Environment.TickCount);
+
+            var demoUsers = new List<User>
+            {
+                new User
+                {
+                    Id = DemoCustomerId,
+                    Name = "Demo Customer",
+                    Email = GenerateUniqueEmail("demo", "customer", "example.com"),
+                    PasswordHash = Utils.Crypto.HashPassword("mKv2P8dXrL9F"),
+                    Role = UserRole.Customer,
+                    Experience = null,
+                    IsActive = null,
+                    CreatedAt = DateTime.UtcNow.AddDays(-random.Next(0, 365))
+                },
+                new User
+                {
+                    Id = DemoPilotId,
+                    Name = "Demo Pilot",
+                    Email = GenerateUniqueEmail("demo", "pilot", "example.com"),
+                    PasswordHash = Utils.Crypto.HashPassword("zH7yB3tR5wQ9s"),
+                    Role = UserRole.Pilot,
+                    Experience = null,
+                    IsActive = null,
+                    CreatedAt = DateTime.UtcNow.AddDays(-random.Next(0, 365))
+                },
+                new User
+                {
+                    Id = DemoAdminId,
+                    Name = "Demo Admin",
+                    Email = GenerateUniqueEmail("demo", "admin", "example.com"),
+                    PasswordHash = Utils.Crypto.HashPassword("eT4xD6cV2gN8p"),
+                    Role = UserRole.Admin,
+                    Experience = null,
+                    IsActive = null,
+                    CreatedAt = DateTime.UtcNow.AddDays(-random.Next(0, 365))
+                },
+            };
+
+            await context.Users.AddRangeAsync(demoUsers);
+            await context.SaveChangesAsync();
+
+            Log($"> Processed {demoUsers.Count:N0} demo users");
+
+            Log("Demo customers seeded!");
+        }
+
+        private static async Task SeedCustomers(IServiceProvider serviceProvider)
+        {
+            Log($"Starting to seed {TotalCustomers:N0} customers");
+            var batches = (int)Math.Ceiling((double)TotalCustomers / BatchSize);
+            var options = new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism };
+            await Parallel.ForEachAsync(Enumerable.Range(0, batches), options, async (batch, ct) =>
+            {
+                using var scope = serviceProvider.CreateScope();
+                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+
+                var batchSize = Math.Min(BatchSize, TotalCustomers - batch * BatchSize);
+                var users = new User[batchSize];
+                var now = DateTime.UtcNow;
+                var random = new Random(Environment.TickCount + batch * 1000);
+
+                // Pre-generate all random data for the batch
+                var firstNameIndices = new int[batchSize];
+                var lastNameIndices = new int[batchSize];
+                var experienceIndices = new int[batchSize];
+                var industryIndices = new int[batchSize];
+                var isActiveFlags = new bool[batchSize];
+                var createdAts = new DateTime[batchSize];
+                var emails = new string[batchSize];
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    firstNameIndices[i] = random.Next(_firstNames.Length);
+                    lastNameIndices[i] = random.Next(_lastNames.Length);
+                    experienceIndices[i] = random.Next(_experienceLevels.Length);
+                    industryIndices[i] = random.Next(_industries.Length);
+                    isActiveFlags[i] = random.Next(100) < 95;
+                    createdAts[i] = now.AddDays(-random.Next(0, 365));
+                    emails[i] = GenerateUniqueEmail(
+                        _firstNames[firstNameIndices[i]], 
+                        _lastNames[lastNameIndices[i]], 
+                        "example.com"
+                    );
+                }
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    var userNumber = batch * BatchSize + i + 1;
+                    var experience = $"{_experienceLevels[experienceIndices[i]]} in {_industries[industryIndices[i]]}";
+
+                    users[i] = new User
+                    {
+                        Id = Guid.NewGuid(),
+                        Name = $"{_firstNames[firstNameIndices[i]]} {_lastNames[lastNameIndices[i]]}",
+                        Email = emails[i],
+                        PasswordHash = Utils.Crypto.HashPassword($"Customer{userNumber}"),
+                        Role = UserRole.Customer,
+                        Experience = experience,
+                        IsActive = isActiveFlags[i],
+                        CreatedAt = createdAts[i]
+                    };
+                }
+
+                for (int retry = 0; retry < MaxRetries; retry++)
+                {
+                    try
+                    {
+                        using var transaction = await context.Database.BeginTransactionAsync();
+                        try
+                        {
+                            await BulkInsertUsersAsync(context, users);
+                            await transaction.CommitAsync();
+                            break;
+                        }
+                        catch
+                        {
+                            await transaction.RollbackAsync();
+                            throw;
+                        }
+                    }
+                    catch (Exception ex) when (IsDeadlockException(ex) && retry < MaxRetries - 1)
+                    {
+                        Log($"> Deadlock detected on customer batch {batch + 1}, retry {retry + 1}");
+                        await Task.Delay(DeadlockRetryDelay * (retry + 1));
+                    }
+                    catch (Exception ex) when (retry < MaxRetries - 1)
+                    {
+                        Log($"> Retry {retry + 1} for customer batch {batch + 1} due to: {ex.Message}");
+                        await Task.Delay(1000 * (retry + 1));
+                    }
+                }
+
+                Log($"> Processed {Math.Min((batch + 1) * BatchSize, TotalCustomers):N0} customers");
+            });
+
+            Log("Customer seeding completed!");
+        }
+
+        private static bool IsDeadlockException(Exception ex)
+        {
+            return ex is PostgresException pgEx && pgEx.SqlState == "40P01";
+        }
+
+        private static async Task SeedPilots(IServiceProvider serviceProvider)
+        {
+            Log($"Starting to seed {TotalPilots:N0} pilots");
+            var batches = (int)Math.Ceiling((double)TotalPilots / BatchSize);
+            var options = new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism };
+            await Parallel.ForEachAsync(Enumerable.Range(0, batches), options, async (batch, ct) =>
+            {
+                using var scope = serviceProvider.CreateScope();
+                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+
+                var batchSize = Math.Min(BatchSize, TotalPilots - batch * BatchSize);
+                var users = new User[batchSize];
+                var now = DateTime.UtcNow;
+                var random = new Random(Environment.TickCount + batch * 1000);
+
+                // Pre-generate all random data for the batch
+                var firstNameIndices = new int[batchSize];
+                var lastNameIndices = new int[batchSize];
+                var experienceIndices = new int[batchSize];
+                var isActiveFlags = new bool[batchSize];
+                var createdAts = new DateTime[batchSize];
+                var emails = new string[batchSize];
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    firstNameIndices[i] = random.Next(_firstNames.Length);
+                    lastNameIndices[i] = random.Next(_lastNames.Length);
+                    experienceIndices[i] = random.Next(_experienceLevels.Length);
+                    isActiveFlags[i] = random.Next(100) < 90;
+                    createdAts[i] = now.AddDays(-random.Next(0, 365));
+                    emails[i] = GenerateUniqueEmail(
+                        _firstNames[firstNameIndices[i]], 
+                        _lastNames[lastNameIndices[i]], 
+                        "cosmocargo.com"
+                    );
+                }
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    var userNumber = batch * BatchSize + i + 1;
+                    var experience = $"{_experienceLevels[experienceIndices[i]]} of space piloting";
+
+                    users[i] = new User
+                    {
+                        Id = Guid.NewGuid(),
+                        Name = $"{_firstNames[firstNameIndices[i]]} {_lastNames[lastNameIndices[i]]}",
+                        Email = emails[i],
+                        PasswordHash = Utils.Crypto.HashPassword($"Pilot{userNumber}"),
+                        Role = UserRole.Pilot,
+                        Experience = experience,
+                        IsActive = isActiveFlags[i],
+                        CreatedAt = createdAts[i]
+                    };
+                }
+
+                for (int retry = 0; retry < MaxRetries; retry++)
+                {
+                    try
+                    {
+                        using var transaction = await context.Database.BeginTransactionAsync();
+                        try
+                        {
+                            await BulkInsertUsersAsync(context, users);
+                            await transaction.CommitAsync();
+                            break;
+                        }
+                        catch
+                        {
+                            await transaction.RollbackAsync();
+                            throw;
+                        }
+                    }
+                    catch (Exception ex) when (IsDeadlockException(ex) && retry < MaxRetries - 1)
+                    {
+                        Log($"> Deadlock detected on pilot batch {batch + 1}, retry {retry + 1}");
+                        await Task.Delay(DeadlockRetryDelay * (retry + 1));
+                    }
+                    catch (Exception ex) when (retry < MaxRetries - 1)
+                    {
+                        Log($"> Retry {retry + 1} for pilot batch {batch + 1} due to: {ex.Message}");
+                        await Task.Delay(1000 * (retry + 1));
+                    }
+                }
+
+                Log($"> Processed {Math.Min((batch + 1) * BatchSize, TotalPilots):N0} pilots");
+            });
+
+            Log("Pilot seeding completed!");
+        }
+
+        private static async Task SeedAdmins(IServiceProvider serviceProvider)
+        {
+            Log($"Starting to seed {TotalAdmins:N0} admins");
+            var batches = (int)Math.Ceiling((double)TotalAdmins / BatchSize);
+            var options = new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism };
+            await Parallel.ForEachAsync(Enumerable.Range(0, batches), options, async (batch, ct) =>
+            {
+                using var scope = serviceProvider.CreateScope();
+                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+
+                var batchSize = Math.Min(BatchSize, TotalAdmins - batch * BatchSize);
+                var users = new User[batchSize];
+                var now = DateTime.UtcNow;
+                var random = new Random(Environment.TickCount + batch * 1000);
+
+                // Pre-generate all random data for the batch
+                var firstNameIndices = new int[batchSize];
+                var lastNameIndices = new int[batchSize];
+                var experienceIndices = new int[batchSize];
+                var isActiveFlags = new bool[batchSize];
+                var createdAts = new DateTime[batchSize];
+                var emails = new string[batchSize];
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    firstNameIndices[i] = random.Next(_firstNames.Length);
+                    lastNameIndices[i] = random.Next(_lastNames.Length);
+                    experienceIndices[i] = random.Next(_experienceLevels.Length);
+                    isActiveFlags[i] = random.Next(100) < 98;
+                    createdAts[i] = now.AddDays(-random.Next(0, 365));
+                    emails[i] = GenerateUniqueEmail(
+                        _firstNames[firstNameIndices[i]], 
+                        _lastNames[lastNameIndices[i]], 
+                        "cosmocargo.com"
+                    );
+                }
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    var userNumber = batch * BatchSize + i + 1;
+                    var experience = $"{_experienceLevels[experienceIndices[i]]} in space logistics management";
+
+                    users[i] = new User
+                    {
+                        Id = Guid.NewGuid(),
+                        Name = $"{_firstNames[firstNameIndices[i]]} {_lastNames[lastNameIndices[i]]}",
+                        Email = emails[i],
+                        PasswordHash = Utils.Crypto.HashPassword($"Admin{userNumber}"),
+                        Role = UserRole.Admin,
+                        Experience = experience,
+                        IsActive = isActiveFlags[i],
+                        CreatedAt = createdAts[i]
+                    };
+                }
+
+                for (int retry = 0; retry < MaxRetries; retry++)
+                {
+                    try
+                    {
+                        using var transaction = await context.Database.BeginTransactionAsync();
+                        try
+                        {
+                            await BulkInsertUsersAsync(context, users);
+                            await transaction.CommitAsync();
+                            break;
+                        }
+                        catch
+                        {
+                            await transaction.RollbackAsync();
+                            throw;
+                        }
+                    }
+                    catch (Exception ex) when (IsDeadlockException(ex) && retry < MaxRetries - 1)
+                    {
+                        Log($"> Deadlock detected on admin batch {batch + 1}, retry {retry + 1}");
+                        await Task.Delay(DeadlockRetryDelay * (retry + 1));
+                    }
+                    catch (Exception ex) when (retry < MaxRetries - 1)
+                    {
+                        Log($"> Retry {retry + 1} for admin batch {batch + 1} due to: {ex.Message}");
+                        await Task.Delay(1000 * (retry + 1));
+                    }
+                }
+
+                Log($"> Processed {Math.Min((batch + 1) * BatchSize, TotalAdmins):N0} admins");
+            });
+
+            Log("Admin seeding completed!");
+        }
+
+        private static async Task SeedShipments(IServiceProvider serviceProvider)
+        {
+            Log($"Starting to seed {TotalShipments:N0} shipments");
+
+            using var scope = serviceProvider.CreateScope();
+            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+
+            // Pre-fetch all IDs in a single query and cache them
+            var customerIds = await context.Users
+                .Where(u => u.Role == UserRole.Customer)
+                .Select(u => u.Id)
+                .ToListAsync();
+
+            var pilotIds = await context.Users
+                .Where(u => u.Role == UserRole.Pilot)
+                .Select(u => u.Id)
+                .ToListAsync();
+
+            var statuses = Enum.GetValues<ShipmentStatus>();
+            
+            // Pre-calculate all possible combinations to avoid repeated calculations
+            var origins = _origins.Select(o => o.Split(',')).ToArray();
+            var destinations = _destinations.Select(d => d.Split(',')).ToArray();
+            var nameCombinations = _firstNames.SelectMany(f => _lastNames.Select(l => $"{f} {l}")).ToArray();
+            
+            // Pre-generate all possible weights, categories, and priorities
+            var weights = Enumerable.Range(50, 951).Select(w => (decimal)w).ToArray();
+            var categories = _categories.ToArray();
+            var priorities = _priorities.ToArray();
+            
+            var batches = (int)Math.Ceiling((double)TotalShipments / BatchSize);
+            var options = new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism };
+            
+            await Parallel.ForEachAsync(Enumerable.Range(0, batches), options, async (batch, ct) =>
+            {
+                using var scope = serviceProvider.CreateScope();
+                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
+                var random = new Random(Environment.TickCount + batch * 1000);
+
+                var batchSize = Math.Min(BatchSize, TotalShipments - batch * BatchSize);
+                var shipments = new Shipment[batchSize];
+                var now = DateTime.UtcNow;
+
+                // Pre-generate all random data for the batch
+                var randomData = new (int originIndex, int destIndex, int senderNameIndex, int receiverNameIndex, 
+                                    int weightIndex, int categoryIndex, int priorityIndex, bool hasInsurance,
+                                    ShipmentStatus status, DateTime createdAt, DateTime updatedAt)[batchSize];
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    var scheduledDate = now.AddDays(random.Next(-365, 365));
+                    var createdAt = scheduledDate.AddDays(-random.Next(1, 30));
+                    var updatedAt = createdAt.AddDays(random.Next(0, 30));
+                    var status = statuses[random.Next(statuses.Length)];
+
+                    randomData[i] = (
+                        random.Next(origins.Length),
+                        random.Next(destinations.Length),
+                        random.Next(nameCombinations.Length),
+                        random.Next(nameCombinations.Length),
+                        random.Next(weights.Length),
+                        random.Next(categories.Length),
+                        random.Next(priorities.Length),
+                        random.Next(100) < 70,
+                        status,
+                        createdAt,
+                        updatedAt
+                    );
+                }
+
+                // Create shipments using pre-generated data
+                var senderContact = new ShipmentContact();
+                var receiverContact = new ShipmentContact();
+
+                for (int i = 0; i < batchSize; i++)
+                {
+                    var data = randomData[i];
+                    var origin = origins[data.originIndex];
+                    var destination = destinations[data.destIndex];
+
+                    // Reuse the same contact objects
+                    senderContact.Name = nameCombinations[data.senderNameIndex];
+                    senderContact.Email = "sender.shipment@example.com";
+                    senderContact.Planet = origin[0];
+                    senderContact.Station = origin[1];
+
+                    receiverContact.Name = nameCombinations[data.receiverNameIndex];
+                    receiverContact.Email = "receiver.shipment@example.com";
+                    receiverContact.Planet = destination[0];
+                    receiverContact.Station = destination[1];
+
+                    shipments[i] = new Shipment
+                    {
+                        Id = Guid.NewGuid(),
+                        CustomerId = random.Next(100) < 5 ? DemoCustomerId : customerIds[random.Next(customerIds.Count)],
+                        PilotId = data.status == ShipmentStatus.Assigned 
+                            || data.status == ShipmentStatus.InTransit 
+                            || data.status == ShipmentStatus.Delivered ? (random.Next(100) < 5 ? DemoPilotId : pilotIds[random.Next(pilotIds.Count)]) : null,
+                        Sender = senderContact,
+                        Receiver = receiverContact,
+                        Weight = weights[data.weightIndex],
+                        Category = categories[data.categoryIndex],
+                        Priority = priorities[data.priorityIndex],
+                        Description = "Sample shipment",
+                        HasInsurance = data.hasInsurance,
+                        Status = data.status,
+                        CreatedAt = data.createdAt,
+                        UpdatedAt = data.updatedAt
+                    };
+                }
+
+                for (int retry = 0; retry < MaxRetries; retry++)
+                {
+                    try
+                    {
+                        using var transaction = await context.Database.BeginTransactionAsync();
+                        try
+                        {
+                            await BulkInsertShipmentsAsync(context, shipments);
+                            await transaction.CommitAsync();
+                            break;
+                        }
+                        catch
+                        {
+                            await transaction.RollbackAsync();
+                            throw;
+                        }
+                    }
+                    catch (Exception ex) when (IsDeadlockException(ex) && retry < MaxRetries - 1)
+                    {
+                        Log($"> Deadlock detected on shipment batch {batch + 1}, retry {retry + 1}");
+                        await Task.Delay(DeadlockRetryDelay * (retry + 1));
+                    }
+                    catch (Exception ex) when (retry < MaxRetries - 1)
+                    {
+                        Log($"> Retry {retry + 1} for shipment batch {batch + 1} due to: {ex.Message}");
+                        await Task.Delay(1000 * (retry + 1));
+                    }
+                }
+
+                Log($"> Processed {Math.Min((batch + 1) * BatchSize, TotalShipments):N0} shipments");
+            });
+
+            Log("Shipment seeding completed!");
+        }
+    }
+}
diff --git a/backend/Data/SnakeCaseNamingConvention.cs b/backend/Data/SnakeCaseNamingConvention.cs
new file mode 100644
index 0000000..833b16f
--- /dev/null
+++ b/backend/Data/SnakeCaseNamingConvention.cs
@@ -0,0 +1,35 @@
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Data
+{
+    public static class ModelBuilderExtensions
+    {
+        public static void ApplySnakeCaseNamingConvention(this ModelBuilder modelBuilder)
+        {
+            foreach (var entity in modelBuilder.Model.GetEntityTypes())
+            {
+                entity.SetTableName(ToSnakeCase(entity.GetTableName()));
+
+                foreach (var property in entity.GetProperties())
+                    property.SetColumnName(ToSnakeCase(property.GetColumnName()));
+
+                foreach (var key in entity.GetKeys())
+                    key.SetName(ToSnakeCase(key.GetName()));
+
+                foreach (var foreignKey in entity.GetForeignKeys())
+                    foreignKey.SetConstraintName(ToSnakeCase(foreignKey.GetConstraintName()));
+
+                foreach (var index in entity.GetIndexes())
+                    index.SetDatabaseName(ToSnakeCase(index.GetDatabaseName()));
+            }
+        }
+
+        private static string ToSnakeCase(string? name)
+        {
+            if (string.IsNullOrEmpty(name))
+                return name ?? "";
+
+            return string.Concat(name.Select((x, i) => i > 0 && char.IsUpper(x) ? "_" + x.ToString() : x.ToString())).ToLower();
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Dockerfile b/backend/Dockerfile
new file mode 100644
index 0000000..3f7a081
--- /dev/null
+++ b/backend/Dockerfile
@@ -0,0 +1,36 @@
+# Build stage
+FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
+
+# Define build arguments
+ARG ASPNETCORE_ENVIRONMENT
+ARG CONNECTION_STRING
+
+# Set environment variables
+ENV ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
+ENV ConnectionStrings__DefaultConnection=$CONNECTION_STRING
+
+WORKDIR /src
+COPY ["*.csproj", "./"]
+RUN dotnet restore
+COPY . .
+RUN dotnet publish -c Release -o /app/publish
+
+# Runtime stage
+FROM mcr.microsoft.com/dotnet/aspnet:9.0
+
+# Define build arguments again for runtime stage
+ARG ASPNETCORE_ENVIRONMENT
+ARG CONNECTION_STRING
+
+WORKDIR /app
+COPY --from=build /app/publish .
+
+# Set environment variables in runtime stage
+ENV ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT
+ENV ConnectionStrings__DefaultConnection=$CONNECTION_STRING
+ENV ASPNETCORE_URLS=http://+:5000
+ENV ASPNETCORE_HTTP_PORTS=5000
+
+ENTRYPOINT ["dotnet", "CosmoCargo.dll"]
+
+EXPOSE 5000
diff --git a/backend/Endpoints/AuthEndpoints.cs b/backend/Endpoints/AuthEndpoints.cs
new file mode 100644
index 0000000..e553416
--- /dev/null
+++ b/backend/Endpoints/AuthEndpoints.cs
@@ -0,0 +1,52 @@
+using CosmoCargo.Services;
+using Microsoft.AspNetCore.Authentication;
+using Microsoft.AspNetCore.Authentication.Cookies;
+using System.Security.Claims;
+
+namespace CosmoCargo.Endpoints
+{
+    public static class AuthEndpoints
+    {
+        public static async Task<IResult> Login(
+            LoginRequest request,
+            IUserService userService,
+            HttpContext context)
+        {
+            if (!await userService.ValidateUserCredentialsAsync(request.Email, request.Password))
+                return Results.Unauthorized();
+
+            var user = await userService.GetUserByEmailAsync(request.Email);
+            if (user == null)
+                return Results.Unauthorized();
+
+            var claims = new List<Claim>
+            {
+                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
+                new Claim(ClaimTypes.Name, user.Name),
+                new Claim(ClaimTypes.Email, user.Email),
+                new Claim(ClaimTypes.Role, user.Role.ToString())
+            };
+
+            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
+            var authProperties = new AuthenticationProperties
+            {
+                IsPersistent = true,
+                ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7),
+                AllowRefresh = true
+            };
+
+            await context.SignInAsync(
+                CookieAuthenticationDefaults.AuthenticationScheme,
+                new ClaimsPrincipal(claimsIdentity),
+                authProperties);
+
+            return Results.Ok("");
+        }
+    }
+
+    public class LoginRequest
+    {
+        public string Email { get; set; } = string.Empty;
+        public string Password { get; set; } = string.Empty;
+    }
+}
diff --git a/backend/Endpoints/HealthcheckEndpoints.cs b/backend/Endpoints/HealthcheckEndpoints.cs
new file mode 100644
index 0000000..fac850a
--- /dev/null
+++ b/backend/Endpoints/HealthcheckEndpoints.cs
@@ -0,0 +1,10 @@
+namespace CosmoCargo.Endpoints
+{
+    public static class HealthcheckEndpoints
+    {
+        public static IResult Ping()
+        {
+            return Results.Ok();
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Endpoints/PilotEndpoints.cs b/backend/Endpoints/PilotEndpoints.cs
new file mode 100644
index 0000000..ccdae3e
--- /dev/null
+++ b/backend/Endpoints/PilotEndpoints.cs
@@ -0,0 +1,109 @@
+using CosmoCargo.Model;
+using CosmoCargo.Model.Queries;
+using CosmoCargo.Services;
+using CosmoCargo.Utils;
+using System.Security.Claims;
+
+namespace CosmoCargo.Endpoints
+{
+    public static class PilotEndpoints
+    {
+        public static async Task<IResult> GetPilots(
+            [AsParameters] PilotsFilter filter,
+            IPilotService pilotService,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            if (role != UserRole.Admin.ToString())
+                return Results.Forbid();
+
+            var pilots = await pilotService.GetAllPilotsAsync(filter);
+            return Results.Ok(pilots);
+        }
+
+        public static async Task<IResult> GetPilotById(
+            Guid id,
+            IPilotService pilotService,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            if (role != UserRole.Admin.ToString())
+                return Results.Forbid();
+
+            var pilot = await pilotService.GetPilotByIdAsync(id);
+            if (pilot == null)
+                return Results.NotFound();
+
+            return Results.Ok(pilot);
+        }
+
+        public static async Task<IResult> GetPilotAvailability(
+            Guid id,
+            IPilotService pilotService,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            if (role != UserRole.Admin.ToString())
+                return Results.Forbid();
+
+            var pilot = await pilotService.GetPilotByIdAsync(id);
+            if (pilot == null)
+                return Results.NotFound();
+
+            var isAvailable = await pilotService.IsPilotAvailableAsync(id);
+            var activeShipments = await pilotService.GetPilotShipmentCountAsync(id);
+            
+            return Results.Ok(new PilotAvailabilityResponse
+            {
+                IsAvailable = isAvailable,
+                ActiveShipments = activeShipments,
+                MaxShipments = 3
+            });
+        }
+
+        public static async Task<IResult> UpdatePilotStatus(
+            Guid id,
+            UpdatePilotStatusRequest request,
+            IPilotService pilotService)
+        {
+            await pilotService.UpdatePilotStatusAsync(id, request.IsActive);
+            return Results.Ok();
+        }
+
+        public static async Task<IResult> UpdatePilot(
+            Guid id,
+            UpdatePilotRequest request,
+            IPilotService pilotService)
+        {
+            await pilotService.UpdatePilotAsync(id, request.Name, request.Email, request.Experience);
+            return Results.Ok();
+        }
+
+        public static async Task<IResult> CreatePilot(
+            CreatePilotRequest request,
+            IPilotService pilotService)
+        {
+            var id = await pilotService.CreatePilotAsync(request.Name, request.Email, request.Experience);
+            return Results.Ok(id);
+        }
+    }
+
+    public class UpdatePilotStatusRequest
+    {
+        public bool IsActive { get; set; }
+    }
+
+    public class UpdatePilotRequest
+    {
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public string? Experience { get; set; }
+    }
+
+    public class CreatePilotRequest
+    {
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public string? Experience { get; set; }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Endpoints/ShipmentEndpoints.cs b/backend/Endpoints/ShipmentEndpoints.cs
new file mode 100644
index 0000000..ba99f25
--- /dev/null
+++ b/backend/Endpoints/ShipmentEndpoints.cs
@@ -0,0 +1,161 @@
+using CosmoCargo.Model;
+using CosmoCargo.Model.Queries;
+using CosmoCargo.Services;
+using CosmoCargo.Utils;
+using System.Security.Claims;
+namespace CosmoCargo.Endpoints
+{
+    public static class ShipmentEndpoints
+    {
+        public static async Task<IResult> GetShipments(
+            IShipmentService shipmentService,
+            [AsParameters] ShipmentsFilter filter,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            var userId = user.GetUserId();
+
+            PaginatedResult<Shipment> result;
+
+            if (role == UserRole.Admin.ToString())
+                result = await shipmentService.GetShipmentsAsync(filter);
+            else if (role == UserRole.Pilot.ToString())
+                result = await shipmentService.GetShipmentsByPilotIdAsync(userId, filter);
+            else if (role == UserRole.Customer.ToString())
+                result = await shipmentService.GetShipmentsByCustomerIdAsync(userId, filter);
+            else
+                return Results.Forbid();
+
+            return Results.Ok(result);
+        }
+
+        public static async Task<IResult> GetShipmentById(
+            Guid id,
+            IShipmentService shipmentService,
+            ClaimsPrincipal user)
+        {
+            var shipment = await shipmentService.GetShipmentByIdAsync(id);
+            if (shipment == null)
+                return Results.NotFound();
+
+            var role = user.GetRole();
+            var userId = user.GetUserId();
+
+            if (role == UserRole.Admin.ToString())
+                return Results.Ok(shipment);
+            else if (role == UserRole.Pilot.ToString() && shipment.PilotId == userId)
+                return Results.Ok(shipment);
+            else if (role == UserRole.Customer.ToString() && shipment.CustomerId == userId)
+                return Results.Ok(shipment);
+
+            return Results.NotFound();
+        }
+
+        public static async Task<IResult> CreateShipment(
+            CreateShipmentRequest request,
+            IShipmentService shipmentService,
+            ClaimsPrincipal user)
+        {
+            var userId = user.GetUserId();
+
+            var shipment = new Shipment
+            {
+                Id = Guid.NewGuid(),
+                CustomerId = userId,
+                Sender = new ShipmentContact
+                {
+                    Name = request.Origin.Name,
+                    Email = request.Origin.Email,
+                    Planet = request.Origin.Planet,
+                    Station = request.Origin.Station
+                },
+                Receiver = new ShipmentContact
+                {
+                    Name = request.Destination.Name,
+                    Email = request.Destination.Email,
+                    Planet = request.Destination.Planet,
+                    Station = request.Destination.Station
+                },
+                Weight = request.Weight,
+                Category = request.Category,
+                Priority = request.Priority,
+                Description = request.Description,
+                HasInsurance = request.HasInsurance,
+                Customs = request.Customs ?? new CustomsForm(),
+            };
+
+            var createdShipment = await shipmentService.CreateShipmentAsync(shipment);
+            return Results.Created($"/api/shipments/{createdShipment.Id}", createdShipment);
+        }
+
+        public static async Task<IResult> UpdateShipmentStatus(
+            Guid id,
+            UpdateShipmentStatusRequest request,
+            IShipmentService shipmentService,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            var userId = user.GetUserId();
+
+            var shipment = await shipmentService.GetShipmentByIdAsync(id);
+            if (shipment == null)
+                return Results.NotFound();
+
+            if (role == UserRole.Pilot.ToString() && shipment.PilotId != userId)
+                return Results.Forbid();
+
+            var updatedShipment = await shipmentService.UpdateShipmentStatusAsync(id, request.Status);
+            if (updatedShipment == null)
+                return Results.NotFound();
+
+            return Results.Ok(updatedShipment);
+        }
+
+        public static async Task<IResult> AssignPilot(
+            Guid id,
+            AssignPilotRequest request,
+            IShipmentService shipmentService,
+            ClaimsPrincipal user)
+        {
+            var role = user.GetRole();
+            if (role != UserRole.Admin.ToString())
+                return Results.Forbid();
+
+            var updatedShipment = await shipmentService.AssignPilotAsync(id, request.PilotId);
+            if (updatedShipment == null)
+                return Results.NotFound();
+
+            return Results.Ok(updatedShipment);
+        }
+    }
+
+    public class LocationDto
+    {
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public string Planet { get; set; } = string.Empty;
+        public string Station { get; set; } = string.Empty;
+    }
+
+    public class CreateShipmentRequest
+    {
+        public LocationDto Origin { get; set; } = new();
+        public LocationDto Destination { get; set; } = new();
+        public decimal Weight { get; set; }
+        public string Category { get; set; } = string.Empty;
+        public string Priority { get; set; } = string.Empty;
+        public string? Description { get; set; }
+        public bool HasInsurance { get; set; }
+        public CustomsForm Customs { get; set; } = new();
+    }
+
+    public class UpdateShipmentStatusRequest
+    {
+        public ShipmentStatus Status { get; set; }
+    }
+
+    public class AssignPilotRequest
+    {
+        public Guid PilotId { get; set; }
+    }
+}
diff --git a/backend/Endpoints/UserEndpoints.cs b/backend/Endpoints/UserEndpoints.cs
new file mode 100644
index 0000000..9432435
--- /dev/null
+++ b/backend/Endpoints/UserEndpoints.cs
@@ -0,0 +1,61 @@
+using CosmoCargo.Model;
+using CosmoCargo.Services;
+using CosmoCargo.Utils;
+using System.ComponentModel.DataAnnotations;
+using System.Security.Claims;
+
+namespace CosmoCargo.Endpoints
+{
+    public static class UserEndpoints
+    {
+        public static async Task<IResult> GetMe(
+            IUserService userService,
+            ClaimsPrincipal user)
+        {
+            var userId = user.GetUserId();
+            var currentUser = await userService.GetUserByIdAsync(userId);
+            if (currentUser == null)
+                return Results.NotFound();
+
+            return Results.Ok(new UserResponse
+            {
+                Id = currentUser.Id,
+                Name = currentUser.Name,
+                Email = currentUser.Email,
+                Role = currentUser.Role,
+                Experience = currentUser.Experience,
+                IsActive = currentUser.IsActive,
+                CreatedAt = currentUser.CreatedAt
+            });
+        }
+
+        public static async Task<IResult> UpdateMe(
+            UpdateUserRequest request,
+            IUserService userService,
+            ClaimsPrincipal user)
+        {
+            var userId = user.GetUserId();
+            await userService.UpdateUserAsync(userId, request.Name);
+            return Results.Ok();
+        }
+    }
+
+    public class UpdateUserRequest
+    {
+        [Required]
+        [MinLength(3)]
+        [MaxLength(100)]
+        public string Name { get; set; } = string.Empty;
+    }
+
+    public class UserResponse
+    {
+        public Guid Id { get; set; }
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public UserRole Role { get; set; }
+        public string? Experience { get; set; }
+        public bool? IsActive { get; set; }
+        public DateTime CreatedAt { get; set; }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Migrations/20250429132240_Initial.Designer.cs b/backend/Migrations/20250429132240_Initial.Designer.cs
new file mode 100644
index 0000000..80440f8
--- /dev/null
+++ b/backend/Migrations/20250429132240_Initial.Designer.cs
@@ -0,0 +1,216 @@
+﻿// <auto-generated />
+using System;
+using System.Collections.Generic;
+using CosmoCargo.Data;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
+
+#nullable disable
+
+namespace CosmoCargo.Migrations
+{
+    [DbContext(typeof(AppDbContext))]
+    [Migration("20250429132240_Initial")]
+    partial class Initial
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "9.0.0")
+                .HasAnnotation("Relational:MaxIdentifierLength", 63);
+
+            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<string>("Category")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("category");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<Guid>("CustomerId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("customer_id");
+
+                    b.Property<string>("Description")
+                        .HasColumnType("text")
+                        .HasColumnName("description");
+
+                    b.Property<bool>("HasInsurance")
+                        .HasColumnType("boolean")
+                        .HasColumnName("has_insurance");
+
+                    b.Property<Guid?>("PilotId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("pilot_id");
+
+                    b.Property<string>("Priority")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("priority");
+
+                    b.Property<int>("Status")
+                        .HasColumnType("integer")
+                        .HasColumnName("status");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.Property<decimal>("Weight")
+                        .HasColumnType("numeric")
+                        .HasColumnName("weight");
+
+                    b.ComplexProperty<Dictionary<string, object>>("Receiver", "CosmoCargo.Model.Shipment.Receiver#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_station");
+                        });
+
+                    b.ComplexProperty<Dictionary<string, object>>("Sender", "CosmoCargo.Model.Shipment.Sender#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_station");
+                        });
+
+                    b.HasKey("Id")
+                        .HasName("p_k_shipments");
+
+                    b.HasIndex("CustomerId");
+
+                    b.HasIndex("PilotId");
+
+                    b.ToTable("shipments", (string)null);
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<string>("Email")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("email");
+
+                    b.Property<string>("Experience")
+                        .HasColumnType("text")
+                        .HasColumnName("experience");
+
+                    b.Property<bool?>("IsActive")
+                        .HasColumnType("boolean")
+                        .HasColumnName("is_active");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("name");
+
+                    b.Property<string>("PasswordHash")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("password_hash");
+
+                    b.Property<int>("Role")
+                        .HasColumnType("integer")
+                        .HasColumnName("role");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.HasKey("Id")
+                        .HasName("p_k_users");
+
+                    b.HasIndex("Email")
+                        .IsUnique();
+
+                    b.ToTable("users");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.HasOne("CosmoCargo.Model.User", "Customer")
+                        .WithMany("CustomerShipments")
+                        .HasForeignKey("CustomerId")
+                        .OnDelete(DeleteBehavior.Restrict)
+                        .IsRequired();
+
+                    b.HasOne("CosmoCargo.Model.User", "Pilot")
+                        .WithMany("PilotShipments")
+                        .HasForeignKey("PilotId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.Navigation("Customer");
+
+                    b.Navigation("Pilot");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Navigation("CustomerShipments");
+
+                    b.Navigation("PilotShipments");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/backend/Migrations/20250429132240_Initial.cs b/backend/Migrations/20250429132240_Initial.cs
new file mode 100644
index 0000000..a6aa7dd
--- /dev/null
+++ b/backend/Migrations/20250429132240_Initial.cs
@@ -0,0 +1,101 @@
+﻿using System;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace CosmoCargo.Migrations
+{
+    /// <inheritdoc />
+    public partial class Initial : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "users",
+                columns: table => new
+                {
+                    id = table.Column<Guid>(type: "uuid", nullable: false),
+                    name = table.Column<string>(type: "text", nullable: false),
+                    email = table.Column<string>(type: "text", nullable: false),
+                    password_hash = table.Column<string>(type: "text", nullable: false),
+                    role = table.Column<int>(type: "integer", nullable: false),
+                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
+                    updated_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
+                    experience = table.Column<string>(type: "text", nullable: true),
+                    is_active = table.Column<bool>(type: "boolean", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("p_k_users", x => x.id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "shipments",
+                columns: table => new
+                {
+                    id = table.Column<Guid>(type: "uuid", nullable: false),
+                    customer_id = table.Column<Guid>(type: "uuid", nullable: false),
+                    pilot_id = table.Column<Guid>(type: "uuid", nullable: true),
+                    weight = table.Column<decimal>(type: "numeric", nullable: false),
+                    category = table.Column<string>(type: "text", nullable: false),
+                    priority = table.Column<string>(type: "text", nullable: false),
+                    description = table.Column<string>(type: "text", nullable: true),
+                    has_insurance = table.Column<bool>(type: "boolean", nullable: false),
+                    status = table.Column<int>(type: "integer", nullable: false),
+                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
+                    updated_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
+                    receiver_email = table.Column<string>(type: "text", nullable: false),
+                    receiver_name = table.Column<string>(type: "text", nullable: false),
+                    receiver_planet = table.Column<string>(type: "text", nullable: false),
+                    receiver_station = table.Column<string>(type: "text", nullable: false),
+                    sender_email = table.Column<string>(type: "text", nullable: false),
+                    sender_name = table.Column<string>(type: "text", nullable: false),
+                    sender_planet = table.Column<string>(type: "text", nullable: false),
+                    sender_station = table.Column<string>(type: "text", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("p_k_shipments", x => x.id);
+                    table.ForeignKey(
+                        name: "FK_shipments_users_customer_id",
+                        column: x => x.customer_id,
+                        principalTable: "users",
+                        principalColumn: "id",
+                        onDelete: ReferentialAction.Restrict);
+                    table.ForeignKey(
+                        name: "FK_shipments_users_pilot_id",
+                        column: x => x.pilot_id,
+                        principalTable: "users",
+                        principalColumn: "id",
+                        onDelete: ReferentialAction.Restrict);
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_shipments_customer_id",
+                table: "shipments",
+                column: "customer_id");
+
+            migrationBuilder.CreateIndex(
+                name: "IX_shipments_pilot_id",
+                table: "shipments",
+                column: "pilot_id");
+
+            migrationBuilder.CreateIndex(
+                name: "IX_users_email",
+                table: "users",
+                column: "email",
+                unique: true);
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "shipments");
+
+            migrationBuilder.DropTable(
+                name: "users");
+        }
+    }
+}
diff --git a/backend/Migrations/20250515184123_AddCustomsFormToShipment.Designer.cs b/backend/Migrations/20250515184123_AddCustomsFormToShipment.Designer.cs
new file mode 100644
index 0000000..e109450
--- /dev/null
+++ b/backend/Migrations/20250515184123_AddCustomsFormToShipment.Designer.cs
@@ -0,0 +1,249 @@
+﻿// <auto-generated />
+using System;
+using System.Collections.Generic;
+using CosmoCargo.Data;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
+
+#nullable disable
+
+namespace CosmoCargo.Migrations
+{
+    [DbContext(typeof(AppDbContext))]
+    [Migration("20250515184123_AddCustomsFormToShipment")]
+    partial class AddCustomsFormToShipment
+    {
+        /// <inheritdoc />
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "9.0.0")
+                .HasAnnotation("Relational:MaxIdentifierLength", 63);
+
+            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<string>("Category")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("category");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<Guid>("CustomerId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("customer_id");
+
+                    b.Property<string>("Description")
+                        .HasColumnType("text")
+                        .HasColumnName("description");
+
+                    b.Property<bool>("HasInsurance")
+                        .HasColumnType("boolean")
+                        .HasColumnName("has_insurance");
+
+                    b.Property<Guid?>("PilotId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("pilot_id");
+
+                    b.Property<string>("Priority")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("priority");
+
+                    b.Property<int>("Status")
+                        .HasColumnType("integer")
+                        .HasColumnName("status");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.Property<decimal>("Weight")
+                        .HasColumnType("numeric")
+                        .HasColumnName("weight");
+
+                    b.ComplexProperty<Dictionary<string, object>>("Customs", "CosmoCargo.Model.Shipment.Customs#CustomsForm", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<bool>("ContainsLifeforms")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_contains_lifeforms");
+
+                            b1.Property<string>("CustomsNotes")
+                                .HasColumnType("text")
+                                .HasColumnName("customs_notes");
+
+                            b1.Property<bool>("IsPlasmaActive")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_is_plasma_active");
+
+                            b1.Property<string>("LifeformType")
+                                .HasColumnType("text")
+                                .HasColumnName("customs_lifeform_type");
+
+                            b1.Property<bool>("OriginPlanetLawsConfirmed")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_origin_planet_laws_confirmed");
+
+                            b1.Property<int?>("PlasmaStabilityLevel")
+                                .HasColumnType("integer")
+                                .HasColumnName("customs_plasma_stability_level");
+
+                            b1.Property<bool?>("QuarantineRequired")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_quarantine_required");
+                        });
+
+                    b.ComplexProperty<Dictionary<string, object>>("Receiver", "CosmoCargo.Model.Shipment.Receiver#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_station");
+                        });
+
+                    b.ComplexProperty<Dictionary<string, object>>("Sender", "CosmoCargo.Model.Shipment.Sender#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_station");
+                        });
+
+                    b.HasKey("Id")
+                        .HasName("p_k_shipments");
+
+                    b.HasIndex("CustomerId");
+
+                    b.HasIndex("PilotId");
+
+                    b.ToTable("shipments", (string)null);
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<string>("Email")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("email");
+
+                    b.Property<string>("Experience")
+                        .HasColumnType("text")
+                        .HasColumnName("experience");
+
+                    b.Property<bool?>("IsActive")
+                        .HasColumnType("boolean")
+                        .HasColumnName("is_active");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("name");
+
+                    b.Property<string>("PasswordHash")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("password_hash");
+
+                    b.Property<int>("Role")
+                        .HasColumnType("integer")
+                        .HasColumnName("role");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.HasKey("Id")
+                        .HasName("p_k_users");
+
+                    b.HasIndex("Email")
+                        .IsUnique();
+
+                    b.ToTable("users");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.HasOne("CosmoCargo.Model.User", "Customer")
+                        .WithMany("CustomerShipments")
+                        .HasForeignKey("CustomerId")
+                        .OnDelete(DeleteBehavior.Restrict)
+                        .IsRequired();
+
+                    b.HasOne("CosmoCargo.Model.User", "Pilot")
+                        .WithMany("PilotShipments")
+                        .HasForeignKey("PilotId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.Navigation("Customer");
+
+                    b.Navigation("Pilot");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Navigation("CustomerShipments");
+
+                    b.Navigation("PilotShipments");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/backend/Migrations/20250515184123_AddCustomsFormToShipment.cs b/backend/Migrations/20250515184123_AddCustomsFormToShipment.cs
new file mode 100644
index 0000000..c6b8b98
--- /dev/null
+++ b/backend/Migrations/20250515184123_AddCustomsFormToShipment.cs
@@ -0,0 +1,91 @@
+﻿using Microsoft.EntityFrameworkCore.Migrations;
+
+#nullable disable
+
+namespace CosmoCargo.Migrations
+{
+    /// <inheritdoc />
+    public partial class AddCustomsFormToShipment : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<bool>(
+                name: "customs_contains_lifeforms",
+                table: "shipments",
+                type: "boolean",
+                nullable: false,
+                defaultValue: false);
+
+            migrationBuilder.AddColumn<bool>(
+                name: "customs_is_plasma_active",
+                table: "shipments",
+                type: "boolean",
+                nullable: false,
+                defaultValue: false);
+
+            migrationBuilder.AddColumn<string>(
+                name: "customs_lifeform_type",
+                table: "shipments",
+                type: "text",
+                nullable: true);
+
+            migrationBuilder.AddColumn<string>(
+                name: "customs_notes",
+                table: "shipments",
+                type: "text",
+                nullable: true);
+
+            migrationBuilder.AddColumn<bool>(
+                name: "customs_origin_planet_laws_confirmed",
+                table: "shipments",
+                type: "boolean",
+                nullable: false,
+                defaultValue: false);
+
+            migrationBuilder.AddColumn<int>(
+                name: "customs_plasma_stability_level",
+                table: "shipments",
+                type: "integer",
+                nullable: true);
+
+            migrationBuilder.AddColumn<bool>(
+                name: "customs_quarantine_required",
+                table: "shipments",
+                type: "boolean",
+                nullable: true);
+        }
+
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "customs_contains_lifeforms",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_is_plasma_active",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_lifeform_type",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_notes",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_origin_planet_laws_confirmed",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_plasma_stability_level",
+                table: "shipments");
+
+            migrationBuilder.DropColumn(
+                name: "customs_quarantine_required",
+                table: "shipments");
+        }
+    }
+}
diff --git a/backend/Migrations/AppDbContextModelSnapshot.cs b/backend/Migrations/AppDbContextModelSnapshot.cs
new file mode 100644
index 0000000..aaefb77
--- /dev/null
+++ b/backend/Migrations/AppDbContextModelSnapshot.cs
@@ -0,0 +1,246 @@
+﻿// <auto-generated />
+using System;
+using System.Collections.Generic;
+using CosmoCargo.Data;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
+
+#nullable disable
+
+namespace CosmoCargo.Migrations
+{
+    [DbContext(typeof(AppDbContext))]
+    partial class AppDbContextModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "9.0.0")
+                .HasAnnotation("Relational:MaxIdentifierLength", 63);
+
+            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<string>("Category")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("category");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<Guid>("CustomerId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("customer_id");
+
+                    b.Property<string>("Description")
+                        .HasColumnType("text")
+                        .HasColumnName("description");
+
+                    b.Property<bool>("HasInsurance")
+                        .HasColumnType("boolean")
+                        .HasColumnName("has_insurance");
+
+                    b.Property<Guid?>("PilotId")
+                        .HasColumnType("uuid")
+                        .HasColumnName("pilot_id");
+
+                    b.Property<string>("Priority")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("priority");
+
+                    b.Property<int>("Status")
+                        .HasColumnType("integer")
+                        .HasColumnName("status");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.Property<decimal>("Weight")
+                        .HasColumnType("numeric")
+                        .HasColumnName("weight");
+
+                    b.ComplexProperty<Dictionary<string, object>>("Customs", "CosmoCargo.Model.Shipment.Customs#CustomsForm", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<bool>("ContainsLifeforms")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_contains_lifeforms");
+
+                            b1.Property<string>("CustomsNotes")
+                                .HasColumnType("text")
+                                .HasColumnName("customs_notes");
+
+                            b1.Property<bool>("IsPlasmaActive")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_is_plasma_active");
+
+                            b1.Property<string>("LifeformType")
+                                .HasColumnType("text")
+                                .HasColumnName("customs_lifeform_type");
+
+                            b1.Property<bool>("OriginPlanetLawsConfirmed")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_origin_planet_laws_confirmed");
+
+                            b1.Property<int?>("PlasmaStabilityLevel")
+                                .HasColumnType("integer")
+                                .HasColumnName("customs_plasma_stability_level");
+
+                            b1.Property<bool?>("QuarantineRequired")
+                                .HasColumnType("boolean")
+                                .HasColumnName("customs_quarantine_required");
+                        });
+
+                    b.ComplexProperty<Dictionary<string, object>>("Receiver", "CosmoCargo.Model.Shipment.Receiver#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("receiver_station");
+                        });
+
+                    b.ComplexProperty<Dictionary<string, object>>("Sender", "CosmoCargo.Model.Shipment.Sender#ShipmentContact", b1 =>
+                        {
+                            b1.IsRequired();
+
+                            b1.Property<string>("Email")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_email");
+
+                            b1.Property<string>("Name")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_name");
+
+                            b1.Property<string>("Planet")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_planet");
+
+                            b1.Property<string>("Station")
+                                .IsRequired()
+                                .HasColumnType("text")
+                                .HasColumnName("sender_station");
+                        });
+
+                    b.HasKey("Id")
+                        .HasName("p_k_shipments");
+
+                    b.HasIndex("CustomerId");
+
+                    b.HasIndex("PilotId");
+
+                    b.ToTable("shipments", (string)null);
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasColumnType("uuid")
+                        .HasColumnName("id");
+
+                    b.Property<DateTime>("CreatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("created_at");
+
+                    b.Property<string>("Email")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("email");
+
+                    b.Property<string>("Experience")
+                        .HasColumnType("text")
+                        .HasColumnName("experience");
+
+                    b.Property<bool?>("IsActive")
+                        .HasColumnType("boolean")
+                        .HasColumnName("is_active");
+
+                    b.Property<string>("Name")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("name");
+
+                    b.Property<string>("PasswordHash")
+                        .IsRequired()
+                        .HasColumnType("text")
+                        .HasColumnName("password_hash");
+
+                    b.Property<int>("Role")
+                        .HasColumnType("integer")
+                        .HasColumnName("role");
+
+                    b.Property<DateTime>("UpdatedAt")
+                        .HasColumnType("timestamp with time zone")
+                        .HasColumnName("updated_at");
+
+                    b.HasKey("Id")
+                        .HasName("p_k_users");
+
+                    b.HasIndex("Email")
+                        .IsUnique();
+
+                    b.ToTable("users");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.Shipment", b =>
+                {
+                    b.HasOne("CosmoCargo.Model.User", "Customer")
+                        .WithMany("CustomerShipments")
+                        .HasForeignKey("CustomerId")
+                        .OnDelete(DeleteBehavior.Restrict)
+                        .IsRequired();
+
+                    b.HasOne("CosmoCargo.Model.User", "Pilot")
+                        .WithMany("PilotShipments")
+                        .HasForeignKey("PilotId")
+                        .OnDelete(DeleteBehavior.Restrict);
+
+                    b.Navigation("Customer");
+
+                    b.Navigation("Pilot");
+                });
+
+            modelBuilder.Entity("CosmoCargo.Model.User", b =>
+                {
+                    b.Navigation("CustomerShipments");
+
+                    b.Navigation("PilotShipments");
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/backend/Model/CustomsForm.cs b/backend/Model/CustomsForm.cs
new file mode 100644
index 0000000..ea67e15
--- /dev/null
+++ b/backend/Model/CustomsForm.cs
@@ -0,0 +1,14 @@
+
+namespace CosmoCargo.Model
+{
+    public class CustomsForm
+    {
+        public bool ContainsLifeforms { get; set; }
+        public string? LifeformType { get; set; } // Required if ContainsLifeforms
+        public bool IsPlasmaActive { get; set; }
+        public int? PlasmaStabilityLevel { get; set; } // 1-10, required if IsPlasmaActive
+        public bool OriginPlanetLawsConfirmed { get; set; } // Must be checked
+        public string? CustomsNotes { get; set; }
+        public bool? QuarantineRequired { get; set; } // Required if PlasmaStabilityLevel < 4
+    }
+} 
\ No newline at end of file
diff --git a/backend/Model/Exceptions/NotFoundException.cs b/backend/Model/Exceptions/NotFoundException.cs
new file mode 100644
index 0000000..c9fc78a
--- /dev/null
+++ b/backend/Model/Exceptions/NotFoundException.cs
@@ -0,0 +1,15 @@
+namespace CosmoCargo.Model.Exceptions
+{
+    public class NotFoundException : Exception
+    {
+        public string AggregateType { get; set; } = string.Empty;
+        public string AggregateId { get; set; } = string.Empty;
+
+        protected NotFoundException() {}
+        public NotFoundException(string aggregateType, string aggregateId) : base($"{aggregateType} with id {aggregateId} not found")
+        {
+            AggregateType = aggregateType;
+            AggregateId = aggregateId;
+        }
+    }
+}
diff --git a/backend/Model/Queries/PaginatedResult.cs b/backend/Model/Queries/PaginatedResult.cs
new file mode 100644
index 0000000..c9e6dab
--- /dev/null
+++ b/backend/Model/Queries/PaginatedResult.cs
@@ -0,0 +1,20 @@
+namespace CosmoCargo.Model.Queries
+{
+    public class PaginatedResult<T>
+    {
+        public IEnumerable<T> Items { get; set; } = Enumerable.Empty<T>();
+        public int TotalCount { get; set; }
+        public int Page { get; set; }
+        public int PageSize { get; set; }
+        public int TotalPages { get; set; }
+
+        public PaginatedResult(IEnumerable<T> items, int totalCount, int page, int pageSize)
+        {
+            Items = items;
+            TotalCount = totalCount;
+            Page = page;
+            PageSize = pageSize;
+            TotalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Model/Queries/PaginationParams.cs b/backend/Model/Queries/PaginationParams.cs
new file mode 100644
index 0000000..83a67b4
--- /dev/null
+++ b/backend/Model/Queries/PaginationParams.cs
@@ -0,0 +1,21 @@
+ namespace CosmoCargo.Model.Queries
+{
+    public class PaginationParams
+    {
+        private const int MaxPageSize = 50;
+        private int _pageSize = 10;
+        private int _page = 1;
+
+        public int Page
+        {
+            get => _page;
+            set => _page = value < 1 ? 1 : value;
+        }
+
+        public int PageSize
+        {
+            get => _pageSize;
+            set => _pageSize = value > MaxPageSize ? MaxPageSize : value < 1 ? 1 : value;
+        }
+    }
+}
\ No newline at end of file
diff --git a/backend/Model/Queries/PilotAvailabilityResponse.cs b/backend/Model/Queries/PilotAvailabilityResponse.cs
new file mode 100644
index 0000000..2b9f8dc
--- /dev/null
+++ b/backend/Model/Queries/PilotAvailabilityResponse.cs
@@ -0,0 +1,9 @@
+namespace CosmoCargo.Model.Queries
+{
+    public class PilotAvailabilityResponse
+    {
+        public bool IsAvailable { get; set; }
+        public int ActiveShipments { get; set; }
+        public int MaxShipments { get; set; }
+    }
+}
diff --git a/backend/Model/Queries/PilotsFilter.cs b/backend/Model/Queries/PilotsFilter.cs
new file mode 100644
index 0000000..a314df7
--- /dev/null
+++ b/backend/Model/Queries/PilotsFilter.cs
@@ -0,0 +1,8 @@
+namespace CosmoCargo.Model.Queries
+{
+    public class PilotsFilter : PaginationParams
+    {
+        public string? Search { get; set; }
+        public bool? IsActive { get; set; }
+    }
+} 
\ No newline at end of file
diff --git a/backend/Model/Queries/ShipmentsFilter.cs b/backend/Model/Queries/ShipmentsFilter.cs
new file mode 100644
index 0000000..98b98ca
--- /dev/null
+++ b/backend/Model/Queries/ShipmentsFilter.cs
@@ -0,0 +1,10 @@
+using System.Reflection;
+
+namespace CosmoCargo.Model.Queries
+{
+    public class ShipmentsFilter : PaginationParams
+    {
+        public string? Search { get; set; }
+        public ShipmentStatus? Status { get; set; }
+    }
+}
diff --git a/backend/Model/RiskLevel.cs b/backend/Model/RiskLevel.cs
new file mode 100644
index 0000000..eeb1a28
--- /dev/null
+++ b/backend/Model/RiskLevel.cs
@@ -0,0 +1,10 @@
+namespace CosmoCargo.Model
+{
+    public enum RiskLevel
+    {
+        Low,
+        Medium,
+        High,
+        Critical
+    }
+}
diff --git a/backend/Model/Shipment.cs b/backend/Model/Shipment.cs
new file mode 100644
index 0000000..eeaf530
--- /dev/null
+++ b/backend/Model/Shipment.cs
@@ -0,0 +1,30 @@
+namespace CosmoCargo.Model
+{
+    public class Shipment
+    {
+        public Guid Id { get; set; }
+        public Guid CustomerId { get; set; }
+        public Guid? PilotId { get; set; }
+        public ShipmentContact Sender { get; set; } = new();
+        public ShipmentContact Receiver { get; set; } = new();
+        
+        // Package information
+        public decimal Weight { get; set; }
+        public string Category { get; set; } = string.Empty;
+        public string Priority { get; set; } = string.Empty;
+        public string? Description { get; set; }
+        public bool HasInsurance { get; set; }
+        
+        // Status and tracking
+        public ShipmentStatus Status { get; set; }
+        public DateTime CreatedAt { get; set; }
+        public DateTime UpdatedAt { get; set; }
+
+        // Customs
+        public CustomsForm Customs { get; set; } = new();
+
+        // Navigation properties
+        public virtual User Customer { get; set; } = null!;
+        public virtual User? Pilot { get; set; }
+    }
+}
diff --git a/backend/Model/ShipmentContact.cs b/backend/Model/ShipmentContact.cs
new file mode 100644
index 0000000..cbcd34d
--- /dev/null
+++ b/backend/Model/ShipmentContact.cs
@@ -0,0 +1,12 @@
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Model
+{
+    public class ShipmentContact
+    {
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public string Planet { get; set; } = string.Empty;
+        public string Station { get; set; } = string.Empty;
+    }
+} 
\ No newline at end of file
diff --git a/backend/Model/ShipmentStatus.cs b/backend/Model/ShipmentStatus.cs
new file mode 100644
index 0000000..02bf3ff
--- /dev/null
+++ b/backend/Model/ShipmentStatus.cs
@@ -0,0 +1,50 @@
+namespace CosmoCargo.Model
+{
+    /// <summary>
+    /// Represents the current status of a shipment in the system.
+    /// </summary>
+    /// <remarks>
+    /// - Initial state: WaitingForApproval
+    /// - Final states: Delivered, Cancelled, Denied
+    /// - Only admins can approve/deny shipments
+    /// - Only pilots can update status to InTransit
+    /// - Any role can cancel a shipment
+    /// </remarks>
+    public enum ShipmentStatus
+    {
+        /// <summary>
+        /// Shipment is waiting for admin approval
+        /// </summary>
+        WaitingForApproval,
+
+        /// <summary>
+        /// Shipment has been approved by admin
+        /// </summary>
+        Approved,
+
+        /// <summary>
+        /// Shipment has been denied by admin
+        /// </summary>
+        Denied,
+
+        /// <summary>
+        /// Shipment has been assigned to a pilot
+        /// </summary>
+        Assigned,
+
+        /// <summary>
+        /// Shipment is currently in transit
+        /// </summary>
+        InTransit,
+
+        /// <summary>
+        /// Shipment has been delivered to its destination
+        /// </summary>
+        Delivered,
+
+        /// <summary>
+        /// Shipment has been cancelled
+        /// </summary>
+        Cancelled
+    }
+} 
\ No newline at end of file
diff --git a/backend/Model/User.cs b/backend/Model/User.cs
new file mode 100644
index 0000000..d3d02cb
--- /dev/null
+++ b/backend/Model/User.cs
@@ -0,0 +1,23 @@
+using System.Text.Json.Serialization;
+
+namespace CosmoCargo.Model
+{
+    public class User
+    {
+        public Guid Id { get; set; }
+        public string Name { get; set; } = string.Empty;
+        public string Email { get; set; } = string.Empty;
+        public string PasswordHash { get; set; } = string.Empty;
+        public UserRole Role { get; set; }
+        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
+        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
+
+        // Pilot-specific properties
+        public string? Experience { get; set; } = null;
+        public bool? IsActive { get; set; } = null;
+        
+        // Navigation properties
+        public virtual ICollection<Shipment>? CustomerShipments { get; set; }
+        public virtual ICollection<Shipment>? PilotShipments { get; set; }
+    }
+}
diff --git a/backend/Model/UserRole.cs b/backend/Model/UserRole.cs
new file mode 100644
index 0000000..ab93216
--- /dev/null
+++ b/backend/Model/UserRole.cs
@@ -0,0 +1,9 @@
+namespace CosmoCargo.Model
+{
+    public enum UserRole
+    {
+        Customer,
+        Pilot,
+        Admin
+    }
+}
diff --git a/backend/Program.cs b/backend/Program.cs
new file mode 100644
index 0000000..f40c179
--- /dev/null
+++ b/backend/Program.cs
@@ -0,0 +1,157 @@
+using CosmoCargo.Data;
+using CosmoCargo.Services;
+using CosmoCargo.Endpoints;
+using Microsoft.AspNetCore.Authentication.JwtBearer;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.IdentityModel.Tokens;
+using System.Text;
+using Microsoft.OpenApi.Models;
+using Scalar.AspNetCore;
+using CosmoCargo.Utils;
+using Microsoft.AspNetCore.Authentication.Cookies;
+
+var builder = WebApplication.CreateBuilder(args);
+
+builder.Configuration.AddEnvironmentVariables();
+
+builder.Logging.ClearProviders();
+builder.Logging.AddConsole();
+builder.Logging.AddFilter("Microsoft.EntityFrameworkCore.Database.Command", LogLevel.Warning);
+
+builder.Services.AddOpenApi();
+builder.Services.AddSwaggerGen(options =>
+{
+    options.SwaggerDoc("v1", new OpenApiInfo
+    {
+        Title = "CosmoCargo API",
+        Version = "v1",
+        Description = "API for managing space cargo shipments"
+    });
+
+    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
+    {
+        Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
+        Name = "Authorization",
+        In = ParameterLocation.Header,
+        Type = SecuritySchemeType.ApiKey,
+        Scheme = "Bearer"
+    });
+
+    options.AddSecurityRequirement(new OpenApiSecurityRequirement
+    {
+        {
+            new OpenApiSecurityScheme
+            {
+                Reference = new OpenApiReference
+                {
+                    Type = ReferenceType.SecurityScheme,
+                    Id = "Bearer"
+                }
+            },
+            Array.Empty<string>()
+        }
+    });
+});
+
+builder.Services.AddCors(options =>
+{
+    options.AddDefaultPolicy(policy =>
+    {
+        policy.WithOrigins(
+            "http://localhost:3000",
+            "http://localhost:3001",
+            "http://0.0.0.0:3000",
+            "http://0.0.0.0:3001",
+            "frontend.cosmocargo.orb.local:3000",
+            "frontend.cosmocargo.orb.local:3001"
+        )
+        .AllowAnyHeader()
+        .AllowAnyMethod()
+        .AllowCredentials();
+    });
+});
+
+builder.Services.AddDbContext<AppDbContext>(options =>
+{
+    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"))
+        .EnableDetailedErrors();
+});
+
+builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
+    .AddJwtBearer(options =>
+    {
+        options.TokenValidationParameters = new TokenValidationParameters
+        {
+            ValidateIssuer = true,
+            ValidateAudience = true,
+            ValidateLifetime = true,
+            ValidateIssuerSigningKey = true,
+            ValidIssuer = builder.Configuration["Jwt:Issuer"],
+            ValidAudience = builder.Configuration["Jwt:Audience"],
+            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? "defaultDevKeyThatShouldBeReplaced"))
+        };
+    });
+
+builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
+    .AddCookie(options =>
+    {
+        options.Cookie.Name = "CosmoCargo.Auth";
+        options.Cookie.HttpOnly = true;
+        options.Cookie.SecurePolicy = CookieSecurePolicy.None;
+        options.Cookie.SameSite = SameSiteMode.Lax;
+        options.ExpireTimeSpan = TimeSpan.FromDays(7);
+        options.SlidingExpiration = true;
+    });
+
+builder.Services.AddAuthorization();
+
+builder.Services.AddScoped<IUserService, UserService>();
+builder.Services.AddScoped<IShipmentService, ShipmentService>();
+builder.Services.AddScoped<IPilotService, PilotService>();
+
+builder.Services.Configure<Microsoft.AspNetCore.Http.Json.JsonOptions>(options =>
+{
+    options.SerializerOptions.PropertyNameCaseInsensitive = true;
+    options.SerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles;
+});
+
+var app = builder.Build();
+
+app.MapOpenApi();
+app.MapScalarApiReference();
+app.UseCors();
+app.UseAuthentication();
+app.UseAuthorization();
+
+using (var scope = app.Services.CreateScope())
+{
+    var services = scope.ServiceProvider;
+    try
+    {
+        await DbInitializer.InitializeAsync(services);
+    }
+    catch (Exception ex)
+    {
+        var logger = services.GetRequiredService<ILogger<Program>>();
+        logger.LogError(ex, "Ett fel uppstod vid initialisering av databasen.");
+        throw;
+    }
+}
+
+app.GetAnonymous("/api/healthcheck/ping", HealthcheckEndpoints.Ping);
+app.PostAnonymous("/api/auth/login", AuthEndpoints.Login);
+app.Get("/api/shipments", ShipmentEndpoints.GetShipments);
+app.Get("/api/shipments/{id}", ShipmentEndpoints.GetShipmentById);
+app.Post("/api/shipments", ShipmentEndpoints.CreateShipment, ["Customer"]);
+app.Put("/api/shipments/{id}/status", ShipmentEndpoints.UpdateShipmentStatus, ["Pilot", "Admin"]);
+app.Put("/api/shipments/{id}/assign", ShipmentEndpoints.AssignPilot, ["Admin"]);
+app.Get("/api/pilots", PilotEndpoints.GetPilots, ["Admin"]);
+app.Get("/api/pilots/{id}", PilotEndpoints.GetPilotById, ["Admin"]);
+app.Get("/api/pilots/{id}/availability", PilotEndpoints.GetPilotAvailability, ["Admin"]);
+app.Put("/api/pilots/{id}/status", PilotEndpoints.UpdatePilotStatus, ["Admin"]);
+app.Put("/api/pilots/{id}", PilotEndpoints.UpdatePilot, ["Admin"]);
+app.Post("/api/pilots", PilotEndpoints.CreatePilot, ["Admin"]);
+app.Get("/api/users/me", UserEndpoints.GetMe);
+app.Put("/api/users/me", UserEndpoints.UpdateMe);
+
+app.Run();
diff --git a/backend/Properties/launchSettings.json b/backend/Properties/launchSettings.json
new file mode 100644
index 0000000..c36e5f3
--- /dev/null
+++ b/backend/Properties/launchSettings.json
@@ -0,0 +1,14 @@
+{
+  "profiles": {
+    "CosmoCargo": {
+      "commandName": "Project",
+      "dotnetRunMessages": true,
+      "launchBrowser": true,
+      "launchUrl": "scalar",
+      "applicationUrl": "http://localhost:5000",
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      }
+    }
+  }
+} 
\ No newline at end of file
diff --git a/backend/Services/IPilotService.cs b/backend/Services/IPilotService.cs
new file mode 100644
index 0000000..a93347f
--- /dev/null
+++ b/backend/Services/IPilotService.cs
@@ -0,0 +1,16 @@
+using CosmoCargo.Model;
+using CosmoCargo.Model.Queries;
+
+namespace CosmoCargo.Services
+{
+    public interface IPilotService
+    {
+        Task<PaginatedResult<User>> GetAllPilotsAsync(PilotsFilter filter);
+        Task<User?> GetPilotByIdAsync(Guid id);
+        Task<bool> IsPilotAvailableAsync(Guid pilotId);
+        Task<int> GetPilotShipmentCountAsync(Guid pilotId);
+        Task UpdatePilotStatusAsync(Guid id, bool isActive);
+        Task UpdatePilotAsync(Guid id, string name, string email, string? experience);
+        Task<Guid> CreatePilotAsync(string name, string email, string? experience);
+    }
+} 
\ No newline at end of file
diff --git a/backend/Services/IShipmentService.cs b/backend/Services/IShipmentService.cs
new file mode 100644
index 0000000..055c72d
--- /dev/null
+++ b/backend/Services/IShipmentService.cs
@@ -0,0 +1,15 @@
+using CosmoCargo.Model;
+using CosmoCargo.Model.Queries;
+namespace CosmoCargo.Services
+{
+    public interface IShipmentService
+    {
+        Task<PaginatedResult<Shipment>> GetShipmentsAsync(ShipmentsFilter filter);
+        Task<PaginatedResult<Shipment>> GetShipmentsByCustomerIdAsync(Guid customerId, ShipmentsFilter filter);
+        Task<PaginatedResult<Shipment>> GetShipmentsByPilotIdAsync(Guid pilotId, ShipmentsFilter filter);
+        Task<Shipment?> GetShipmentByIdAsync(Guid id);
+        Task<Shipment> CreateShipmentAsync(Shipment shipment);
+        Task<Shipment?> UpdateShipmentStatusAsync(Guid id, ShipmentStatus status);
+        Task<Shipment?> AssignPilotAsync(Guid shipmentId, Guid pilotId);
+    }
+} 
\ No newline at end of file
diff --git a/backend/Services/IUserService.cs b/backend/Services/IUserService.cs
new file mode 100644
index 0000000..7515096
--- /dev/null
+++ b/backend/Services/IUserService.cs
@@ -0,0 +1,12 @@
+using CosmoCargo.Model;
+
+namespace CosmoCargo.Services
+{
+    public interface IUserService
+    {
+        Task<User?> GetUserByIdAsync(Guid id);
+        Task<User?> GetUserByEmailAsync(string email);
+        Task<bool> ValidateUserCredentialsAsync(string email, string password);
+        Task<User?> UpdateUserAsync(Guid id, string name);
+    }
+} 
\ No newline at end of file
diff --git a/backend/Services/PilotService.cs b/backend/Services/PilotService.cs
new file mode 100644
index 0000000..106eba7
--- /dev/null
+++ b/backend/Services/PilotService.cs
@@ -0,0 +1,132 @@
+using CosmoCargo.Data;
+using CosmoCargo.Model;
+using CosmoCargo.Model.Exceptions;
+using CosmoCargo.Model.Queries;
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Services
+{
+    public class PilotService : IPilotService
+    {
+        private readonly AppDbContext _context;
+
+        public PilotService(AppDbContext context)
+        {
+            _context = context;
+        }
+
+        private IQueryable<User> ApplyFilter(PilotsFilter filter)
+        {
+            var query = _context.Users
+                .Where(u => u.Role == UserRole.Pilot)
+                .AsQueryable();
+
+            if (!string.IsNullOrEmpty(filter.Search))
+            {
+                query = query.Where(p =>
+                    p.Name.Contains(filter.Search) ||
+                    p.Email.Contains(filter.Search));
+            }
+
+            if (filter.IsActive.HasValue)
+            {
+                query = query.Where(p => p.IsActive == filter.IsActive.Value);
+            }
+
+            return query;
+        }
+
+        public async Task<PaginatedResult<User>> GetAllPilotsAsync(PilotsFilter filter)
+        {
+            var query = ApplyFilter(filter);
+            
+            var totalCount = await query.CountAsync();
+            
+            var pilots = await query
+                .OrderBy(p => p.Name)
+                .Skip((filter.Page - 1) * filter.PageSize)
+                .Take(filter.PageSize)
+                .ToListAsync();
+
+            return new PaginatedResult<User>(
+                pilots,
+                totalCount,
+                filter.Page,
+                filter.PageSize
+            );
+        }
+
+        public async Task<User?> GetPilotByIdAsync(Guid id)
+        {
+            return await _context.Users
+                .FirstOrDefaultAsync(u => u.Id == id && u.Role == UserRole.Pilot);
+        }
+
+        public async Task<bool> IsPilotAvailableAsync(Guid pilotId)
+        {
+            var activeShipments = await _context.Shipments
+                .CountAsync(s => s.PilotId == pilotId && 
+                                (s.Status == ShipmentStatus.Approved || 
+                                 s.Status == ShipmentStatus.InTransit));
+
+            return activeShipments < 3;
+        }
+
+        public async Task<int> GetPilotShipmentCountAsync(Guid pilotId)
+        {
+            return await _context.Shipments
+                .CountAsync(s => s.PilotId == pilotId && 
+                               (s.Status == ShipmentStatus.Approved || 
+                                 s.Status == ShipmentStatus.InTransit));
+        }
+
+        public async Task UpdatePilotStatusAsync(Guid id, bool isActive)
+        {
+            var pilot = await _context.Users
+                .FirstOrDefaultAsync(u => u.Id == id && u.Role == UserRole.Pilot);
+                
+            if (pilot == null)
+                throw new NotFoundException("Pilot", id.ToString());
+                
+            pilot.IsActive = isActive;
+            pilot.UpdatedAt = DateTime.UtcNow;
+            
+            await _context.SaveChangesAsync();
+        }
+
+        public async Task UpdatePilotAsync(Guid id, string name, string email, string? experience)
+        {
+            var pilot = await _context.Users
+                .FirstOrDefaultAsync(u => u.Id == id && u.Role == UserRole.Pilot);
+                
+            if (pilot == null)
+                throw new NotFoundException("Pilot", id.ToString());
+                
+            pilot.Name = name;
+            pilot.Email = email;
+            pilot.Experience = experience;
+            pilot.UpdatedAt = DateTime.UtcNow;
+            
+            await _context.SaveChangesAsync();
+        }
+
+        public async Task<Guid> CreatePilotAsync(string name, string email, string? experience)
+        {
+            var pilot = new User
+            {
+                Id = Guid.NewGuid(),
+                Name = name,
+                Email = email,
+                Experience = experience,
+                Role = UserRole.Pilot,
+                IsActive = true,
+                CreatedAt = DateTime.UtcNow,
+                UpdatedAt = DateTime.UtcNow
+            };
+            
+            _context.Users.Add(pilot);
+            await _context.SaveChangesAsync();
+            return pilot.Id;
+        }
+    }
+}
diff --git a/backend/Services/ShipmentService.cs b/backend/Services/ShipmentService.cs
new file mode 100644
index 0000000..48841c2
--- /dev/null
+++ b/backend/Services/ShipmentService.cs
@@ -0,0 +1,145 @@
+using CosmoCargo.Data;
+using CosmoCargo.Model;
+using CosmoCargo.Model.Queries;
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Services
+{
+    public class ShipmentService : IShipmentService
+    {
+        private readonly AppDbContext _context;
+
+        public ShipmentService(AppDbContext context)
+        {
+            _context = context;
+        }
+
+        private IQueryable<Shipment> ApplyFilter(ShipmentsFilter filter)
+        {
+            var query = _context.Shipments.AsQueryable();
+
+            if (!string.IsNullOrEmpty(filter.Search))
+            {
+                query = query.Where(s =>
+                    s.Id.ToString().Contains(filter.Search) ||
+                    s.Sender.Name.Contains(filter.Search) ||
+                    s.Sender.Email.Contains(filter.Search) ||
+                    s.Sender.Planet.Contains(filter.Search) ||
+                    s.Sender.Station.Contains(filter.Search) ||
+                    s.Receiver.Name.Contains(filter.Search) ||
+                    s.Receiver.Email.Contains(filter.Search) ||
+                    s.Receiver.Planet.Contains(filter.Search) ||
+                    s.Receiver.Station.Contains(filter.Search));
+            }
+
+            if (filter.Status.HasValue)
+            {
+                query = query.Where(s => s.Status == filter.Status.Value);
+            }
+
+            return query;
+        }
+
+        public async Task<PaginatedResult<Shipment>> GetShipmentsAsync(ShipmentsFilter filter)
+        {
+            var query = ApplyFilter(filter);
+            var totalCount = await query.CountAsync();
+            
+            var items = await query
+                .Include(s => s.Pilot)
+                .OrderByDescending(s => s.CreatedAt)
+                .Skip((filter.Page - 1) * filter.PageSize)
+                .Take(filter.PageSize)
+                .ToListAsync();
+
+            return new PaginatedResult<Shipment>(items, totalCount, filter.Page, filter.PageSize);
+        }
+
+        public async Task<PaginatedResult<Shipment>> GetShipmentsByCustomerIdAsync(Guid customerId, ShipmentsFilter filter)
+        {
+            var query = ApplyFilter(filter)
+                .Where(s => s.CustomerId == customerId);
+            
+            var totalCount = await query.CountAsync();
+            
+            var items = await query
+                .Include(s => s.Pilot)
+                .OrderByDescending(s => s.CreatedAt)
+                .Skip((filter.Page - 1) * filter.PageSize)
+                .Take(filter.PageSize)
+                .ToListAsync();
+
+            return new PaginatedResult<Shipment>(items, totalCount, filter.Page, filter.PageSize);
+        }
+
+        public async Task<PaginatedResult<Shipment>> GetShipmentsByPilotIdAsync(Guid pilotId, ShipmentsFilter filter)
+        {
+            var query = ApplyFilter(filter)
+                .Include(s => s.Customer)
+                .Include(s => s.Pilot)
+                .Where(s => s.PilotId == pilotId);
+            
+            var totalCount = await query.CountAsync();
+            
+            var items = await query
+                .OrderByDescending(s => s.CreatedAt)
+                .Skip((filter.Page - 1) * filter.PageSize)
+                .Take(filter.PageSize)
+                .ToListAsync();
+
+            return new PaginatedResult<Shipment>(items, totalCount, filter.Page, filter.PageSize);
+        }
+
+        public async Task<Shipment?> GetShipmentByIdAsync(Guid id)
+        {
+            return await _context.Shipments
+                .Include(s => s.Customer)
+                .Include(s => s.Pilot)
+                .FirstOrDefaultAsync(s => s.Id == id);
+        }
+
+        public async Task<Shipment> CreateShipmentAsync(Shipment shipment)
+        {
+            shipment.Id = Guid.NewGuid();
+            shipment.CreatedAt = DateTime.UtcNow;
+            shipment.UpdatedAt = DateTime.UtcNow;
+            shipment.Status = ShipmentStatus.WaitingForApproval;
+            shipment.PilotId = null;
+
+            _context.Shipments.Add(shipment);
+            await _context.SaveChangesAsync();
+
+            return shipment;
+        }
+
+        public async Task<Shipment?> UpdateShipmentStatusAsync(Guid id, ShipmentStatus status)
+        {
+            var shipment = await _context.Shipments.FindAsync(id);
+            if (shipment == null)
+                return null;
+
+            shipment.Status = status;
+            shipment.UpdatedAt = DateTime.UtcNow;
+
+            await _context.SaveChangesAsync();
+            return shipment;
+        }
+
+        public async Task<Shipment?> AssignPilotAsync(Guid shipmentId, Guid pilotId)
+        {
+            var shipment = await _context.Shipments.FindAsync(shipmentId);
+            if (shipment == null)
+                return null;
+
+            var pilot = await _context.Users.FirstOrDefaultAsync(u => u.Id == pilotId && u.Role == UserRole.Pilot);
+            if (pilot == null)
+                return null;
+
+            shipment.PilotId = pilotId;
+            shipment.UpdatedAt = DateTime.UtcNow;
+
+            await _context.SaveChangesAsync();
+            return shipment;
+        }
+    }
+}
diff --git a/backend/Services/UserService.cs b/backend/Services/UserService.cs
new file mode 100644
index 0000000..b9f5568
--- /dev/null
+++ b/backend/Services/UserService.cs
@@ -0,0 +1,48 @@
+using CosmoCargo.Data;
+using CosmoCargo.Model;
+using CosmoCargo.Model.Exceptions;
+using Microsoft.EntityFrameworkCore;
+
+namespace CosmoCargo.Services
+{
+    public class UserService : IUserService
+    {
+        private readonly AppDbContext _context;
+
+        public UserService(AppDbContext context)
+        {
+            _context = context;
+        }
+
+        public async Task<User?> GetUserByIdAsync(Guid id)
+        {
+            return await _context.Users.FindAsync(id);
+        }
+
+        public async Task<User?> GetUserByEmailAsync(string email)
+        {
+            return await _context.Users.FirstOrDefaultAsync(u => u.Email == email);
+        }
+
+        public async Task<bool> ValidateUserCredentialsAsync(string email, string password)
+        {
+            var user = await GetUserByEmailAsync(email);
+            if (user == null)
+                return false;
+
+            return Utils.Crypto.HashPassword(password) == user.PasswordHash;
+        }
+
+        public async Task<User?> UpdateUserAsync(Guid id, string name)
+        {
+            var user = await _context.Users.FindAsync(id);
+            if (user == null)
+                throw new NotFoundException("User", id.ToString());
+
+            user.Name = name;
+            await _context.SaveChangesAsync();
+
+            return user;
+        }
+    }
+}
diff --git a/backend/Utils/ClaimsPrincipalExtensions.cs b/backend/Utils/ClaimsPrincipalExtensions.cs
new file mode 100644
index 0000000..3a2bb7d
--- /dev/null
+++ b/backend/Utils/ClaimsPrincipalExtensions.cs
@@ -0,0 +1,12 @@
+using System.Security.Claims;
+
+namespace CosmoCargo.Utils
+{
+    public static class ClaimsPrincipalExtensions
+    {
+        public static string GetRole(this ClaimsPrincipal user) => user.FindFirst(ClaimTypes.Role)?.Value ?? string.Empty;
+        public static Guid GetUserId(this ClaimsPrincipal user) => Guid.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty);
+
+
+    }
+}
diff --git a/backend/Utils/Crypto.cs b/backend/Utils/Crypto.cs
new file mode 100644
index 0000000..c34ee23
--- /dev/null
+++ b/backend/Utils/Crypto.cs
@@ -0,0 +1,15 @@
+using System.Security.Cryptography;
+using System.Text;
+
+namespace CosmoCargo.Utils
+{
+    public static class Crypto
+    {
+        public static string HashPassword(string password)
+        {
+            using var sha256 = SHA256.Create();
+            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
+            return Convert.ToBase64String(hashedBytes);
+        }
+    }
+}
diff --git a/backend/Utils/EndpointExtensions.cs b/backend/Utils/EndpointExtensions.cs
new file mode 100644
index 0000000..e060a31
--- /dev/null
+++ b/backend/Utils/EndpointExtensions.cs
@@ -0,0 +1,60 @@
+using System.Diagnostics.CodeAnalysis;
+using System.Security.Claims;
+
+namespace CosmoCargo.Utils
+{
+    public static class EndpointExtensions
+    {
+        public static void Get(this WebApplication app, [StringSyntax("Route")] string pattern, Delegate handler, string[]? roles = null)
+        {
+            if (roles == null || roles.Length == 0)
+            {
+                app.MapGet(pattern, handler)
+                .RequireAuthorization();
+            }
+            else
+            {
+                app.MapGet(pattern, handler)
+                   .RequireAuthorization(policy => policy.RequireRole(roles));
+            }
+        }
+
+        public static void Post(this WebApplication app, [StringSyntax("Route")] string pattern, Delegate handler, string[]? roles = null)
+        {
+            if (roles == null || roles.Length == 0)
+            {
+                app.MapPost(pattern, handler)
+                   .RequireAuthorization();
+            }
+            else
+            {
+                app.MapPost(pattern, handler)
+                   .RequireAuthorization(policy => policy.RequireRole(roles));
+            }
+        }
+
+        public static void Put(this WebApplication app, [StringSyntax("Route")] string pattern, Delegate handler, string[]? roles = null)
+        {
+            if (roles == null || roles.Length == 0)
+            {
+                app.MapPut(pattern, handler)
+                   .RequireAuthorization();
+            }
+            else
+            {
+                app.MapPut(pattern, handler)
+                   .RequireAuthorization(policy => policy.RequireRole(roles));
+            }
+        }
+
+        public static void PostAnonymous(this WebApplication app, [StringSyntax("Route")] string pattern, Delegate handler)
+        {
+            app.MapPost(pattern, handler);
+        }
+
+        public static void GetAnonymous(this WebApplication app, [StringSyntax("Route")] string pattern, Delegate handler)
+        {
+            app.MapGet(pattern, handler);
+        }
+    }
+}
diff --git a/backend/appsettings.json b/backend/appsettings.json
new file mode 100644
index 0000000..94713d5
--- /dev/null
+++ b/backend/appsettings.json
@@ -0,0 +1,18 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft.AspNetCore": "Warning"
+    }
+  },
+  "AllowedHosts": "*",
+  "ConnectionStrings": {
+    "DefaultConnection": "Host=localhost;Port=5432;Database=cosmocargo;Username=postgres;Password=postgres"
+  },
+  "Jwt": {
+    "Key": "ThisIsASecretKeyForDevEnvironmentOnly",
+    "Issuer": "CosmoCargo",
+    "Audience": "CosmoCargo",
+    "ExpiryMinutes": 60
+  }
+} 
\ No newline at end of file
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..363055f
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,74 @@
+services:
+  frontend:
+    build:
+      context: ./frontend
+      dockerfile: Dockerfile
+      args:
+        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:5000}
+        NODE_ENV: ${NODE_ENV:-production}
+    ports:
+      - "3000:3000"
+    depends_on:
+      - backend
+    develop:
+      watch:
+        - action: rebuild
+          path: ./frontend
+
+  backend:
+    build:
+      context: ./backend
+      dockerfile: Dockerfile
+      args:
+        ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
+        CONNECTION_STRING: ${CONNECTION_STRING:-Host=db;Port=5432;Database=cosmocargo;Username=postgres;Password=postgres}
+    ports:
+      - "5000:5000"
+    depends_on:
+      db:
+        condition: service_healthy
+    volumes:
+      - ./backend:/src
+      - /src/obj
+      - /src/bin
+    healthcheck:
+      test: ["CMD", "curl", "-f", "http://localhost:5000/api/healthcheck/ping"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+    develop:
+      watch:
+        - action: rebuild
+          path: ./backend
+
+  db:
+    image: postgres:15
+    ports:
+      - "5432:5432"
+    environment:
+      POSTGRES_USER: ${POSTGRES_USER:-postgres}
+      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
+      POSTGRES_DB: ${POSTGRES_DB:-cosmocargo}
+    volumes:
+      - postgres_data:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -U postgres"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+
+  pgadmin:
+    image: dpage/pgadmin4
+    ports:
+      - "5051:80"
+    environment:
+      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@cosmocargo.com}
+      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
+    depends_on:
+      - db
+    volumes:
+      - pgadmin_data:/var/lib/pgadmin
+
+volumes:
+  postgres_data:
+  pgadmin_data:
diff --git a/frontend/.eslintrc.json b/frontend/.eslintrc.json
new file mode 100644
index 0000000..6b10a5b
--- /dev/null
+++ b/frontend/.eslintrc.json
@@ -0,0 +1,6 @@
+{
+  "extends": [
+    "next/core-web-vitals",
+    "next/typescript"
+  ]
+}
diff --git a/frontend/.gitignore b/frontend/.gitignore
new file mode 100644
index 0000000..86b92f2
--- /dev/null
+++ b/frontend/.gitignore
@@ -0,0 +1,36 @@
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.js
+.yarn/install-state.gz
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+
+# local env files
+.env*.local
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts 
\ No newline at end of file
diff --git a/frontend/Dockerfile b/frontend/Dockerfile
new file mode 100644
index 0000000..fe5e75b
--- /dev/null
+++ b/frontend/Dockerfile
@@ -0,0 +1,26 @@
+# Build stage
+FROM node:22-alpine AS build
+
+# Define build arguments
+ARG NEXT_PUBLIC_API_URL
+ARG NODE_ENV=production
+
+# Set environment variables
+ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
+ENV NODE_ENV=$NODE_ENV
+
+WORKDIR /app
+COPY . .
+RUN npm ci --include=dev
+RUN npm run build
+
+# Runtime stage
+FROM node:22-alpine AS runtime
+WORKDIR /app
+COPY --from=build /app/.next ./.next
+COPY --from=build /app/public ./public
+COPY --from=build /app/package*.json ./
+COPY --from=build /app/node_modules ./node_modules
+
+EXPOSE 3000
+CMD ["npm", "start"]
diff --git a/frontend/app/about/page.tsx b/frontend/app/about/page.tsx
new file mode 100644
index 0000000..69924c9
--- /dev/null
+++ b/frontend/app/about/page.tsx
@@ -0,0 +1,108 @@
+"use client";
+
+import React from "react";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+
+const About = () => {
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <div className="container mx-auto px-4 py-16">
+        <div className="space-card p-8 mb-10">
+          <h1 className="text-4xl font-medium mb-6 space-gradient-text">
+            Om CosmoCargo™
+          </h1>
+
+          <div className="prose prose-invert max-w-none">
+            <p className="text-lg mb-4">
+              CosmoCargo™ grundades år 2257 med visionen att revolutionera
+              rymdlogistik och göra interplanetära leveranser så enkla som att
+              skicka ett paket på jorden.
+            </p>
+
+            <h2 className="text-2xl font-medium mt-8 mb-4">Vår Historia</h2>
+            <p className="mb-4">
+              Det som började som ett litet fraktföretag med endast tre skepp i
+              omloppsbana runt Mars har nu vuxit till galaxens mest betrodda
+              logistikpartner med över 1000 rymdskepp och 9000 servicepunkter
+              spridda över hela solsystemet och bortom.
+            </p>
+
+            <div className="relative rounded-lg overflow-hidden h-64 my-8">
+              <div className="absolute inset-0 bg-gradient-to-r from-space-accent-blue/30 to-space-accent-purple/30 mix-blend-overlay z-10"></div>
+              <div className="absolute inset-0 bg-space-dark/80"></div>
+              <div className="absolute inset-0 flex items-center justify-center z-20">
+                <p className="text-2xl font-medium text-center space-gradient-text">
+                  Levererar sedan 2257
+                </p>
+              </div>
+            </div>
+
+            <h2 className="text-2xl font-medium mt-8 mb-4">Vårt Uppdrag</h2>
+            <p className="mb-4">
+              Vårt uppdrag är att koppla samman galaxens avlägsna hörn genom
+              säkra, snabba och pålitliga leveranser. Vi tror på att
+              rymdlogistik ska vara tillgänglig för alla, från individuella
+              kolonister till stora interplanetära företag.
+            </p>
+
+            <h2 className="text-2xl font-medium mt-8 mb-4">Våra Värderingar</h2>
+            <ul className="list-disc pl-6 mb-6">
+              <li className="mb-2">
+                <strong>Säkerhet:</strong> Vi prioriterar säkerheten för din
+                last över allt annat, med avancerade skyddssystem och
+                fullständig spårning.
+              </li>
+              <li className="mb-2">
+                <strong>Innovation:</strong> Vi ligger alltid i framkant med den
+                senaste rymdteknologin för att optimera rutter och minimera
+                leveranstider.
+              </li>
+              <li className="mb-2">
+                <strong>Hållbarhet:</strong> Vi är engagerade i att minska vårt
+                kosmiska fotavtryck genom att använda förnybara energikällor och
+                återvunna material.
+              </li>
+              <li className="mb-2">
+                <strong>Kundfokus:</strong> Din tillfredsställelse är vårt
+                främsta mål, med 24/7 kundtjänst på alla större planeter och
+                stationer.
+              </li>
+            </ul>
+
+            <h2 className="text-2xl font-medium mt-8 mb-4">Ledningsgrupp</h2>
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
+              <div className="space-card p-4">
+                <h3 className="text-xl font-medium mb-2">Dr. Elara Vex</h3>
+                <p className="text-sm text-space-text-secondary mb-2">
+                  VD & Grundare
+                </p>
+                <p>
+                  Tidigare styrelseledamot i Marskolonins handelskammare, med 30
+                  års erfarenhet av interplanetär logistik.
+                </p>
+              </div>
+              <div className="space-card p-4">
+                <h3 className="text-xl font-medium mb-2">Zephyr Ando</h3>
+                <p className="text-sm text-space-text-secondary mb-2">
+                  Teknisk Direktör
+                </p>
+                <p>
+                  Pionjär inom kvantnavigering och hyperrymdsdriftsoptimering.
+                  Tidigare chefsingenjör på Saturn Orbital Labs.
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <Footer />
+    </SpaceBackground>
+  );
+};
+
+export default About;
diff --git a/frontend/app/contact/page.tsx b/frontend/app/contact/page.tsx
new file mode 100644
index 0000000..da7883c
--- /dev/null
+++ b/frontend/app/contact/page.tsx
@@ -0,0 +1,143 @@
+"use client";
+
+import React from "react";
+import { Mail, Send, MessageSquare } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+
+const Contact = () => {
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <div className="container mx-auto px-4 py-16">
+        <div className="max-w-4xl mx-auto">
+          <div className="space-card p-8 mb-10">
+            <h1 className="text-4xl font-medium mb-6 space-gradient-text">
+              Kontakta Oss
+            </h1>
+
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
+              <div>
+                <h2 className="text-2xl font-medium mb-4">Nå oss</h2>
+                <p className="text-space-text-secondary mb-6">
+                  Har du frågor om våra tjänster eller behöver support? Vårt
+                  team är redo att hjälpa dig, oavsett vilken del av galaxen du
+                  befinner dig i.
+                </p>
+
+                <div className="space-y-4 mb-8">
+                  <div className="flex items-start">
+                    <div className="bg-space-secondary p-3 rounded-full mr-4">
+                      <Mail className="h-6 w-6 text-space-accent-purple" />
+                    </div>
+                    <div>
+                      <h3 className="font-medium">E-post</h3>
+                      <p className="text-space-text-secondary">
+                        info@cosmocargo.space
+                      </p>
+                    </div>
+                  </div>
+
+                  <div className="flex items-start">
+                    <div className="bg-space-secondary p-3 rounded-full mr-4">
+                      <MessageSquare className="h-6 w-6 text-space-accent-blue" />
+                    </div>
+                    <div>
+                      <h3 className="font-medium">Live-chatt</h3>
+                      <p className="text-space-text-secondary">
+                        Tillgänglig 24/7 på alla större språk
+                      </p>
+                    </div>
+                  </div>
+                </div>
+
+                <div className="bg-space-secondary/30 p-4 rounded-lg border border-space-secondary/50 mb-6">
+                  <h3 className="font-medium mb-2">Huvudkontor</h3>
+                  <p className="text-space-text-secondary">
+                    Station Alpha, Orbit Plaza 42
+                    <br />
+                    Andromeda Systemet
+                    <br />
+                    Sektor Z9-X7
+                  </p>
+                </div>
+
+                <h3 className="font-medium mb-2">Öppettider - Kontoret</h3>
+                <p className="text-space-text-secondary mb-6">
+                  Standarddag: 0800 - 1800 GST
+                  <br />
+                  (Galaktisk Standardtid)
+                </p>
+              </div>
+
+              <div>
+                <h2 className="text-2xl font-medium mb-4">Skicka meddelande</h2>
+                <form className="space-y-4">
+                  <div>
+                    <label htmlFor="name" className="block mb-2 font-medium">
+                      Namn
+                    </label>
+                    <input
+                      type="text"
+                      id="name"
+                      className="space-input w-full"
+                      placeholder="Ditt namn"
+                    />
+                  </div>
+
+                  <div>
+                    <label htmlFor="email" className="block mb-2 font-medium">
+                      E-post
+                    </label>
+                    <input
+                      type="email"
+                      id="email"
+                      className="space-input w-full"
+                      placeholder="din.email@exempel.com"
+                    />
+                  </div>
+
+                  <div>
+                    <label htmlFor="subject" className="block mb-2 font-medium">
+                      Ämne
+                    </label>
+                    <input
+                      type="text"
+                      id="subject"
+                      className="space-input w-full"
+                      placeholder="Vad gäller ditt meddelande?"
+                    />
+                  </div>
+
+                  <div>
+                    <label htmlFor="message" className="block mb-2 font-medium">
+                      Meddelande
+                    </label>
+                    <textarea
+                      id="message"
+                      rows={5}
+                      className="space-input w-full"
+                      placeholder="Skriv ditt meddelande här..."
+                    ></textarea>
+                  </div>
+
+                  <Button className="space-button w-full">
+                    <Send className="mr-2 h-4 w-4" />
+                    Skicka meddelande
+                  </Button>
+                </form>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <Footer />
+    </SpaceBackground>
+  );
+};
+
+export default Contact;
diff --git a/frontend/app/dashboard/layout.tsx b/frontend/app/dashboard/layout.tsx
new file mode 100644
index 0000000..c65126d
--- /dev/null
+++ b/frontend/app/dashboard/layout.tsx
@@ -0,0 +1,57 @@
+"use client";
+
+import React, { useState } from "react";
+import DashboardSidebar from "@/components/DashboardSidebar";
+import DashboardHeader from "@/components/DashboardHeader";
+import Head from "next/head";
+
+export default function DashboardLayout({
+  children,
+}: {
+  children: React.ReactNode;
+}) {
+  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
+
+  const toggleMobileMenu = () => {
+    setIsMobileMenuOpen(!isMobileMenuOpen);
+  };
+
+  return (
+    <div className="flex h-screen bg-space-dark text-space-text-primary">
+      <Head>
+        <style jsx global>{`
+          html {
+            overflow: hidden;
+          }
+        `}</style>
+      </Head>
+      
+      {/* Desktop Sidebar */}
+      <div className="hidden md:block">
+        <DashboardSidebar />
+      </div>
+
+      {/* Mobile Sidebar (overlay) */}
+      {isMobileMenuOpen && (
+        <>
+          <div
+            className="fixed inset-0 bg-black/50 z-40 md:hidden"
+            onClick={toggleMobileMenu}
+          />
+          <div className="fixed inset-y-0 left-0 z-50 md:hidden">
+            <DashboardSidebar isMobile onClose={toggleMobileMenu} />
+          </div>
+        </>
+      )}
+
+      {/* Main Content */}
+      <div className="flex-1 flex flex-col overflow-hidden">
+        <DashboardHeader onMenuToggle={toggleMobileMenu} />
+
+        <main className="flex-1 overflow-y-auto bg-space-dark px-8 py-4">
+          {children}
+        </main>
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/app/dashboard/page.tsx b/frontend/app/dashboard/page.tsx
new file mode 100644
index 0000000..63a6090
--- /dev/null
+++ b/frontend/app/dashboard/page.tsx
@@ -0,0 +1,478 @@
+"use client";
+
+import React from "react";
+import {
+  Package,
+  AlertTriangle,
+  TrendingUp,
+  Ship,
+  CheckCircle,
+} from "lucide-react";
+import { Button } from "@/components/ui/button";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
+import { ChartContainer, ChartTooltip } from "@/components/ui/chart";
+import {
+  AreaChart,
+  Area,
+  XAxis,
+  YAxis,
+  CartesianGrid,
+  BarChart,
+  Bar,
+  Legend,
+  PieChart,
+  Pie,
+  Cell,
+  Tooltip,
+} from "recharts";
+
+// Sample data for charts
+const deliveryData = [
+  { name: "Jan", value: 125 },
+  { name: "Feb", value: 167 },
+  { name: "Mar", value: 184 },
+  { name: "Apr", value: 156 },
+  { name: "May", value: 198 },
+  { name: "Jun", value: 237 },
+  { name: "Jul", value: 263 },
+];
+
+const revenueData = [
+  { name: "Jan", normal: 42000, express: 28000, priority: 14000 },
+  { name: "Feb", normal: 48000, express: 32000, priority: 18000 },
+  { name: "Mar", normal: 53000, express: 37000, priority: 22000 },
+  { name: "Apr", normal: 51000, express: 42000, priority: 24000 },
+  { name: "May", normal: 49000, express: 40000, priority: 26000 },
+  { name: "Jun", normal: 57000, express: 44000, priority: 31000 },
+  { name: "Jul", normal: 62000, express: 48000, priority: 35000 },
+];
+
+const destinationData = [
+  { name: "Mars", value: 35 },
+  { name: "Luna", value: 28 },
+  { name: "Europa", value: 15 },
+  { name: "Titan", value: 12 },
+  { name: "Ganymede", value: 10 },
+];
+
+const COLORS = ["#9b87f5", "#7E69AB", "#6E59A5", "#D6BCFA", "#E5DEFF"];
+
+const chartConfig = {
+  shipments: {
+    label: "Shipments",
+    theme: {
+      light: "#9b87f5",
+      dark: "#9b87f5",
+    },
+  },
+  normal: {
+    label: "Standard",
+    theme: {
+      light: "#9b87f5",
+      dark: "#9b87f5",
+    },
+  },
+  express: {
+    label: "Express",
+    theme: {
+      light: "#7E69AB",
+      dark: "#7E69AB",
+    },
+  },
+  priority: {
+    label: "Priority",
+    theme: {
+      light: "#6E59A5",
+      dark: "#6E59A5",
+    },
+  },
+};
+
+// Recent shipments data
+const recentShipments = [
+  {
+    id: "CC-9385",
+    destination: "Mars Colony Alpha",
+    status: "In Transit",
+    priority: "High",
+    pilot: "Alex Chen",
+  },
+  {
+    id: "CC-8754",
+    destination: "Luna Base",
+    status: "Delivered",
+    priority: "Standard",
+    pilot: "Sarah Kim",
+  },
+  {
+    id: "CC-9127",
+    destination: "Europa Station",
+    status: "Preparing",
+    priority: "Express",
+    pilot: "Unassigned",
+  },
+  {
+    id: "CC-8901",
+    destination: "Titan Outpost",
+    status: "In Transit",
+    priority: "Standard",
+    pilot: "Marcus Wong",
+  },
+  {
+    id: "CC-9204",
+    destination: "Ganymede Research",
+    status: "Delayed",
+    priority: "High",
+    pilot: "Elena Petrova",
+  },
+];
+
+const DashboardOverview: React.FC = () => {
+  return (
+    <>
+    <div className="fixed z-1 top-0 left-0 w-full h-full flex items-center justify-center rotate-[-20deg] text-5xl pointer-events-none">WORK IN PROGRESS</div>
+
+    <div className="space-y-6">
+      <div className="flex items-center justify-between">
+        <h1 className="text-2xl font-orbitron text-space-text-primary">
+          Översikt
+        </h1>
+        <div className="text-sm text-space-text-secondary">
+          <span>
+            Uppdaterad: {new Date().toLocaleDateString("sv-SE")}{" "}
+            {new Date().toLocaleTimeString("sv-SE")}
+          </span>
+        </div>
+      </div>
+
+      {/* KPI Cards */}
+      <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4 opacity-40">
+        <Card className="space-card">
+          <CardHeader className="pb-2">
+            <CardTitle className="text-lg font-orbitron flex items-center space-x-2">
+              <Package className="h-5 w-5 text-space-accent-purple" />
+              <span>Aktiva Leveranser</span>
+            </CardTitle>
+          </CardHeader>
+          <CardContent>
+            <div className="text-3xl font-medium text-space-text-primary">
+              1,248
+            </div>
+            <p className="text-xs text-space-text-secondary mt-1">
+              <span className="text-space-accent-purple flex items-center">
+                <TrendingUp className="h-3 w-3 mr-1" /> +18% från förra månaden
+              </span>
+            </p>
+          </CardContent>
+        </Card>
+
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader className="pb-2">
+            <CardTitle className="text-lg font-orbitron flex items-center space-x-2">
+              <Ship className="h-5 w-5 text-space-accent-purple" />
+              <span>Piloter i tjänst</span>
+            </CardTitle>
+          </CardHeader>
+          <CardContent>
+            <div className="text-3xl font-medium text-space-text-primary">
+              87
+            </div>
+            <p className="text-xs text-space-text-secondary mt-1">
+              <span className="text-space-accent-purple flex items-center">
+                <TrendingUp className="h-3 w-3 mr-1" /> +5 sedan förra veckan
+              </span>
+            </p>
+          </CardContent>
+        </Card>
+
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader className="pb-2">
+            <CardTitle className="text-lg font-orbitron flex items-center space-x-2">
+              <AlertTriangle className="h-5 w-5 text-space-danger" />
+              <span>Högriskfrakter</span>
+            </CardTitle>
+          </CardHeader>
+          <CardContent>
+            <div className="text-3xl font-medium text-space-text-primary">
+              24
+            </div>
+            <p className="text-xs text-space-text-secondary mt-1">
+              <span className="text-space-text-secondary flex items-center">
+                1.9% av totala leveranser
+              </span>
+            </p>
+          </CardContent>
+        </Card>
+
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader className="pb-2">
+            <CardTitle className="text-lg font-orbitron flex items-center space-x-2">
+              <CheckCircle className="h-5 w-5 text-emerald-500" />
+              <span>Leveransprecision</span>
+            </CardTitle>
+          </CardHeader>
+          <CardContent>
+            <div className="text-3xl font-medium text-space-text-primary">
+              98.6%
+            </div>
+            <p className="text-xs text-space-text-secondary mt-1">
+              <span className="text-emerald-500 flex items-center">
+                <TrendingUp className="h-3 w-3 mr-1" /> +0.8% från förra
+                kvartalet
+              </span>
+            </p>
+          </CardContent>
+        </Card>
+      </div>
+
+      {/* Charts Row */}
+      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2 opacity-40">
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader>
+            <CardTitle className="font-orbitron">Leveranstrend</CardTitle>
+            <CardDescription>
+              Antal genomförda leveranser per månad
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="h-80">
+              <ChartContainer config={chartConfig}>
+                <AreaChart data={deliveryData}>
+                  <CartesianGrid
+                    strokeDasharray="3 3"
+                    stroke="rgba(255,255,255,0.1)"
+                  />
+                  <XAxis dataKey="name" stroke="#8E9196" />
+                  <YAxis stroke="#8E9196" />
+                  <ChartTooltip
+                    content={({
+                      active,
+                      payload,
+                    }) => {
+                      if (active && payload && payload.length) {
+                        return (
+                          <div className="bg-space-primary border border-space-secondary p-2 rounded">
+                            <p className="text-sm">{`${payload[0].payload.name}: ${payload[0].value} leveranser`}</p>
+                          </div>
+                        );
+                      }
+                      return null;
+                    }}
+                  />
+                  <Area
+                    type="monotone"
+                    dataKey="value"
+                    name="shipments"
+                    stroke="#9b87f5"
+                    fill="url(#colorGradient)"
+                    activeDot={{ r: 8 }}
+                  />
+                  <defs>
+                    <linearGradient
+                      id="colorGradient"
+                      x1="0"
+                      y1="0"
+                      x2="0"
+                      y2="1"
+                    >
+                      <stop offset="5%" stopColor="#9b87f5" stopOpacity={0.8} />
+                      <stop
+                        offset="95%"
+                        stopColor="#9b87f5"
+                        stopOpacity={0.1}
+                      />
+                    </linearGradient>
+                  </defs>
+                </AreaChart>
+              </ChartContainer>
+            </div>
+          </CardContent>
+        </Card>
+
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader>
+            <CardTitle className="font-orbitron">Intäktsöversikt</CardTitle>
+            <CardDescription>
+              Intäkter per servicenivå (i Kosmiska Krediter)
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="h-80">
+              <ChartContainer config={chartConfig}>
+                <BarChart data={revenueData}>
+                  <CartesianGrid
+                    strokeDasharray="3 3"
+                    stroke="rgba(255,255,255,0.1)"
+                  />
+                  <XAxis dataKey="name" stroke="#8E9196" />
+                  <YAxis stroke="#8E9196" />
+                  <ChartTooltip />
+                  <Legend />
+                  <Bar dataKey="normal" stackId="a" fill="#9b87f5" />
+                  <Bar dataKey="express" stackId="a" fill="#7E69AB" />
+                  <Bar dataKey="priority" stackId="a" fill="#6E59A5" />
+                </BarChart>
+              </ChartContainer>
+            </div>
+          </CardContent>
+        </Card>
+      </div>
+
+      {/* Bottom Row */}
+      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3 opacity-40">
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg lg:col-span-2">
+          <CardHeader>
+            <CardTitle className="font-orbitron">Senaste Leveranser</CardTitle>
+            <CardDescription>
+              De senaste 5 registrerade leveranserna
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <Table>
+              <TableHeader>
+                <TableRow className="border-space-secondary hover:bg-space-secondary/30">
+                  <TableHead className="text-space-text-secondary">
+                    ID
+                  </TableHead>
+                  <TableHead className="text-space-text-secondary">
+                    Destination
+                  </TableHead>
+                  <TableHead className="text-space-text-secondary">
+                    Status
+                  </TableHead>
+                  <TableHead className="text-space-text-secondary">
+                    Prioritet
+                  </TableHead>
+                  <TableHead className="text-space-text-secondary">
+                    Pilot
+                  </TableHead>
+                </TableRow>
+              </TableHeader>
+              <TableBody>
+                {recentShipments.map((shipment) => (
+                  <TableRow
+                    key={shipment.id}
+                    className="border-space-secondary hover:bg-space-secondary/30"
+                  >
+                    <TableCell className="font-medium text-space-text-primary">
+                      {shipment.id}
+                    </TableCell>
+                    <TableCell>{shipment.destination}</TableCell>
+                    <TableCell>
+                      <span
+                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
+                          shipment.status === "Delivered"
+                            ? "bg-emerald-100/10 text-emerald-500"
+                            : shipment.status === "In Transit"
+                            ? "bg-blue-100/10 text-blue-500"
+                            : shipment.status === "Delayed"
+                            ? "bg-red-100/10 text-red-500"
+                            : "bg-yellow-100/10 text-yellow-500"
+                        }`}
+                      >
+                        {shipment.status}
+                      </span>
+                    </TableCell>
+                    <TableCell>{shipment.priority}</TableCell>
+                    <TableCell>{shipment.pilot}</TableCell>
+                  </TableRow>
+                ))}
+              </TableBody>
+            </Table>
+          </CardContent>
+          <CardFooter className="flex justify-center border-t border-space-secondary pt-4">
+            <Button
+              variant="outline"
+              className="border-space-secondary hover:bg-space-secondary/30"
+            >
+              Visa alla leveranser
+            </Button>
+          </CardFooter>
+        </Card>
+
+        <Card className="bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden shadow-lg">
+          <CardHeader>
+            <CardTitle className="font-orbitron">Toppdestinationer</CardTitle>
+            <CardDescription>
+              Leveranser per destination denna månad
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <div className="h-64">
+              <ChartContainer config={chartConfig}>
+                <PieChart>
+                  <Pie
+                    data={destinationData}
+                    cx="50%"
+                    cy="50%"
+                    innerRadius={60}
+                    outerRadius={80}
+                    paddingAngle={5}
+                    dataKey="value"
+                  >
+                    {destinationData.map((entry, index) => (
+                      <Cell
+                        key={`cell-${index}`}
+                        fill={COLORS[index % COLORS.length]}
+                      />
+                    ))}
+                  </Pie>
+                  <Tooltip
+                    content={({
+                      active,
+                      payload,
+                    }) => {
+                      if (active && payload && payload.length) {
+                        return (
+                          <div className="bg-space-primary border border-space-secondary p-2 rounded">
+                            <p className="text-sm">{`${payload[0].name}: ${payload[0].value} leveranser`}</p>
+                          </div>
+                        );
+                      }
+                      return null;
+                    }}
+                  />
+                </PieChart>
+              </ChartContainer>
+            </div>
+            <div className="mt-4 space-y-2">
+              {destinationData.map((item, index) => (
+                <div
+                  key={item.name}
+                  className="flex items-center justify-between"
+                >
+                  <div className="flex items-center">
+                    <div
+                      className="w-3 h-3 rounded-full mr-2"
+                      style={{ backgroundColor: COLORS[index % COLORS.length] }}
+                    />
+                    <span className="text-sm">{item.name}</span>
+                  </div>
+                  <span className="text-sm font-medium">{item.value}</span>
+                </div>
+              ))}
+            </div>
+          </CardContent>
+        </Card>
+      </div>
+    </div>
+    </>
+  );
+};
+
+export default DashboardOverview;
diff --git a/frontend/app/dashboard/pilots/[id]/page.tsx b/frontend/app/dashboard/pilots/[id]/page.tsx
new file mode 100644
index 0000000..19deeae
--- /dev/null
+++ b/frontend/app/dashboard/pilots/[id]/page.tsx
@@ -0,0 +1,208 @@
+"use client";
+
+import React, { useState, useEffect } from "react";
+import { useRouter, useParams } from "next/navigation";
+import { toast } from "sonner";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import { ArrowLeft, Save, Loader2 } from "lucide-react";
+import { getPilotById, Pilot, updatePilot, updatePilotStatus } from "@/services/pilot-service";
+import { useAuth } from "@/contexts/AuthContext";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Label } from "@/components/ui/label";
+
+const EditPilotPage = () => {
+  const router = useRouter();
+  const params = useParams();
+  const { user } = useAuth();
+  const [isLoading, setIsLoading] = useState(true);
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [pilot, setPilot] = useState<Pilot | null>(null);
+  const [formData, setFormData] = useState({
+    name: "",
+    email: "",
+    experience: "",
+    isActive: true,
+  });
+
+  const pilotId = params.id as string;
+
+  useEffect(() => {
+    if (user && user.role !== "admin") {
+      router.push("/dashboard");
+      toast.error("Du har inte behörighet att se denna sida");
+    }
+  }, [user, router]);
+
+  useEffect(() => {
+    const fetchPilot = async () => {
+      try {
+        setIsLoading(true);
+        const data = await getPilotById(pilotId);
+        setPilot(data);
+        setFormData({
+          name: data.name,
+          email: data.email,
+          experience: data.experience || "",
+          isActive: data.isActive,
+        });
+      } catch (error) {
+        console.error("Error fetching pilot:", error);
+        toast.error("Kunde inte hämta pilotinformation");
+        router.push("/dashboard/pilots");
+      } finally {
+        setIsLoading(false);
+      }
+    };
+
+    if (pilotId) {
+      fetchPilot();
+    }
+  }, [pilotId, router]);
+
+  const handleChange = (
+    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLButtonElement>
+  ) => {
+    const { name, value } = e.target;
+    setFormData((prev) => ({ ...prev, [name]: value }));
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    
+    if (!formData.name || !formData.email) {
+      toast.error("Namn och e-post är obligatoriska fält");
+      return;
+    }
+    
+    try {
+      setIsSubmitting(true);
+      
+      if (pilot?.isActive !== formData.isActive) {
+        await updatePilotStatus(pilotId, formData.isActive);
+      }
+      
+      await updatePilot(pilotId, {
+        name: formData.name,
+        email: formData.email,
+        experience: formData.experience
+      });
+      
+      toast.success("Pilotinformationen har uppdaterats");
+      router.push("/dashboard/pilots");
+    } catch (error) {
+      console.error("Error updating pilot:", error);
+      toast.error("Ett fel uppstod när piloten skulle uppdateras");
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  if (isLoading) {
+    return (
+      <div className="flex justify-center items-center h-[calc(100vh-200px)]">
+        <Loader2 className="h-8 w-8 animate-spin text-space-accent-purple" />
+      </div>
+    );
+  }
+
+  return (
+    <div className="space-y-6 p-6">
+      <div className="flex items-center gap-2">
+        <Button 
+          variant="outline" 
+          size="sm" 
+          onClick={() => router.push("/dashboard/pilots")}
+        >
+          <ArrowLeft className="h-4 w-4 mr-2" />
+          Tillbaka
+        </Button>
+        <h1 className="text-3xl font-bold text-space-text-primary">
+          Redigera pilot
+        </h1>
+      </div>
+
+      <Card className="bg-space-primary border-space-secondary">
+        <CardHeader>
+          <CardTitle className="text-space-text-primary">Pilotinformation</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <form onSubmit={handleSubmit} className="space-y-4">
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <label className="text-sm font-medium">Namn *</label>
+                <Input
+                  name="name"
+                  value={formData.name}
+                  onChange={handleChange}
+                  placeholder="Ange pilotens namn"
+                  required
+                />
+              </div>
+              
+              <div className="space-y-2">
+                <label className="text-sm font-medium">E-post *</label>
+                <Input
+                  name="email"
+                  type="email"
+                  value={formData.email}
+                  onChange={handleChange}
+                  placeholder="Ange pilotens e-postadress"
+                  required
+                />
+              </div>
+            </div>
+            
+            <div className="space-y-2">
+              <label className="text-sm font-medium">Erfarenhet</label>
+              <Textarea
+                name="experience"
+                value={formData.experience}
+                onChange={handleChange}
+                placeholder="Beskriv pilotens erfarenhet och kvalifikationer"
+                rows={4}
+              />
+            </div>
+            
+            <div className="space-y-2">
+              <Checkbox id="isActive" name="isActive" />
+              <Label htmlFor="isActive">
+                Aktiv
+              </Label>
+            </div>
+            
+            <div className="flex justify-end gap-2 pt-4">
+              <Button
+                type="button"
+                variant="outline"
+                onClick={() => router.push("/dashboard/pilots")}
+              >
+                Avbryt
+              </Button>
+              <Button 
+                type="submit" 
+                disabled={isSubmitting}
+              >
+                {isSubmitting ? (
+                  <>
+                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                    Sparar...
+                  </>
+                ) : (
+                  <>
+                    <Save className="h-4 w-4 mr-2" />
+                    Spara
+                  </>
+                )}
+              </Button>
+            </div>
+          </form>
+        </CardContent>
+      </Card>
+    </div>
+  );
+};
+
+export default EditPilotPage;
diff --git a/frontend/app/dashboard/pilots/add/page.tsx b/frontend/app/dashboard/pilots/add/page.tsx
new file mode 100644
index 0000000..faa4bd9
--- /dev/null
+++ b/frontend/app/dashboard/pilots/add/page.tsx
@@ -0,0 +1,149 @@
+"use client";
+
+import React, { useState } from "react";
+import { useRouter } from "next/navigation";
+import { toast } from "sonner";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Textarea } from "@/components/ui/textarea";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import { ArrowLeft, Save, Loader2 } from "lucide-react";
+import { createPilot } from "@/services/pilot-service";
+import { useAuth } from "@/contexts/AuthContext";
+
+const AddPilotPage = () => {
+  const router = useRouter();
+  const { user } = useAuth();
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [formData, setFormData] = useState({
+    name: "",
+    email: "",
+    experience: "",
+  });
+
+  React.useEffect(() => {
+    if (user && user.role !== "admin") {
+      router.push("/dashboard");
+      toast.error("Du har inte behörighet att se denna sida");
+    }
+  }, [user, router]);
+
+  const handleChange = (
+    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
+  ) => {
+    const { name, value } = e.target;
+    setFormData((prev) => ({ ...prev, [name]: value }));
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    
+    if (!formData.name || !formData.email) {
+      toast.error("Namn och e-post är obligatoriska fält");
+      return;
+    }
+    
+    try {
+      setIsSubmitting(true);
+      await createPilot(formData);
+      toast.success("Piloten har skapats");
+      router.push("/dashboard/pilots");
+    } catch (error) {
+      console.error("Error creating pilot:", error);
+      toast.error("Ett fel uppstod när piloten skulle skapas");
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  return (
+    <div className="space-y-6 p-6">
+      <div className="flex items-center gap-2">
+        <Button 
+          variant="outline" 
+          size="sm" 
+          onClick={() => router.push("/dashboard/pilots")}
+        >
+          <ArrowLeft className="h-4 w-4 mr-2" />
+          Tillbaka
+        </Button>
+        <h1 className="text-3xl font-bold text-space-text-primary">
+          Lägg till ny pilot
+        </h1>
+      </div>
+
+      <Card className="bg-space-primary border-space-secondary">
+        <CardHeader>
+          <CardTitle className="text-space-text-primary">Pilotinformation</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <form onSubmit={handleSubmit} className="space-y-4">
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <label className="text-sm font-medium">Namn *</label>
+                <Input
+                  name="name"
+                  value={formData.name}
+                  onChange={handleChange}
+                  placeholder="Ange pilotens namn"
+                  required
+                />
+              </div>
+              
+              <div className="space-y-2">
+                <label className="text-sm font-medium">E-post *</label>
+                <Input
+                  name="email"
+                  type="email"
+                  value={formData.email}
+                  onChange={handleChange}
+                  placeholder="Ange pilotens e-postadress"
+                  required
+                />
+              </div>
+            </div>
+            
+            <div className="space-y-2">
+              <label className="text-sm font-medium">Erfarenhet</label>
+              <Textarea
+                name="experience"
+                value={formData.experience}
+                onChange={handleChange}
+                placeholder="Beskriv pilotens erfarenhet och kvalifikationer"
+                rows={4}
+              />
+            </div>
+            
+            <div className="flex justify-end gap-2 pt-4">
+              <Button
+                type="button"
+                variant="outline"
+                onClick={() => router.push("/dashboard/pilots")}
+              >
+                Avbryt
+              </Button>
+              <Button 
+                type="submit" 
+                disabled={isSubmitting}
+              >
+                {isSubmitting ? (
+                  <>
+                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                    Sparar...
+                  </>
+                ) : (
+                  <>
+                    <Save className="h-4 w-4 mr-2" />
+                    Spara
+                  </>
+                )}
+              </Button>
+            </div>
+          </form>
+        </CardContent>
+      </Card>
+    </div>
+  );
+};
+
+export default AddPilotPage; 
\ No newline at end of file
diff --git a/frontend/app/dashboard/pilots/page.tsx b/frontend/app/dashboard/pilots/page.tsx
new file mode 100644
index 0000000..01243a3
--- /dev/null
+++ b/frontend/app/dashboard/pilots/page.tsx
@@ -0,0 +1,281 @@
+"use client";
+
+import React, { useState } from "react";
+import { useAuth } from "@/contexts/AuthContext";
+import { useRouter } from "next/navigation";
+import { toast } from "sonner";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
+import { Badge } from "@/components/ui/badge";
+import { Button } from "@/components/ui/button";
+import {
+  AlertCircle,
+  Rocket,
+  UserPlus,
+  UserCheck,
+  UserX,
+  Edit,
+  Loader2,
+  Search,
+} from "lucide-react";
+import { useQuery } from '@tanstack/react-query';
+import { getPilots, Pilot, PilotsFilter, updatePilotStatus } from '@/services/pilot-service';
+import { Input } from "@/components/ui/input";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import Pagination from "@/components/ui/pagination";
+
+const PilotsManagement = () => {
+  const { user } = useAuth();
+  const router = useRouter();
+  const [filter, setFilter] = useState<PilotsFilter>({
+    page: 1,
+    pageSize: 10,
+    search: '',
+    isActive: undefined
+  });
+
+  const { data, isLoading, error, refetch } = useQuery({
+    queryKey: ['pilots', filter],
+    queryFn: () => getPilots(filter),
+  });
+
+  const handleAction = async (
+    pilot: Pilot,
+    action: "approve" | "suspend"
+  ) => {
+    await updatePilotStatus(pilot.id, action === "approve");
+    toast.success(
+      `Pilot ${pilot.name} har ${action === "approve" ? "aktiverats" : "inaktiverats"}`
+    );
+    refetch();
+  };
+
+  const handleAddPilot = () => {
+    router.push("/dashboard/pilots/add");
+  };
+
+  const handleEditPilot = (id: string) => {
+    router.push(`/dashboard/pilots/${id}`);
+  };
+
+  const handlePageChange = (newPage: number) => {
+    setFilter(prev => ({ ...prev, pageNumber: newPage }));
+  };
+
+  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    setFilter(prev => ({ ...prev, search: e.target.value, pageNumber: 1 }));
+  };
+
+  const handleStatusFilterChange = (value: string) => {
+    setFilter(prev => ({ ...prev, status: value, pageNumber: 1 }));
+  };
+
+  const handlePageSizeChange = (value: string) => {
+    setFilter(prev => ({ ...prev, pageSize: parseInt(value), pageNumber: 1 }));
+  };
+
+  if (user?.role !== "admin") {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-8">
+        <AlertCircle className="w-16 h-16 text-space-danger mb-4" />
+        <h2 className="text-2xl font-medium mb-2">Åtkomst nekad</h2>
+        <p className="text-space-text-secondary text-center">
+          Du har inte behörighet att hantera piloter. Denna sida är endast för
+          administratörer.
+        </p>
+      </div>
+    );
+  }
+
+  if (isLoading) {
+    return (
+      <div className="flex justify-center items-center h-full">
+        <Loader2 className="h-12 w-12 animate-spin text-space-accent-purple" />
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-8">
+        <AlertCircle className="w-16 h-16 text-space-danger mb-4" />
+        <h2 className="text-2xl font-medium mb-2">Ett fel uppstod</h2>
+        <p className="text-space-text-secondary text-center">
+          Kunde inte hämta pilotdata. Försök igen senare.
+        </p>
+        <Button 
+          onClick={() => refetch()} 
+          className="mt-4 space-button"
+        >
+          Försök igen
+        </Button>
+      </div>
+    );
+  }
+
+  return (
+    <div className="space-y-6 p-6">
+      <div className="flex justify-between items-center">
+        <h1 className="text-3xl font-bold text-space-text-primary">
+          Pilothantering
+        </h1>
+        <Button className="space-button" onClick={handleAddPilot}>
+          <UserPlus className="h-4 w-4 mr-2" />
+          Lägg till pilot
+        </Button>
+      </div>
+
+      <Card className="bg-space-primary border-space-secondary">
+        <CardHeader>
+          <CardTitle className="text-space-text-primary">Filter</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+            <div>
+              <label className="text-sm font-medium mb-1 block">
+                Status
+              </label>
+              <Select value={filter.isActive?.toString()} onValueChange={handleStatusFilterChange}>
+                <SelectTrigger>
+                  <SelectValue placeholder="Välj status" />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="undefined">Alla statusar</SelectItem>
+                  <SelectItem value="true">Aktiv</SelectItem>
+                  <SelectItem value="false">Inaktiv</SelectItem>
+                </SelectContent>
+              </Select>
+            </div>
+            <div>
+              <label className="text-sm font-medium mb-1 block">
+                Antal per sida
+              </label>
+              <Select value={filter.pageSize?.toString()} onValueChange={handlePageSizeChange}>
+                <SelectTrigger>
+                  <SelectValue placeholder="Välj antal" />
+                </SelectTrigger>
+                <SelectContent>
+                  <SelectItem value="5">5</SelectItem>
+                  <SelectItem value="10">10</SelectItem>
+                  <SelectItem value="20">20</SelectItem>
+                  <SelectItem value="50">50</SelectItem>
+                </SelectContent>
+              </Select>
+            </div>
+            <div>
+              <label className="text-sm font-medium mb-1 block">
+                Sök
+              </label>
+              <div className="relative">
+                <Search className="absolute left-2 top-2.5 h-4 w-4 text-space-text-secondary" />
+                <Input
+                  placeholder="Sök på namn eller email..."
+                  className="pl-8"
+                  value={filter.search}
+                  onChange={handleSearchChange}
+                />
+              </div>
+            </div>
+          </div>
+        </CardContent>
+      </Card>
+
+      <div className="rounded-md border border-space-secondary bg-space-primary">
+        <Table>
+          <TableHeader>
+            <TableRow>
+              <TableHead>#</TableHead>
+              <TableHead>Namn</TableHead>
+              <TableHead>Email</TableHead>
+              <TableHead>Status</TableHead>
+              <TableHead>Erfarenhet</TableHead>
+              <TableHead>Tilldelade Frakter</TableHead>
+              <TableHead>Åtgärder</TableHead>
+            </TableRow>
+          </TableHeader>
+          <TableBody>
+            {data?.items.map((pilot, index) => (
+              <TableRow key={pilot.id}>
+                <TableCell className="font-medium">{index + 1}</TableCell>
+                <TableCell className="flex items-center gap-2">
+                  <Rocket className="h-4 w-4 text-space-accent-purple" />
+                  {pilot.name}
+                </TableCell>
+                <TableCell>{pilot.email}</TableCell>
+                <TableCell>
+                  <Badge
+                    className={
+                      pilot.isActive ? "bg-green-500" : "bg-gray-500"
+                    }
+                  >
+                    {pilot.isActive ? "Aktiv" : "Inaktiv"}
+                  </Badge>
+                </TableCell>
+                <TableCell>{pilot.experience}</TableCell>
+                <TableCell>{pilot.assignedShipments}</TableCell>
+                <TableCell>
+                  <div className="flex gap-2">
+                    {!pilot.isActive ? (
+                      <Button
+                        variant="outline"
+                        size="sm"
+                        className="text-green-500 hover:text-green-700"
+                        onClick={() => handleAction(pilot, "approve")}
+                      >
+                        <UserCheck className="h-4 w-4 mr-1" />
+                        Aktivera
+                      </Button>
+                    ) : (
+                      <Button
+                        variant="outline"
+                        size="sm"
+                        className="text-red-500 hover:text-red-700"
+                        onClick={() => handleAction(pilot, "suspend")}
+                      >
+                        <UserX className="h-4 w-4 mr-1" />
+                        Inaktivera
+                      </Button>
+                    )}
+                    <Button
+                      variant="outline"
+                      size="sm"
+                      onClick={() => handleEditPilot(pilot.id)}
+                    >
+                      <Edit className="h-4 w-4 mr-1" />
+                      Redigera
+                    </Button>
+                  </div>
+                </TableCell>
+              </TableRow>
+            ))}
+          </TableBody>
+        </Table>
+      </div>
+
+      {data && data.totalPages > 0 && (
+        <Pagination
+          totalCount={data.totalCount}
+          page={data.page}
+          pageSize={data.pageSize}
+          totalPages={data.totalPages}
+          onPageChange={handlePageChange}
+        />
+      )}
+    </div>
+  );
+};
+
+export default PilotsManagement;
diff --git a/frontend/app/dashboard/shipments/add/page.tsx b/frontend/app/dashboard/shipments/add/page.tsx
new file mode 100644
index 0000000..5fec0c7
--- /dev/null
+++ b/frontend/app/dashboard/shipments/add/page.tsx
@@ -0,0 +1,523 @@
+"use client";
+
+import React, { useState } from "react";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Label } from "@/components/ui/label";
+import { Checkbox } from "@/components/ui/checkbox";
+import {
+  Card,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+  CardContent,
+} from "@/components/ui/card";
+import { useToast } from "@/hooks/use-toast";
+import { Package, ArrowRight } from "lucide-react";
+import { useAuth } from "@/contexts/AuthContext";
+import { createShipment } from "@/services/shipment-service";
+import { useRouter } from "next/navigation";
+import { CustomsForm } from "@/model/shipment";
+
+const BookShipment = () => {
+  const { toast } = useToast();
+  const { user } = useAuth();
+  const router = useRouter();
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [customsErrors, setCustomsErrors] = useState<{ [key: string]: string }>(
+    {}
+  );
+  const [containsLifeforms, setContainsLifeforms] = useState(false);
+  const [lifeformType, setLifeformType] = useState("");
+  const [isPlasmaActive, setIsPlasmaActive] = useState(false);
+  const [plasmaStabilityLevel, setPlasmaStabilityLevel] = useState<
+    number | undefined
+  >(undefined);
+  const [quarantineRequired, setQuarantineRequired] = useState(false);
+  const [originPlanetLawsConfirmed, setOriginPlanetLawsConfirmed] =
+    useState(false);
+  const [customsNotes, setCustomsNotes] = useState("");
+
+  const validateCustoms = (c: CustomsForm) => {
+    const errors: { [key: string]: string } = {};
+    if (c.containsLifeforms && !c.lifeformType) {
+      errors.lifeformType = "Artbeskrivning krävs om levande varelser finns.";
+    }
+    if (
+      c.isPlasmaActive &&
+      (c.plasmaStabilityLevel === undefined ||
+        c.plasmaStabilityLevel === null ||
+        isNaN(Number(c.plasmaStabilityLevel)))
+    ) {
+      errors.plasmaStabilityLevel =
+        "Stabilitetsskala krävs om plasmaaktivt material finns.";
+    }
+    if (
+      c.isPlasmaActive &&
+      typeof c.plasmaStabilityLevel === "number" &&
+      (c.plasmaStabilityLevel < 1 || c.plasmaStabilityLevel > 10)
+    ) {
+      errors.plasmaStabilityLevel =
+        "Stabilitetsskala måste vara mellan 1 och 10.";
+    }
+    if (
+      c.isPlasmaActive &&
+      typeof c.plasmaStabilityLevel === "number" &&
+      c.plasmaStabilityLevel < 4 &&
+      c.quarantineRequired !== true
+    ) {
+      errors.quarantineRequired = "Karantän krävs om stabilitet < 4.";
+    }
+    if (!c.originPlanetLawsConfirmed) {
+      errors.originPlanetLawsConfirmed = "Du måste intyga laglig export.";
+    }
+    return errors;
+  };
+
+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
+    e.preventDefault();
+    setIsSubmitting(true);
+    const customs: CustomsForm = {
+      containsLifeforms,
+      lifeformType: containsLifeforms ? lifeformType : undefined,
+      isPlasmaActive,
+      plasmaStabilityLevel: isPlasmaActive ? plasmaStabilityLevel : undefined,
+      originPlanetLawsConfirmed,
+      customsNotes: customsNotes || undefined,
+      quarantineRequired:
+        isPlasmaActive &&
+        typeof plasmaStabilityLevel === "number" &&
+        plasmaStabilityLevel < 4
+          ? quarantineRequired
+          : undefined,
+    };
+    const customsValidation = validateCustoms(customs);
+    setCustomsErrors(customsValidation);
+    if (Object.keys(customsValidation).length > 0) {
+      setIsSubmitting(false);
+      return;
+    }
+    try {
+      const formData = new FormData(e.currentTarget);
+      const shipmentData = {
+        origin: {
+          name: user?.name || "",
+          email: user?.email || "",
+          planet: formData.get("sender-planet") as string,
+          station: formData.get("sender-station") as string,
+        },
+        destination: {
+          name: formData.get("receiver-name") as string,
+          email: formData.get("receiver-email") as string,
+          planet: formData.get("receiver-planet") as string,
+          station: formData.get("receiver-station") as string,
+        },
+        weight: parseFloat(formData.get("package-weight") as string),
+        category: formData.get("package-type") as string,
+        priority: formData.get("package-priority") as string,
+        description: formData.get("package-description") as string,
+        hasInsurance: formData.get("insurance") === "on",
+        customs: customs,
+      };
+      await createShipment(shipmentData);
+      toast({
+        title: "Frakt bokad",
+        description: "Din frakt har bokats och väntar på godkännande.",
+        variant: "default",
+      });
+      router.push("/dashboard/shipments/ongoing");
+    } catch {
+      toast({
+        title: "Ett fel uppstod",
+        description: "Kunde inte boka frakten. Försök igen senare.",
+        variant: "destructive",
+      });
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  // Risk classification function
+  const getRiskLevel = () => {
+    // Plasmaaktiv + stabilitet < 5 + livsform
+    if (
+      isPlasmaActive &&
+      typeof plasmaStabilityLevel === "number" &&
+      plasmaStabilityLevel < 5 &&
+      containsLifeforms
+    ) {
+      return { label: "Kritisk", color: "text-red-600", emoji: "🔴" };
+    }
+    // Livsform + okänd art
+    if (
+      containsLifeforms &&
+      (!lifeformType ||
+        lifeformType.trim().toLowerCase() === "okänd" ||
+        lifeformType.trim().toLowerCase() === "unknown")
+    ) {
+      return { label: "Hög", color: "text-orange-500", emoji: "🔶" };
+    }
+    // Plasmaaktiv med stabilitet 5–7
+    if (
+      isPlasmaActive &&
+      typeof plasmaStabilityLevel === "number" &&
+      plasmaStabilityLevel >= 5 &&
+      plasmaStabilityLevel <= 7
+    ) {
+      return { label: "Medel", color: "text-yellow-500", emoji: "🟡" };
+    }
+    // Inga specialegenskaper
+    return { label: "Låg", color: "text-green-600", emoji: "🟢" };
+  };
+
+  return (
+    <div className="max-w-4xl mx-auto">
+      <div className="mb-6">
+        <h1 className="text-2xl font-medium mb-2">Boka Frakt</h1>
+        <p className="text-space-text-secondary">
+          Fyll i information om din intergalaktiska frakt
+        </p>
+      </div>
+
+      <Card className="space-card">
+        <CardHeader>
+          <CardTitle className="text-xl">
+            <Package className="h-5 w-5 inline-block mr-2" />
+            Fraktinformation
+          </CardTitle>
+          <CardDescription>
+            Alla fält markerade med * är obligatoriska
+          </CardDescription>
+        </CardHeader>
+        <CardContent>
+          <form onSubmit={handleSubmit} className="space-y-6">
+            <div className="grid md:grid-cols-2 gap-6">
+              <div className="space-y-4">
+                <h3 className="text-lg font-medium">Avsändare</h3>
+
+                <div className="space-y-2">
+                  <Label htmlFor="sender-name">Namn *</Label>
+                  <Input
+                    id="sender-name"
+                    placeholder="Ditt namn"
+                    className="space-input"
+                    required
+                    value={user?.name || ""}
+                    disabled
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="sender-email">E-post *</Label>
+                  <Input
+                    id="sender-email"
+                    type="email"
+                    placeholder="din@email.com"
+                    className="space-input"
+                    required
+                    value={user?.email || ""}
+                    disabled
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="sender-planet">Planet *</Label>
+                  <Input
+                    id="sender-planet"
+                    name="sender-planet"
+                    placeholder="Jorden"
+                    className="space-input"
+                    required
+                    minLength={2}
+                    maxLength={50}
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="sender-station">Rymdstation *</Label>
+                  <Input
+                    id="sender-station"
+                    name="sender-station"
+                    placeholder="t.ex. Alpha Station"
+                    className="space-input"
+                    required
+                    minLength={2}
+                    maxLength={50}
+                  />
+                </div>
+              </div>
+
+              <div className="space-y-4">
+                <h3 className="text-lg font-medium">Mottagare</h3>
+
+                <div className="space-y-2">
+                  <Label htmlFor="receiver-name">Namn *</Label>
+                  <Input
+                    id="receiver-name"
+                    name="receiver-name"
+                    placeholder="Mottagarens namn"
+                    className="space-input"
+                    required
+                    minLength={2}
+                    maxLength={50}
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="receiver-email">E-post *</Label>
+                  <Input
+                    id="receiver-email"
+                    name="receiver-email"
+                    type="email"
+                    placeholder="mottagare@email.com"
+                    className="space-input"
+                    required
+                    pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="receiver-planet">Planet *</Label>
+                  <Input
+                    id="receiver-planet"
+                    name="receiver-planet"
+                    placeholder="t.ex. Mars"
+                    className="space-input"
+                    required
+                    minLength={2}
+                    maxLength={50}
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="receiver-station">Rymdstation *</Label>
+                  <Input
+                    id="receiver-station"
+                    name="receiver-station"
+                    placeholder="t.ex. Olympus Station"
+                    className="space-input"
+                    required
+                    minLength={2}
+                    maxLength={50}
+                  />
+                </div>
+              </div>
+            </div>
+
+            <div className="border-t border-space-secondary/30 pt-6">
+              <h3 className="text-lg font-medium mb-4">Paketinformation</h3>
+
+              <div className="grid md:grid-cols-2 gap-6">
+                <div className="space-y-2">
+                  <Label htmlFor="package-weight">Vikt (kg) *</Label>
+                  <Input
+                    id="package-weight"
+                    name="package-weight"
+                    type="number"
+                    min="0.1"
+                    step="0.1"
+                    placeholder="t.ex. 5.2"
+                    className="space-input"
+                    required
+                  />
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="package-type">Kategori *</Label>
+                  <select
+                    id="package-type"
+                    name="package-type"
+                    className="space-input w-full"
+                    required
+                  >
+                    <option value="">Välj kategori</option>
+                    <option value="standard">Standardfrakt</option>
+                    <option value="fragile">Ömtåligt</option>
+                    <option value="hazardous">Farligt gods</option>
+                    <option value="liquid">Vätska</option>
+                    <option value="living">Levande organism</option>
+                  </select>
+                </div>
+
+                <div className="space-y-2">
+                  <Label htmlFor="package-priority">Prioritet *</Label>
+                  <select
+                    id="package-priority"
+                    name="package-priority"
+                    className="space-input w-full"
+                    required
+                  >
+                    <option value="">Välj prioritet</option>
+                    <option value="standard">Standard (5-7 dagar)</option>
+                    <option value="express">Express (2-3 dagar)</option>
+                    <option value="priority">Prioritet (24 timmar)</option>
+                  </select>
+                </div>
+              </div>
+
+              <div className="mt-4 space-y-2">
+                <Label htmlFor="package-description">Beskrivning</Label>
+                <textarea
+                  id="package-description"
+                  name="package-description"
+                  rows={3}
+                  placeholder="Beskriv innehållet i paketet..."
+                  className="space-input w-full"
+                  maxLength={500}
+                />
+              </div>
+
+              <div className="mt-4 space-y-4">
+                <div className="flex items-center space-x-2">
+                  <Checkbox id="insurance" name="insurance" />
+                  <Label htmlFor="insurance">
+                    Lägg till fraktförsäkring (+15%)
+                  </Label>
+                </div>
+
+                <div className="flex items-center space-x-2">
+                  <Checkbox id="regulations" name="regulations" required />
+                  <Label htmlFor="regulations">
+                    Jag bekräftar att innehållet följer intergalaktiska
+                    fraktregler *
+                  </Label>
+                </div>
+              </div>
+            </div>
+
+            <div className="border-t border-space-secondary/30 pt-6">
+              <h3 className="text-lg font-medium mb-4">Tullformulär</h3>
+              <div className="mb-4">
+                <span className={`font-semibold ${getRiskLevel().color}`}>
+                  {getRiskLevel().emoji} Risknivå: {getRiskLevel().label}
+                </span>
+              </div>
+              <div className="space-y-4">
+                <div className="flex items-center space-x-2">
+                  <Checkbox
+                    id="customs-containsLifeforms"
+                    checked={containsLifeforms}
+                    onCheckedChange={setContainsLifeforms}
+                  />
+                  <Label htmlFor="customs-containsLifeforms">
+                    Innehåller levande varelser
+                  </Label>
+                </div>
+                {containsLifeforms && (
+                  <div className="space-y-2 ml-6">
+                    <Label htmlFor="customs-lifeformType">
+                      Art, intelligens, riskklass *
+                    </Label>
+                    <Input
+                      id="customs-lifeformType"
+                      value={lifeformType}
+                      onChange={(e) => setLifeformType(e.target.value)}
+                      required
+                    />
+                    {customsErrors.lifeformType && (
+                      <span className="text-destructive text-sm">
+                        {customsErrors.lifeformType}
+                      </span>
+                    )}
+                  </div>
+                )}
+                <div className="flex items-center space-x-2">
+                  <Checkbox
+                    id="customs-isPlasmaActive"
+                    checked={isPlasmaActive}
+                    onCheckedChange={setIsPlasmaActive}
+                  />
+                  <Label htmlFor="customs-isPlasmaActive">
+                    Innehåller plasma-aktiva material
+                  </Label>
+                </div>
+                {isPlasmaActive && (
+                  <div className="space-y-2 ml-6">
+                    <Label htmlFor="customs-plasmaStabilityLevel">
+                      Stabilitetsskala (1–10) *
+                    </Label>
+                    <Input
+                      id="customs-plasmaStabilityLevel"
+                      type="number"
+                      min={1}
+                      max={10}
+                      value={plasmaStabilityLevel ?? ""}
+                      onChange={(e) =>
+                        setPlasmaStabilityLevel(
+                          e.target.value ? Number(e.target.value) : undefined
+                        )
+                      }
+                      required
+                    />
+                    {customsErrors.plasmaStabilityLevel && (
+                      <span className="text-destructive text-sm">
+                        {customsErrors.plasmaStabilityLevel}
+                      </span>
+                    )}
+                    {typeof plasmaStabilityLevel === "number" &&
+                      plasmaStabilityLevel < 4 && (
+                        <div className="flex items-center space-x-2 mt-2">
+                          <Checkbox
+                            id="customs-quarantineRequired"
+                            checked={quarantineRequired}
+                            onCheckedChange={setQuarantineRequired}
+                          />
+                          <Label htmlFor="customs-quarantineRequired">
+                            Karantän krävs (stabilitet &lt; 4)
+                          </Label>
+                          {customsErrors.quarantineRequired && (
+                            <span className="text-destructive text-sm ml-2">
+                              {customsErrors.quarantineRequired}
+                            </span>
+                          )}
+                        </div>
+                      )}
+                  </div>
+                )}
+                <div className="flex items-center space-x-2">
+                  <Checkbox
+                    id="customs-originPlanetLawsConfirmed"
+                    checked={originPlanetLawsConfirmed}
+                    onCheckedChange={setOriginPlanetLawsConfirmed}
+                    required
+                  />
+                  <Label htmlFor="customs-originPlanetLawsConfirmed">
+                    Jag intygar laglig export *
+                  </Label>
+                  {customsErrors.originPlanetLawsConfirmed && (
+                    <span className="text-destructive text-sm ml-2">
+                      {customsErrors.originPlanetLawsConfirmed}
+                    </span>
+                  )}
+                </div>
+                <div className="space-y-2">
+                  <Label htmlFor="customs-customsNotes">
+                    Frivillig kommentar
+                  </Label>
+                  <Input
+                    id="customs-customsNotes"
+                    value={customsNotes}
+                    onChange={(e) => setCustomsNotes(e.target.value)}
+                  />
+                </div>
+              </div>
+            </div>
+
+            <div className="border-t border-space-secondary/30 pt-6 flex justify-end">
+              <Button
+                type="submit"
+                className="space-button"
+                disabled={isSubmitting}
+              >
+                {isSubmitting ? "Skickar..." : "Bekräfta frakt"}
+                <ArrowRight className="ml-2 h-4 w-4" />
+              </Button>
+            </div>
+          </form>
+        </CardContent>
+      </Card>
+    </div>
+  );
+};
+
+export default BookShipment;
diff --git a/frontend/app/dashboard/shipments/assigned/page.tsx b/frontend/app/dashboard/shipments/assigned/page.tsx
new file mode 100644
index 0000000..3813989
--- /dev/null
+++ b/frontend/app/dashboard/shipments/assigned/page.tsx
@@ -0,0 +1,157 @@
+"use client";
+
+import React, { useState } from "react";
+import { useAuth } from "@/contexts/AuthContext";
+import { toast } from "sonner";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
+import { Button } from "@/components/ui/button";
+import { CheckCircle, AlertCircle, Loader } from "lucide-react";
+import { useQuery } from "@tanstack/react-query";
+import { ShipmentStatus } from "@/model/types";
+import { getShipments, ShipmentsFilter, updateShipmentStatus } from "@/services/shipment-service";
+import { getStatusDisplayText, getStatusColorClass } from "@/utils/shipment-status";
+import Pagination from "@/components/ui/pagination";
+
+const AssignedShipments = () => {
+  const { user } = useAuth();
+  const [page, setPage] = useState(1);
+  
+  const { data: shipments, refetch, isLoading } = useQuery({
+    queryKey: ["shipments", page],
+    queryFn: () => {
+      const filter: ShipmentsFilter = {
+        page,
+        pageSize: 10
+      };
+      return getShipments(filter);
+    },
+  });
+
+  if (user?.role !== "pilot") {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-8">
+        <AlertCircle className="w-16 h-16 text-space-danger mb-4" />
+        <h2 className="text-2xl font-medium mb-2">Åtkomst nekad</h2>
+        <p className="text-space-text-secondary text-center">
+          Du har inte behörighet att se tilldelade frakter. Denna sida är endast
+          för piloter.
+        </p>
+      </div>
+    );
+  }
+
+  const handleUpdateStatus = async (shipmentId: string, newStatus: ShipmentStatus) => {
+    await updateShipmentStatus(shipmentId, { status: newStatus });
+    toast.success(
+      `Status uppdaterad för frakt ${shipmentId} till ${getStatusDisplayText(newStatus)}`
+    );
+    refetch();
+  };
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <div>
+          <h1 className="text-2xl font-medium tracking-tight">
+            Tilldelade Frakter
+          </h1>
+          <p className="text-space-text-secondary">
+            Hantera dina tilldelade frakter och uppdatera deras status
+          </p>
+        </div>
+      </div>
+
+      {shipments && shipments.items.length > 0 ? (
+        <div className="rounded-md border border-space-secondary bg-space-primary">
+          <Table>
+            <TableHeader>
+              <TableRow>
+                <TableHead>#</TableHead>
+                <TableHead>Kund</TableHead>
+                <TableHead>Ursprung</TableHead>
+                <TableHead>Destination</TableHead>
+                <TableHead>Last</TableHead>
+                <TableHead>Status</TableHead>
+                <TableHead>Åtgärder</TableHead>
+              </TableRow>
+            </TableHeader>
+            <TableBody>
+              {shipments.items.map((shipment, ix) => (
+                <TableRow key={shipment.id}>
+                  <TableCell>{ix + 1}</TableCell>
+                  <TableCell>{shipment.sender.name}</TableCell>
+                  <TableCell>{shipment.sender.station + " @ " + shipment.sender.planet}</TableCell>
+                  <TableCell>{shipment.receiver.station + " @ " + shipment.receiver.planet}</TableCell>
+                  <TableCell>{shipment.category}</TableCell>
+                  <TableCell>
+                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColorClass(shipment.status)}`}>
+                      {getStatusDisplayText(shipment.status)}
+                    </span>
+                  </TableCell>
+                  <TableCell>
+                    <div className="flex gap-2">
+                      {shipment.status === "Assigned" && (
+                        <Button
+                          variant="outline"
+                          size="sm"
+                          onClick={() =>
+                            handleUpdateStatus(shipment.id, ShipmentStatus.InTransit)
+                          }
+                        >
+                          Påbörja Transport
+                        </Button>
+                      )}
+                      {shipment.status === "InTransit" && (
+                        <Button
+                          variant="outline"
+                          size="sm"
+                          onClick={() =>
+                            handleUpdateStatus(shipment.id, ShipmentStatus.Delivered)
+                          }
+                        >
+                          Markera Levererad
+                        </Button>
+                      )}
+                    </div>
+                  </TableCell>
+                </TableRow>
+              ))}
+            </TableBody>
+          </Table>
+        </div>
+      ) : isLoading ? (
+        <div className="flex flex-col items-center justify-center h-64 p-8">
+          <Loader className="w-12 h-12 text-space-text-secondary mb-4 animate-spin" />
+        </div>
+      ) : (
+        <div className="flex flex-col items-center justify-center h-64 border border-dashed border-space-secondary rounded-md p-8">
+          <CheckCircle className="w-12 h-12 text-space-text-secondary mb-4" />
+          <h3 className="text-xl font-medium mb-1">Inga tilldelade frakter</h3>
+          <p className="text-space-text-secondary text-center">
+            Du har inga tilldelade frakter för tillfället. När en administratör
+            tilldelar dig frakter kommer de att visas här.
+          </p>
+        </div>
+      )}
+
+      {shipments && shipments.totalPages > 1 && (
+        <Pagination
+          totalCount={shipments.totalCount}
+          page={page}
+          pageSize={shipments.pageSize}
+          totalPages={shipments.totalPages}
+          onPageChange={setPage}
+        />
+      )}
+    </div>
+  );
+};
+
+export default AssignedShipments;
diff --git a/frontend/app/dashboard/shipments/ongoing/page.tsx b/frontend/app/dashboard/shipments/ongoing/page.tsx
new file mode 100644
index 0000000..3bbe74c
--- /dev/null
+++ b/frontend/app/dashboard/shipments/ongoing/page.tsx
@@ -0,0 +1,181 @@
+"use client";
+
+import React, { useState } from "react";
+import {
+  Card,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+  CardContent,
+} from "@/components/ui/card";
+import { Search, Eye } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { useQuery } from "@tanstack/react-query";
+import { getShipments, ShipmentsFilter } from "@/services/shipment-service";
+import { ShipmentStatus } from "@/model/types";
+import { getStatusDisplayText, getStatusColorClass } from "@/utils/shipment-status";
+import Pagination from "@/components/ui/pagination";
+
+const OngoingShipments = () => {
+  const [search, setSearch] = useState("");
+  const [status, setStatus] = useState<ShipmentStatus | "">("");
+  const [page, setPage] = useState(1);
+  const [pageSize, setPageSize] = useState(10);
+
+  const { data: shipments, refetch } = useQuery({
+    queryKey: ["shipments", search, status, page, pageSize],
+    queryFn: () => {
+      const filter: ShipmentsFilter = {
+        page,
+        pageSize
+      };
+      if (search) filter.search = search;
+      if (status) filter.status = status as ShipmentStatus;
+      return getShipments(filter);
+    },
+  });
+
+  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    setSearch(e.target.value);
+    setPage(1); // Reset to first page when searching
+  };
+
+  const handleStatusChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
+    setStatus(e.target.value as ShipmentStatus | "");
+    setPage(1); // Reset to first page when changing status
+  };
+
+  const handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
+    setPageSize(Number(e.target.value));
+    setPage(1); // Reset to first page when changing page size
+  };
+
+  const getProgressPercentage = (status: ShipmentStatus): number => {
+    switch (status) {
+      case ShipmentStatus.InTransit:
+        return 60;
+      case ShipmentStatus.Delivered:
+        return 100;
+      case ShipmentStatus.Assigned:
+        return 20;
+      default:
+        return 0;
+    }
+  };
+
+  return (
+    <div className="max-w-6xl mx-auto">
+      <div className="mb-6">
+        <h1 className="text-2xl font-medium mb-2">Leveranser</h1>
+        <p className="text-space-text-secondary">
+          Följ dina leveranser i realtid
+        </p>
+      </div>
+
+      <div className="flex flex-col md:flex-row justify-between gap-4 mb-6">
+        <div className="relative w-full md:w-auto md:flex-1 max-w-sm">
+          <Search className="absolute left-3 top-2.5 h-5 w-5 text-space-text-secondary" />
+          <Input
+            placeholder="Sök fraktID eller destination..."
+            className="pl-10 space-input w-full"
+            value={search}
+            onChange={handleSearch}
+          />
+        </div>
+
+        <div className="flex gap-2">
+          <select 
+            className="space-input"
+            value={status}
+            onChange={handleStatusChange}
+          >
+            <option value="">Alla statusar</option>
+            <option value={ShipmentStatus.WaitingForApproval}>Väntar på godkännande</option>
+            <option value={ShipmentStatus.Approved}>Godkänd</option>
+            <option value={ShipmentStatus.Denied}>Nekad</option>
+            <option value={ShipmentStatus.Assigned}>Tilldelad</option>
+            <option value={ShipmentStatus.InTransit}>Under transport</option>
+            <option value={ShipmentStatus.Delivered}>Levererad</option>
+            <option value={ShipmentStatus.Cancelled}>Avbruten</option>
+          </select>
+
+          <select
+            className="space-input"
+            value={pageSize}
+            onChange={handlePageSizeChange}
+          >
+            <option value={5}>5 per sida</option>
+            <option value={10}>10 per sida</option>
+            <option value={20}>20 per sida</option>
+            <option value={50}>50 per sida</option>
+          </select>
+
+          <Button className="space-button" onClick={() => refetch()}>
+            Uppdatera
+          </Button>
+        </div>
+      </div>
+
+      <div className="space-y-4">
+        {shipments?.items.map((shipment) => (
+          <Card key={shipment.id} className="space-card overflow-hidden">
+            <CardHeader className="pb-2">
+              <div className="flex justify-between items-start">
+                <div>
+                  <CardTitle className="text-lg font-medium">
+                    Frakt #{shipment.id}
+                  </CardTitle>
+                  <CardDescription>
+                    {shipment.sender.station + ' @ ' + shipment.sender.planet} → {shipment.receiver.station + ' @ ' + shipment.receiver.planet}
+                  </CardDescription>
+                </div>
+                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColorClass(shipment.status)}`}>
+                  {getStatusDisplayText(shipment.status)}
+                </span>
+              </div>
+            </CardHeader>
+            <CardContent>
+              <div className="mb-6">
+                <div className="flex justify-between mb-2 text-sm">
+                  <div>{shipment.sender.planet}</div>
+                  <div>{shipment.receiver.planet}</div>
+                </div>
+                <div className="relative pt-1">
+                  <div className="overflow-hidden h-2 text-xs flex rounded bg-space-secondary/50">
+                    <div
+                      style={{ width: `${getProgressPercentage(shipment.status)}%` }}
+                      className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-gradient-to-r from-space-accent-blue to-space-accent-purple"
+                    ></div>
+                  </div>
+                </div>
+              </div>
+
+              <div className="flex justify-between items-center">
+                <div className="text-space-text-secondary text-sm">
+                  Last: {shipment.category}
+                </div>
+                <Button size="sm" variant="outline">
+                  <Eye className="h-4 w-4 mr-2" />
+                  Visa detaljer
+                </Button>
+              </div>
+            </CardContent>
+          </Card>
+        ))}
+      </div>
+
+      {shipments && shipments.totalPages > 1 && (
+        <Pagination
+          totalCount={shipments.totalCount}
+          page={page}
+          pageSize={shipments.pageSize}
+          totalPages={shipments.totalPages}
+          onPageChange={setPage}
+        />
+      )}
+    </div>
+  );
+};
+
+export default OngoingShipments;
diff --git a/frontend/app/dashboard/shipments/page.tsx b/frontend/app/dashboard/shipments/page.tsx
new file mode 100644
index 0000000..6ab30a9
--- /dev/null
+++ b/frontend/app/dashboard/shipments/page.tsx
@@ -0,0 +1,282 @@
+"use client";
+
+import React, { useState } from "react";
+import { useAuth } from "@/contexts/AuthContext";
+import { toast } from "sonner";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
+import { Button } from "@/components/ui/button";
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogDescription,
+  DialogFooter,
+} from "@/components/ui/dialog";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
+import {
+  AlertCircle,
+  Package,
+  CheckCircle,
+  XCircle,
+  Plane,
+  Loader,
+} from "lucide-react";
+import Shipment from "@/model/shipment";
+import { assignPilot, getShipments, ShipmentsFilter, updateShipmentStatus } from "@/services/shipment-service";
+import { ShipmentStatus } from "@/model/types";
+import { useQuery } from "@tanstack/react-query";
+import { getStatusColorClass, getStatusDisplayText } from "@/utils/shipment-status";
+import { getPilots, PilotsFilter } from "@/services/pilot-service";
+import Pagination from "@/components/ui/pagination";
+
+const ShipmentManagement = () => {
+  const { user } = useAuth();
+  const [showAssignDialog, setShowAssignDialog] = useState(false);
+  const [selectedShipment, setSelectedShipment] = useState<Shipment | null>(null);
+  const [selectedPilot, setSelectedPilot] = useState<string>("");
+  const [page, setPage] = useState(1);
+  
+  const { data: shipments, refetch, isLoading: shipmentsLoading } = useQuery({
+    queryKey: ["shipments", page],
+    queryFn: () => {
+      const filter: ShipmentsFilter = {
+        page,
+        pageSize: 10
+      };
+      return getShipments(filter);
+    },
+  });
+
+  const { data: pilots } = useQuery({
+    queryKey: ["pilots", page],
+    queryFn: () => {
+      const filter: PilotsFilter = {
+        page,
+        pageSize: 10
+      };
+      return getPilots(filter);
+    },
+  });
+
+
+  const handleAction = async (
+    shipment: Shipment,
+    action: "approve" | "denied" | "assign"
+  ) => {
+    setSelectedShipment(shipment);
+    if (action === "approve") {
+      await updateShipmentStatus(shipment.id, {status: ShipmentStatus.Approved});
+    } else if (action === "denied") {
+      await updateShipmentStatus(shipment.id, {status: ShipmentStatus.Denied});
+    } else {
+      setShowAssignDialog(true);
+      setSelectedPilot("");
+    }
+  };
+
+  const confirmAction = async (action: "assign") => {
+    if (!selectedShipment) return;
+
+    if (action === "assign") {
+      if (!selectedPilot) {
+        toast.error("Välj en pilot först");
+        return;
+      }
+      await assignPilot(selectedShipment.id, {pilotId: selectedPilot});
+      toast.success(
+        `Frakt ${selectedShipment.id} har tilldelats`
+      );
+      setShowAssignDialog(false);
+      refetch();
+    }
+  };
+
+  if (user?.role !== "admin") {
+    return (
+      <div className="flex flex-col items-center justify-center h-full p-8">
+        <AlertCircle className="w-16 h-16 text-space-danger mb-4" />
+        <h2 className="text-2xl font-medium mb-2">Åtkomst nekad</h2>
+        <p className="text-space-text-secondary text-center">
+          Du har inte behörighet att hantera frakter. Denna sida är endast för
+          administratörer.
+        </p>
+      </div>
+    );
+  }
+
+  return (
+    <div className="space-y-6">
+      <div className="flex justify-between items-center">
+        <div>
+          <h1 className="text-2xl font-medium tracking-tight">
+            Hantera Frakter
+          </h1>
+          <p className="text-space-text-secondary">
+            Godkänn, tilldela och övervaka frakter
+          </p>
+        </div>
+      </div>
+
+      {shipmentsLoading && (
+        <div className="flex flex-col items-center justify-center h-64 p-8">
+          <Loader className="w-12 h-12 text-space-text-secondary mb-4 animate-spin" />
+        </div>
+      )}
+      
+      <div className="rounded-md border border-space-secondary bg-space-primary">
+        <Table>
+          <TableHeader>
+            <TableRow>
+            <TableHead>#</TableHead>
+              <TableHead>Kund</TableHead>
+              <TableHead>Ursprung</TableHead>
+              <TableHead>Destination</TableHead>
+              <TableHead>Last</TableHead>
+              <TableHead>Status</TableHead>
+              <TableHead>Pilot</TableHead>
+              <TableHead>Åtgärder</TableHead>
+            </TableRow>
+          </TableHeader>
+          <TableBody>
+            {shipments?.items.map((shipment, ix) => (
+              <TableRow key={shipment.id}>
+                <TableCell>{ix + 1}</TableCell>
+                <TableCell>{shipment.sender.name}</TableCell>
+                <TableCell>{shipment.sender.station + " @ " + shipment.sender.planet}</TableCell>
+                <TableCell>{shipment.receiver.station + " @ " + shipment.receiver.planet}</TableCell>
+                <TableCell>{shipment.category}</TableCell>
+                <TableCell>
+                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColorClass(shipment.status)}`}>
+                    {getStatusDisplayText(shipment.status)}
+                  </span>
+                </TableCell>
+                <TableCell>
+                  {shipment.pilot ? (
+                    <div className="flex items-center gap-1">
+                      <Plane className="h-4 w-4 text-space-accent-purple" />
+                      {shipment.pilot.name}
+                    </div>
+                  ) : (
+                    <span className="text-space-text-secondary">
+                      Inte tilldelad
+                    </span>
+                  )}
+                </TableCell>
+                <TableCell>
+                  <div className="flex gap-2">
+                    {shipment.status === ShipmentStatus.WaitingForApproval && (
+                      <>
+                        <Button
+                          variant="outline"
+                          size="sm"
+                          className="text-green-500 hover:text-green-700"
+                          onClick={() => handleAction(shipment, "approve")}
+                        >
+                          <CheckCircle className="h-4 w-4 mr-1" />
+                          Godkänn
+                        </Button>
+                        <Button
+                          variant="outline"
+                          size="sm"
+                          className="text-red-500 hover:text-red-700"
+                          onClick={() => handleAction(shipment, "denied")}
+                        >
+                          <XCircle className="h-4 w-4 mr-1" />
+                          Neka
+                        </Button>
+                      </>
+                    )}
+                    {shipment.status === ShipmentStatus.Approved && (
+                      <Button
+                        variant="outline"
+                        size="sm"
+                        onClick={() => handleAction(shipment, "assign")}
+                      >
+                        <Plane className="h-4 w-4 mr-1" />
+                        Tilldela Pilot
+                      </Button>
+                    )}
+                    <Button variant="outline" size="sm">
+                      <Package className="h-4 w-4 mr-1" />
+                      Detaljer
+                    </Button>
+                  </div>
+                </TableCell>
+              </TableRow>
+            ))}
+          </TableBody>
+        </Table>
+      </div>
+
+      {shipments && shipments.totalPages > 1 && (
+        <Pagination
+          totalCount={shipments.totalCount}
+          page={page}
+          pageSize={shipments.pageSize}
+          totalPages={shipments.totalPages}
+          onPageChange={setPage}
+        />
+      )}
+
+      {/* Assign Dialog */}
+      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>
+        <DialogContent>
+          <DialogHeader>
+            <DialogTitle>Tilldela Pilot</DialogTitle>
+            <DialogDescription>
+              Välj en pilot för frakt {selectedShipment?.id} från{" "}
+              {selectedShipment?.sender.planet} till {selectedShipment?.receiver.planet}.
+            </DialogDescription>
+          </DialogHeader>
+          <div className="py-4">
+            <div className="space-y-2">
+              <label className="text-sm font-medium">
+                Tillgängliga Piloter
+              </label>
+              <Select value={selectedPilot} onValueChange={setSelectedPilot}>
+                <SelectTrigger>
+                  <SelectValue placeholder="Välj en pilot" />
+                </SelectTrigger>
+                <SelectContent>
+                  {pilots?.items.filter((p) => p.available).map((pilot) => (
+                    <SelectItem key={pilot.id} value={pilot.id}>
+                      {pilot.name}
+                    </SelectItem>
+                  ))}
+                </SelectContent>
+              </Select>
+            </div>
+          </div>
+          <DialogFooter>
+            <Button
+              variant="outline"
+              onClick={() => setShowAssignDialog(false)}
+            >
+              Avbryt
+            </Button>
+            <Button onClick={() => confirmAction("assign")}>
+              <Plane className="h-4 w-4 mr-2" />
+              Tilldela Pilot
+            </Button>
+          </DialogFooter>
+        </DialogContent>
+      </Dialog>
+    </div>
+  );
+};
+
+export default ShipmentManagement;
diff --git a/frontend/app/dashboard/user-settings/page.tsx b/frontend/app/dashboard/user-settings/page.tsx
new file mode 100644
index 0000000..d638e91
--- /dev/null
+++ b/frontend/app/dashboard/user-settings/page.tsx
@@ -0,0 +1,128 @@
+"use client";
+
+import React, { useState } from "react";
+import {
+  Card,
+  CardContent,
+  CardDescription,
+  CardFooter,
+  CardHeader,
+  CardTitle,
+} from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Label } from "@/components/ui/label";
+import { useAuth } from "@/contexts/AuthContext";
+import { toast } from "sonner";
+
+const UserSettings = () => {
+  const { user, updateUserProfile } = useAuth();
+  const [name, setName] = useState(user?.name || "");
+  const [isLoading, setIsLoading] = useState(false);
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setIsLoading(true);
+
+    try {
+      // In a real app, this would make an API call to update the user's name
+      // For now, we'll just simulate success
+      await new Promise((resolve) => setTimeout(resolve, 500));
+
+      if (updateUserProfile) {
+        updateUserProfile({ name });
+      }
+
+      toast.success("Profil uppdaterad");
+    } catch {
+      toast.error("Ett fel uppstod vid uppdatering av profilen");
+    } finally {
+      setIsLoading(false);
+    }
+  };
+
+  return (
+    <div className="container mx-auto py-6">
+      <h1 className="text-2xl font-medium mb-6 text-space-text-primary">
+        Profilinställningar
+      </h1>
+
+      <div className="grid gap-6">
+        <Card className="bg-space-secondary border-space-secondary/30">
+          <CardHeader>
+            <CardTitle className="text-space-text-primary">
+              Personlig information
+            </CardTitle>
+            <CardDescription className="text-space-text-secondary">
+              Uppdatera dina personuppgifter här.
+            </CardDescription>
+          </CardHeader>
+          <form onSubmit={handleSubmit}>
+            <CardContent className="space-y-4">
+              <div className="space-y-2">
+                <Label htmlFor="name" className="text-space-text-primary">
+                  Namn
+                </Label>
+                <Input
+                  id="name"
+                  value={name}
+                  onChange={(e) => setName(e.target.value)}
+                  className="bg-space-primary border-space-secondary/50 text-space-text-primary"
+                />
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="email" className="text-space-text-primary">
+                  E-post
+                </Label>
+                <Input
+                  id="email"
+                  value={user?.email}
+                  disabled
+                  className="bg-space-primary/50 border-space-secondary/50 text-space-text-secondary"
+                />
+                <p className="text-xs text-space-text-secondary">
+                  E-postadressen kan inte ändras.
+                </p>
+              </div>
+
+              <div className="space-y-2">
+                <Label htmlFor="role" className="text-space-text-primary">
+                  Roll
+                </Label>
+                <Input
+                  id="role"
+                  value={
+                    user?.role === "customer"
+                      ? "Kund"
+                      : user?.role === "pilot"
+                      ? "Pilot"
+                      : "Admin"
+                  }
+                  disabled
+                  className="bg-space-primary/50 border-space-secondary/50 text-space-text-secondary"
+                />
+                <p className="text-xs text-space-text-secondary">
+                  Din användarroll kan inte ändras här.
+                </p>
+              </div>
+            </CardContent>
+            <CardFooter>
+              <Button
+                type="submit"
+                disabled={
+                  isLoading || name.trim() === "" || name === user?.name
+                }
+                className="ml-auto"
+              >
+                {isLoading ? "Sparar..." : "Spara ändringar"}
+              </Button>
+            </CardFooter>
+          </form>
+        </Card>
+      </div>
+    </div>
+  );
+};
+
+export default UserSettings;
diff --git a/frontend/app/error.tsx b/frontend/app/error.tsx
new file mode 100644
index 0000000..ea0cc7c
--- /dev/null
+++ b/frontend/app/error.tsx
@@ -0,0 +1,66 @@
+"use client";
+
+import { useEffect } from "react";
+import Link from "next/link";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+import { Button } from "@/components/ui/button";
+import { RefreshCcw, Home } from "lucide-react";
+
+export default function Error({
+  error,
+  reset,
+}: {
+  error: Error & { digest?: string };
+  reset: () => void;
+}) {
+  useEffect(() => {
+    // Log the error to an error reporting service
+    console.error(error);
+  }, [error]);
+
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <main className="min-h-[calc(100vh-80px)] flex flex-col items-center justify-center px-4">
+        <div className="space-card p-8 max-w-lg w-full text-center relative overflow-hidden">
+          {/* Decorative background elements */}
+          <div className="absolute -top-10 -right-10 w-40 h-40 bg-space-accent-purple/20 rounded-full blur-3xl"></div>
+          <div className="absolute -bottom-10 -left-10 w-40 h-40 bg-space-accent-blue/20 rounded-full blur-3xl"></div>
+
+          <div className="relative z-10">
+            <div className="mx-auto w-20 h-20 bg-space-secondary rounded-full flex items-center justify-center mb-6">
+              <RefreshCcw className="h-10 w-10 text-space-warning" />
+            </div>
+
+            <h1 className="text-5xl font-medium mb-2">Oj då!</h1>
+            <p className="text-2xl font-medium mb-4 space-gradient-text">
+              Kosmiskt fel
+            </p>
+            <p className="text-space-text-secondary mb-8">
+              Ett oväntat fel har uppstått i vår rymdnavigeringsmatris. Vi
+              beklagar besväret.
+            </p>
+
+            <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 justify-center">
+              <Button onClick={() => reset()} className="space-button">
+                <RefreshCcw className="mr-2 h-4 w-4" />
+                Försök igen
+              </Button>
+              <Link href="/">
+                <Button variant="outline" className="space-button-secondary">
+                  <Home className="mr-2 h-4 w-4" />
+                  Tillbaka till hemstationen
+                </Button>
+              </Link>
+            </div>
+          </div>
+        </div>
+      </main>
+
+      <Footer />
+    </SpaceBackground>
+  );
+}
diff --git a/frontend/app/faq/page.tsx b/frontend/app/faq/page.tsx
new file mode 100644
index 0000000..62d5400
--- /dev/null
+++ b/frontend/app/faq/page.tsx
@@ -0,0 +1,121 @@
+"use client";
+
+import React from "react";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+import { Search } from "lucide-react";
+
+const FAQ = () => {
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <div className="container mx-auto px-4 py-16">
+        <div className="max-w-4xl mx-auto">
+          <div className="space-card p-8 mb-10">
+            <h1 className="text-4xl font-medium mb-6 space-gradient-text">
+              Vanliga frågor
+            </h1>
+
+            <div className="relative mb-10">
+              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
+                <Search className="h-5 w-5 text-space-text-secondary" />
+              </div>
+              <input
+                type="text"
+                className="space-input w-full pl-10"
+                placeholder="Sök bland vanliga frågor..."
+              />
+            </div>
+
+            <div className="space-y-8">
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Hur spårar jag min frakt?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Du kan spåra din frakt genom att logga in på ditt
+                  CosmoCargo™-konto och navigera till &quot;Pågående Leveranser&quot;
+                  eller genom att ange ditt spårningsnummer i spårningsverktyget
+                  på vår hemsida. Vi erbjuder realtidsuppdateringar med exakt
+                  position och beräknad ankomsttid.
+                </p>
+              </div>
+
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Vad händer om min frakt skadas under transport?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Alla frakter genom CosmoCargo™ är automatiskt försäkrade upp
+                  till 10,000 galaktiska krediter. För mer värdefulla
+                  försändelser rekommenderar vi vår premiumförsäkring som täcker
+                  upp till 1,000,000 galaktiska krediter. I händelse av skada,
+                  kontakta vår kundsupport inom 14 standarddagar efter leverans.
+                </p>
+              </div>
+
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Hur lång tid tar en leverans?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Leveranstiden beror på avståndet mellan ursprung och
+                  destination, samt vald fraktmetod. Våra standardleveranser
+                  mellan närliggande planeter tar vanligtvis 2-5 dagar, medan
+                  interstellära frakter kan ta 7-21 dagar. För brådskande behov
+                  erbjuder vi vår &quot;Hyperspace Express&quot; som kan leverera inom
+                  samma system på under 24 timmar.
+                </p>
+              </div>
+
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Kan jag skicka levande organismer?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Ja, CosmoCargo™ erbjuder specialiserade biostasiskapslar för
+                  transport av levande organismer. Observera att alla livsformer
+                  måste deklareras korrekt och överensstämma med interplanetära
+                  karantänsregler. Vissa restriktioner kan gälla för specifika
+                  arter. Kontakta vår kundtjänst för mer information.
+                </p>
+              </div>
+
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Vilka betalningsmetoder accepterar ni?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Vi accepterar alla större interplanetära valutor, inklusive
+                  Galaktiska Krediter, Lunara Tokens och Marsiska Denarer. Vi
+                  stöder också kryptovalutor som SolarCoin och AsteroidChain.
+                  Betalning kan genomföras via kvantöverföring,
+                  bioidentifikation eller traditionell digitala metoder.
+                </p>
+              </div>
+
+              <div className="border-b border-space-secondary pb-6">
+                <h3 className="text-xl font-medium mb-3">
+                  Kan jag ändra leveransadress efter att frakten har skickats?
+                </h3>
+                <p className="text-space-text-secondary">
+                  Ja, adressändringar kan göras upp till 12 timmar innan
+                  beräknad leverans till planebaserade destinationer, och upp
+                  till 48 timmar för rymdstationer och kolonier. En mindre
+                  omdirigieringsavgift kan tillkomma beroende på den nya
+                  destinationen.
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <Footer />
+    </SpaceBackground>
+  );
+};
+
+export default FAQ;
diff --git a/frontend/app/globals.css b/frontend/app/globals.css
new file mode 100644
index 0000000..0017d52
--- /dev/null
+++ b/frontend/app/globals.css
@@ -0,0 +1,150 @@
+@import url('https://fonts.googleapis.com/css2?family=Play:wght@400;700&display=swap');
+@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
+
+@tailwind base;
+@tailwind components;
+@tailwind utilities;
+
+@layer base {
+  :root {
+    --background: 222.2 84% 4.9%;
+    --foreground: 210 40% 98%;
+
+    --card: 222.2 84% 4.9%;
+    --card-foreground: 210 40% 98%;
+
+    --popover: 222.2 84% 4.9%;
+    --popover-foreground: 210 40% 98%;
+
+    --primary: 210 40% 98%;
+    --primary-foreground: 222.2 47.4% 11.2%;
+
+    --secondary: 217.2 32.6% 17.5%;
+    --secondary-foreground: 210 40% 98%;
+
+    --muted: 217.2 32.6% 17.5%;
+    --muted-foreground: 215 20.2% 65.1%;
+
+    --accent: 217.2 32.6% 17.5%;
+    --accent-foreground: 210 40% 98%;
+
+    --destructive: 0 62.8% 30.6%;
+    --destructive-foreground: 210 40% 98%;
+
+    --border: 217.2 32.6% 17.5%;
+    --input: 217.2 32.6% 17.5%;
+    --ring: 212.7 26.8% 83.9%;
+    --sidebar-background: 240 5.9% 10%;
+    --sidebar-foreground: 240 4.8% 95.9%;
+    --sidebar-primary: 224.3 76.3% 48%;
+    --sidebar-primary-foreground: 0 0% 100%;
+    --sidebar-accent: 240 3.7% 15.9%;
+    --sidebar-accent-foreground: 240 4.8% 95.9%;
+    --sidebar-border: 240 3.7% 15.9%;
+    --sidebar-ring: 217.2 91.2% 59.8%;
+  }
+}
+
+@layer base {
+  * {
+    @apply border-border;
+  }
+
+  body {
+    @apply bg-space-dark text-space-text-primary font-inter;
+  }
+
+  h1, h2, h3, h4, h5, h6, a, button {
+    @apply font-orbitron;
+  }
+}
+
+/* Custom classes */
+@layer components {
+  .space-card {
+    @apply bg-space-primary border border-space-secondary border-opacity-50 rounded-xl overflow-hidden;
+  }
+  
+  .space-button {
+    @apply font-orbitron text-white bg-button-gradient hover:opacity-90 transition-all duration-300 rounded-md px-6 py-2 shadow-lg;
+  }
+  
+  .glow {
+    @apply relative;
+  }
+  
+  .glow::after {
+    @apply content-[''] absolute -inset-0.5 bg-button-gradient opacity-0 blur transition duration-300 rounded-lg;
+  }
+  
+  .glow:hover::after {
+    @apply opacity-70;
+  }
+  
+  .glow:hover {
+    @apply z-10;
+  }
+  
+  .space-input {
+    @apply bg-space-primary/80 border border-space-secondary text-white rounded px-4 py-2 focus:ring-2 focus:ring-space-accent-purple/50 focus:border-space-accent-purple outline-none;
+  }
+  
+  .space-gradient-text {
+    @apply bg-clip-text text-transparent bg-button-gradient;
+  }
+  
+  /* Star basic styles - animations now handled by GSAP */
+  .star {
+    @apply absolute rounded-full bg-white;
+  }
+  
+  .shooting-star {
+    @apply absolute h-[2px] w-[2px] bg-white;
+    box-shadow: 0 0 3px 1px rgba(255, 255, 255, 0.8);
+    position: relative;
+  }
+  
+  .shooting-star-tail {
+    @apply absolute bg-white;
+    width: 50px;
+    height: 100%;
+    background: linear-gradient(90deg, white, transparent);
+  }
+
+  .logo {
+    height: 6em;
+    padding: 1.5em;
+    will-change: filter;
+    transition: filter 300ms;
+  }
+  .logo:hover {
+    filter: drop-shadow(0 0 2em #646cffaa);
+  }
+  .logo.react:hover {
+    filter: drop-shadow(0 0 2em #61dafbaa);
+  }
+  
+  @keyframes logo-spin {
+    from {
+      transform: rotate(0deg);
+    }
+    to {
+      transform: rotate(360deg);
+    }
+  }
+  
+  @media (prefers-reduced-motion: no-preference) {
+    a:nth-of-type(2) .logo {
+      animation: logo-spin infinite 20s linear;
+    }
+  }
+  
+  .card {
+    padding: 2em;
+  }
+  
+  .read-the-docs {
+    color: #888;
+  }
+  
+}
diff --git a/frontend/app/layout.tsx b/frontend/app/layout.tsx
new file mode 100644
index 0000000..9af694e
--- /dev/null
+++ b/frontend/app/layout.tsx
@@ -0,0 +1,26 @@
+import "./globals.css";
+import type { Metadata } from "next";
+import { Inter } from "next/font/google";
+import ClientProviders from "@/components/ClientProviders";
+import React from "react";
+
+const inter = Inter({ subsets: ["latin"] });
+
+export const metadata: Metadata = {
+  title: "CosmoCargo™ - Intergalaktisk Fraktcentral",
+  description: "Den ledande aktören inom rymdlogistik",
+};
+
+export default function RootLayout({
+  children,
+}: {
+  children: React.ReactNode;
+}) {
+  return (
+    <html lang="sv">
+      <body className={inter.className}>
+        <ClientProviders>{children}</ClientProviders>
+      </body>
+    </html>
+  );
+}
diff --git a/frontend/app/login/page.tsx b/frontend/app/login/page.tsx
new file mode 100644
index 0000000..ff2dbb4
--- /dev/null
+++ b/frontend/app/login/page.tsx
@@ -0,0 +1,159 @@
+"use client";
+
+import React, { useState } from "react";
+import { useRouter } from "next/navigation";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+import { Button } from "@/components/ui/button";
+import { Input } from "@/components/ui/input";
+import { Label } from "@/components/ui/label";
+import { Checkbox } from "@/components/ui/checkbox";
+import {
+  Card,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+  CardContent,
+} from "@/components/ui/card";
+import { Lock, User, LogIn } from "lucide-react";
+import { useAuth } from "@/contexts/AuthContext";
+
+const Login = () => {
+  const [email, setEmail] = useState("");
+  const [password, setPassword] = useState("");
+  const [isLoading, setIsLoading] = useState(false);
+  const router = useRouter();
+  const { login } = useAuth();
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setIsLoading(true);
+
+    try {
+      const success = await login(email, password);
+      if (success) {
+        router.push("/dashboard");
+      }
+    } finally {
+      setIsLoading(false);
+    }
+  };
+
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <main className="min-h-[calc(100vh-160px)] flex items-center justify-center px-4 py-12">
+        <Card className="space-card w-full max-w-md z-50">
+          <CardHeader className="space-y-1 text-center">
+            <CardTitle className="text-2xl font-medium">
+              <Lock className="h-6 w-6 inline-block mr-2 text-space-accent-purple" />
+              Logga in
+            </CardTitle>
+            <CardDescription className="text-space-text-secondary">
+              Ange dina uppgifter för att få tillgång till ditt konto
+            </CardDescription>
+          </CardHeader>
+          <CardContent>
+            <form onSubmit={handleSubmit} className="space-y-4">
+              <div className="space-y-2">
+                <Label htmlFor="email">E-post</Label>
+                <div className="relative">
+                  <User className="absolute left-3 top-2.5 h-5 w-5 text-space-text-secondary" />
+                  <Input
+                    id="email"
+                    type="email"
+                    placeholder="din@email.com"
+                    className="pl-10 space-input"
+                    value={email}
+                    onChange={(e) => setEmail(e.target.value)}
+                    required
+                    autoComplete="email"
+                  />
+                </div>
+              </div>
+              <div className="space-y-2">
+                <div className="flex items-center justify-between">
+                  <Label htmlFor="password">Lösenord</Label>
+                </div>
+                <div className="relative">
+                  <Lock className="absolute left-3 top-2.5 h-5 w-5 text-space-text-secondary" />
+                  <Input
+                    id="password"
+                    type="password"
+                    placeholder="••••••••"
+                    className="pl-10 space-input"
+                    value={password}
+                    onChange={(e) => setPassword(e.target.value)}
+                    required
+                    autoComplete="current-password"
+                  />
+                </div>
+              </div>
+              <div className="flex items-center space-x-2">
+                <Checkbox id="remember" />
+                <Label htmlFor="remember" className="text-sm font-normal">
+                  Kom ihåg mig
+                </Label>
+              </div>
+              <Button
+                type="submit"
+                className="space-button w-full"
+                disabled={isLoading}
+              >
+                {isLoading ? (
+                  <span className="flex items-center">
+                    <svg
+                      className="animate-spin -ml-1 mr-3 h-4 w-4 text-white"
+                      xmlns="http://www.w3.org/2000/svg"
+                      fill="none"
+                      viewBox="0 0 24 24"
+                    >
+                      <circle
+                        className="opacity-25"
+                        cx="12"
+                        cy="12"
+                        r="10"
+                        stroke="currentColor"
+                        strokeWidth="4"
+                      ></circle>
+                      <path
+                        className="opacity-75"
+                        fill="currentColor"
+                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
+                      ></path>
+                    </svg>
+                    Loggar in...
+                  </span>
+                ) : (
+                  <>
+                    <LogIn className="mr-2 h-4 w-4" />
+                    Logga in
+                  </>
+                )}
+              </Button>
+
+              <div className="mt-4 p-3 bg-space-secondary/30 rounded-md">
+                <p className="text-sm text-space-text-secondary">
+                  <strong>Demo inloggningsuppgifter:</strong>
+                </p>
+                <p className="text-xs mt-1 text-space-text-secondary">
+                  Kund: demo.customer@example.com / mKv2P8dXrL9F
+                  <br />
+                  Pilot: demo.pilot@example.com / zH7yB3tR5wQ9s
+                  <br />
+                  Admin: demo.admin@example.com / eT4xD6cV2gN8p
+                </p>
+              </div>
+            </form>
+          </CardContent>
+        </Card>
+      </main>
+
+      <Footer />
+    </SpaceBackground>
+  );
+};
+
+export default Login;
diff --git a/frontend/app/not-found.tsx b/frontend/app/not-found.tsx
new file mode 100644
index 0000000..1e1c1a7
--- /dev/null
+++ b/frontend/app/not-found.tsx
@@ -0,0 +1,48 @@
+"use client";
+
+import Link from "next/link";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+import { Button } from "@/components/ui/button";
+import { Home, AlertTriangle } from "lucide-react";
+
+export default function NotFound() {
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <main className="min-h-[calc(100vh-80px)] flex flex-col items-center justify-center px-4">
+        <div className="space-card p-8 max-w-lg w-full text-center relative overflow-hidden">
+          {/* Decorative background elements */}
+          <div className="absolute -top-10 -right-10 w-40 h-40 bg-space-accent-purple/20 rounded-full blur-3xl"></div>
+          <div className="absolute -bottom-10 -left-10 w-40 h-40 bg-space-accent-blue/20 rounded-full blur-3xl"></div>
+
+          <div className="relative z-10">
+            <div className="mx-auto w-20 h-20 bg-space-secondary rounded-full flex items-center justify-center mb-6">
+              <AlertTriangle className="h-10 w-10 text-space-danger" />
+            </div>
+
+            <h1 className="text-5xl font-medium mb-2">404</h1>
+            <p className="text-2xl font-medium mb-4 space-gradient-text">
+              Lost in Space
+            </p>
+            <p className="text-space-text-secondary mb-8">
+              Det ser ut som att du har färdats till okänt territorium. Denna
+              koordinat existerar inte i vår kosmiska karta.
+            </p>
+
+            <Link href="/">
+              <Button className="space-button">
+                <Home className="mr-2 h-4 w-4" />
+                Återvänd till hemstationen
+              </Button>
+            </Link>
+          </div>
+        </div>
+      </main>
+
+      <Footer />
+    </SpaceBackground>
+  );
+}
diff --git a/frontend/app/page.tsx b/frontend/app/page.tsx
new file mode 100644
index 0000000..c8b832a
--- /dev/null
+++ b/frontend/app/page.tsx
@@ -0,0 +1,20 @@
+"use client";
+
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+import HeroSection from "@/components/HeroSection";
+import FeatureList from "@/components/FeatureList";
+
+export default function Home() {
+  return (
+    <main className="flex min-h-screen flex-col items-center justify-center">
+      <SpaceBackground>
+        <Header />
+        <HeroSection />
+        <FeatureList />
+        <Footer />
+      </SpaceBackground>
+    </main>
+  );
+}
diff --git a/frontend/app/services/page.tsx b/frontend/app/services/page.tsx
new file mode 100644
index 0000000..ade8415
--- /dev/null
+++ b/frontend/app/services/page.tsx
@@ -0,0 +1,197 @@
+"use client";
+
+import React from "react";
+import {
+  Rocket,
+  ShieldCheck,
+  Clock,
+  BarChart3,
+  Package,
+  Users,
+} from "lucide-react";
+import SpaceBackground from "@/components/SpaceBackground";
+import Header from "@/components/Header";
+import Footer from "@/components/Footer";
+
+const Services = () => {
+  return (
+    <SpaceBackground>
+      <Header />
+
+      <div className="container mx-auto px-4 py-16">
+        <div className="max-w-5xl mx-auto">
+          <div className="space-card p-8 mb-10">
+            <h1 className="text-4xl font-medium mb-2 space-gradient-text">
+              Våra Tjänster
+            </h1>
+            <p className="text-xl text-space-text-secondary mb-12">
+              Upptäck vårt omfattande utbud av rymdlogistiklösningar för alla
+              behov
+            </p>
+
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
+              <div className="space-card p-6 border border-space-secondary/50 bg-space-primary/40">
+                <div className="bg-space-secondary/30 p-4 rounded-full w-16 h-16 flex items-center justify-center mb-4">
+                  <Package className="h-8 w-8 text-space-accent-purple" />
+                </div>
+                <h3 className="text-xl font-medium mb-2">Standardfrakt</h3>
+                <p className="text-space-text-secondary mb-4">
+                  Pålitlig och kostnadseffektiv transport för gods av alla
+                  storlekar. Perfekt för regelbundna leveranser mellan
+                  etablerade rutter.
+                </p>
+                <ul className="space-y-2 text-space-text-secondary">
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-purple rounded-full mr-2"></span>
+                    Leverans inom 2-7 dagar (beroende på avstånd)
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-purple rounded-full mr-2"></span>
+                    Grundläggande spårning och försäkring ingår
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-purple rounded-full mr-2"></span>
+                    Lämplig för paket upp till 500 kg
+                  </li>
+                </ul>
+              </div>
+
+              <div className="space-card p-6 border border-space-secondary/50 bg-space-primary/40">
+                <div className="bg-space-secondary/30 p-4 rounded-full w-16 h-16 flex items-center justify-center mb-4">
+                  <Rocket className="h-8 w-8 text-space-accent-blue" />
+                </div>
+                <h3 className="text-xl font-medium mb-2">Express Hyperspace</h3>
+                <p className="text-space-text-secondary mb-4">
+                  Vår snabbaste leveranstjänst som använder avancerad
+                  hyperrymdsteknologi för att minimera transporttiden.
+                </p>
+                <ul className="space-y-2 text-space-text-secondary">
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-blue rounded-full mr-2"></span>
+                    Leverans inom 24-48 timmar oavsett avstånd
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-blue rounded-full mr-2"></span>
+                    Realtidsspårning med minutuppdateringar
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-blue rounded-full mr-2"></span>
+                    Prioriterad hantering vid alla transitpunkter
+                  </li>
+                </ul>
+              </div>
+
+              <div className="space-card p-6 border border-space-secondary/50 bg-space-primary/40">
+                <div className="bg-space-secondary/30 p-4 rounded-full w-16 h-16 flex items-center justify-center mb-4">
+                  <ShieldCheck className="h-8 w-8 text-space-accent-green" />
+                </div>
+                <h3 className="text-xl font-medium mb-2">Säker Transport</h3>
+                <p className="text-space-text-secondary mb-4">
+                  Specialiserad tjänst för värdefulla, känsliga eller hemliga
+                  försändelser som kräver extra säkerhetsåtgärder.
+                </p>
+                <ul className="space-y-2 text-space-text-secondary">
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-green rounded-full mr-2"></span>
+                    Beväpnad eskort och kvantkrypterad spårning
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-green rounded-full mr-2"></span>
+                    Biometrisk verifiering vid leverans
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-green rounded-full mr-2"></span>
+                    Försäkring upp till 10 miljoner galaktiska krediter
+                  </li>
+                </ul>
+              </div>
+
+              <div className="space-card p-6 border border-space-secondary/50 bg-space-primary/40">
+                <div className="bg-space-secondary/30 p-4 rounded-full w-16 h-16 flex items-center justify-center mb-4">
+                  <BarChart3 className="h-8 w-8 text-space-accent-orange" />
+                </div>
+                <h3 className="text-xl font-medium mb-2">Logistiklösningar</h3>
+                <p className="text-space-text-secondary mb-4">
+                  Skräddarsydda supply chain-lösningar för företag med komplexa
+                  distributionsbehov i flera solsystem.
+                </p>
+                <ul className="space-y-2 text-space-text-secondary">
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-orange rounded-full mr-2"></span>
+                    Dedikerade lastfartyg och lagerhantering
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-orange rounded-full mr-2"></span>
+                    Avancerad AI-optimering av rutter och lager
+                  </li>
+                  <li className="flex items-center">
+                    <span className="h-2 w-2 bg-space-accent-orange rounded-full mr-2"></span>
+                    Fullständig integrering med kundens ERP-system
+                  </li>
+                </ul>
+              </div>
+            </div>
+
+            <h2 className="text-2xl font-medium mb-6">Specialtjänster</h2>
+
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
+              <div className="flex">
+                <div className="bg-space-secondary/30 p-3 rounded-full h-14 w-14 flex items-center justify-center mr-4">
+                  <Clock className="h-6 w-6 text-space-accent-blue" />
+                </div>
+                <div>
+                  <h3 className="text-lg font-medium mb-1">
+                    Tidskänsliga Leveranser
+                  </h3>
+                  <p className="text-space-text-secondary">
+                    För kritiska komponenter och tidskänsliga varor som
+                    mediciner eller färskvaror. Leveransgaranti med tidsspecifik
+                    precision.
+                  </p>
+                </div>
+              </div>
+
+              <div className="flex">
+                <div className="bg-space-secondary/30 p-3 rounded-full h-14 w-14 flex items-center justify-center mr-4">
+                  <Users className="h-6 w-6 text-space-accent-purple" />
+                </div>
+                <div>
+                  <h3 className="text-lg font-medium mb-1">
+                    Kolonisatörspaket
+                  </h3>
+                  <p className="text-space-text-secondary">
+                    Allt-i-ett-lösning för nya kolonier. Vi levererar allt från
+                    basmoduler till livsnödvändiga förnödenheter för att
+                    etablera din nya utpost.
+                  </p>
+                </div>
+              </div>
+            </div>
+
+            <div className="bg-space-secondary/20 border border-space-accent-blue/30 rounded-lg p-6">
+              <h3 className="text-xl font-medium mb-4 text-space-accent-blue">
+                Företagskunder
+              </h3>
+              <p className="text-space-text-secondary mb-4">
+                CosmoCargo™ erbjuder skräddarsydda företagslösningar med
+                volymrabatter, dedikerade kontaktpersoner och anpassade
+                leveransscheman.
+              </p>
+              <p className="text-space-text-secondary">
+                Kontakta vår företagsavdelning på{" "}
+                <span className="text-space-accent-blue">
+                  business@cosmocargo.space
+                </span>{" "}
+                för en konsultation.
+              </p>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      <Footer />
+    </SpaceBackground>
+  );
+};
+
+export default Services;
diff --git a/frontend/next.config.js b/frontend/next.config.js
new file mode 100644
index 0000000..f348aa2
--- /dev/null
+++ b/frontend/next.config.js
@@ -0,0 +1,9 @@
+/** @type {import('next').NextConfig} */
+const nextConfig = {
+  reactStrictMode: true,
+  eslint: {
+    ignoreDuringBuilds: true,
+  },
+}
+
+module.exports = nextConfig 
\ No newline at end of file
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
new file mode 100644
index 0000000..5d14e98
--- /dev/null
+++ b/frontend/package-lock.json
@@ -0,0 +1,8026 @@
+{
+  "name": "cosmocargo-frontend",
+  "version": "0.1.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "cosmocargo-frontend",
+      "version": "0.1.0",
+      "dependencies": {
+        "@hookform/resolvers": "^5.0.1",
+        "@radix-ui/react-checkbox": "^1.2.3",
+        "@radix-ui/react-dialog": "^1.1.11",
+        "@radix-ui/react-label": "^2.1.4",
+        "@radix-ui/react-select": "^2.2.2",
+        "@radix-ui/react-separator": "^1.1.4",
+        "@radix-ui/react-slot": "^1.2.0",
+        "@radix-ui/react-tabs": "^1.1.9",
+        "@radix-ui/react-toast": "^1.2.11",
+        "@radix-ui/react-tooltip": "^1.2.4",
+        "@tanstack/react-query": "^5.74.7",
+        "axios": "^1.9.0",
+        "class-variance-authority": "^0.7.1",
+        "clsx": "^2.1.1",
+        "cmdk": "^1.1.1",
+        "embla-carousel-react": "^8.6.0",
+        "gsap": "^3.12.7",
+        "input-otp": "^1.4.2",
+        "lucide-react": "^0.503.0",
+        "next": "^15.3.1",
+        "next-themes": "^0.4.6",
+        "react": "^19.1.0",
+        "react-day-picker": "^9.6.7",
+        "react-dom": "^19.1.0",
+        "react-hook-form": "^7.56.1",
+        "react-resizable-panels": "^2.1.9",
+        "react-router-dom": "^7.5.2",
+        "recharts": "^2.15.3",
+        "sonner": "^2.0.3",
+        "tailwind-merge": "^3.2.0",
+        "tailwindcss-animate": "^1.0.7",
+        "vaul": "^1.1.2",
+        "zod": "^3.24.3"
+      },
+      "devDependencies": {
+        "@types/node": "^22.15.3",
+        "@types/react": "^19.1.2",
+        "@types/react-dom": "^19.1.2",
+        "autoprefixer": "^10.4.21",
+        "eslint": "^9.25.1",
+        "eslint-config-next": "15.3.1",
+        "postcss": "^8.5.3",
+        "tailwindcss": "^3.4.1",
+        "typescript": "^5.8.3"
+      }
+    },
+    "node_modules/@alloc/quick-lru": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
+      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@babel/runtime": {
+      "version": "7.27.0",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.0.tgz",
+      "integrity": "sha512-VtPOkrdPHZsKc/clNqyi9WUA8TINkZ4cGk63UUE3u4pmB2k+ZMQRDuIOagv8UVd6j7k0T3+RRIb7beKTebNbcw==",
+      "license": "MIT",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@date-fns/tz": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@date-fns/tz/-/tz-1.2.0.tgz",
+      "integrity": "sha512-LBrd7MiJZ9McsOgxqWX7AaxrDjcFVjWH/tIKJd7pnR7McaslGYOP1QmmiBXdJH/H/yLCT+rcQ7FaPBUxRGUtrg==",
+      "license": "MIT"
+    },
+    "node_modules/@emnapi/core": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.4.3.tgz",
+      "integrity": "sha512-4m62DuCE07lw01soJwPiBGC0nAww0Q+RY70VZ+n49yDIO13yyinhbWCeNnaob0lakDtWQzSdtNWzJeOJt2ma+g==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/wasi-threads": "1.0.2",
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@emnapi/runtime": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.3.tgz",
+      "integrity": "sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@emnapi/wasi-threads": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/@emnapi/wasi-threads/-/wasi-threads-1.0.2.tgz",
+      "integrity": "sha512-5n3nTJblwRi8LlXkJ9eBzu+kZR8Yxcc7ubakyQTFzPMtIhFpUBRbsnc2Dv88IZDIbCDlBiWrknhB4Lsz7mg6BA==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.6.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.6.1.tgz",
+      "integrity": "sha512-KTsJMmobmbrFLe3LDh0PC2FXpcSYJt/MLjlkh/9LEnmKYLSYmT/0EW9JWANjeoemiuZrmogti0tW5Ch+qNUYDw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.12.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@eslint/config-array": {
+      "version": "0.20.0",
+      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
+      "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@eslint/object-schema": "^2.1.6",
+        "debug": "^4.3.1",
+        "minimatch": "^3.1.2"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/config-helpers": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.1.tgz",
+      "integrity": "sha512-RI17tsD2frtDu/3dmI7QRrD4bedNKPM08ziRYaC5AhkGrzIAJelm9kJU1TznK+apx6V+cqRz8tfpEeG3oIyjxw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/core": {
+      "version": "0.13.0",
+      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.13.0.tgz",
+      "integrity": "sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@types/json-schema": "^7.0.15"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/eslintrc": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
+      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^10.0.1",
+        "globals": "^14.0.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "9.25.1",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.25.1.tgz",
+      "integrity": "sha512-dEIwmjntEx8u3Uvv+kr3PDeeArL8Hw07H9kyYxCjnM9pBjfEhk6uLXSchxxzgiwtRhhzVzqmUSDFBOi1TuZ7qg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/object-schema": {
+      "version": "2.1.6",
+      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
+      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/plugin-kit": {
+      "version": "0.2.8",
+      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.8.tgz",
+      "integrity": "sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@eslint/core": "^0.13.0",
+        "levn": "^0.4.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@floating-ui/core": {
+      "version": "1.6.9",
+      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.6.9.tgz",
+      "integrity": "sha512-uMXCuQ3BItDUbAMhIXw7UPXRfAlOAvZzdK9BWpE60MCn+Svt3aLn9jsPTi/WNGlRUu2uI0v5S7JiIUsbsvh3fw==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/utils": "^0.2.9"
+      }
+    },
+    "node_modules/@floating-ui/dom": {
+      "version": "1.6.13",
+      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.6.13.tgz",
+      "integrity": "sha512-umqzocjDgNRGTuO7Q8CU32dkHkECqI8ZdMZ5Swb6QAM0t5rnlrN3lGo1hdpscRd3WS8T6DKYK4ephgIH9iRh3w==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/core": "^1.6.0",
+        "@floating-ui/utils": "^0.2.9"
+      }
+    },
+    "node_modules/@floating-ui/react-dom": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.2.tgz",
+      "integrity": "sha512-06okr5cgPzMNBy+Ycse2A6udMi4bqwW/zgBF/rwjcNqWkyr82Mcg8b0vjX8OJpZFy/FKjJmw6wV7t44kK6kW7A==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/dom": "^1.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0",
+        "react-dom": ">=16.8.0"
+      }
+    },
+    "node_modules/@floating-ui/utils": {
+      "version": "0.2.9",
+      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.9.tgz",
+      "integrity": "sha512-MDWhGtE+eHw5JW7lq4qhc5yRLS11ERl1c7Z6Xd0a58DozHES6EnNNwUWbMiG4J9Cgj053Bhk8zvlhFYKVhULwg==",
+      "license": "MIT"
+    },
+    "node_modules/@hookform/resolvers": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/@hookform/resolvers/-/resolvers-5.0.1.tgz",
+      "integrity": "sha512-u/+Jp83luQNx9AdyW2fIPGY6Y7NG68eN2ZW8FOJYL+M0i4s49+refdJdOp/A9n9HFQtQs3HIDHQvX3ZET2o7YA==",
+      "license": "MIT",
+      "dependencies": {
+        "@standard-schema/utils": "^0.3.0"
+      },
+      "peerDependencies": {
+        "react-hook-form": "^7.55.0"
+      }
+    },
+    "node_modules/@humanfs/core": {
+      "version": "0.19.1",
+      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
+      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18.0"
+      }
+    },
+    "node_modules/@humanfs/node": {
+      "version": "0.16.6",
+      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
+      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@humanfs/core": "^0.19.1",
+        "@humanwhocodes/retry": "^0.3.0"
+      },
+      "engines": {
+        "node": ">=18.18.0"
+      }
+    },
+    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
+      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/retry": {
+      "version": "0.4.2",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
+      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@img/sharp-darwin-arm64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.34.1.tgz",
+      "integrity": "sha512-pn44xgBtgpEbZsu+lWf2KNb6OAf70X68k+yk69Ic2Xz11zHR/w24/U49XT7AeRwJ0Px+mhALhU5LPci1Aymk7A==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-darwin-x64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.34.1.tgz",
+      "integrity": "sha512-VfuYgG2r8BpYiOUN+BfYeFo69nP/MIwAtSJ7/Zpxc5QF3KS22z8Pvg3FkrSFJBPNQ7mmcUcYQFBmEQp7eu1F8Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-darwin-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.1.0.tgz",
+      "integrity": "sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-darwin-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.1.0.tgz",
+      "integrity": "sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.1.0.tgz",
+      "integrity": "sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.1.0.tgz",
+      "integrity": "sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-ppc64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-ppc64/-/sharp-libvips-linux-ppc64-1.1.0.tgz",
+      "integrity": "sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-s390x": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.1.0.tgz",
+      "integrity": "sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linux-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz",
+      "integrity": "sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.1.0.tgz",
+      "integrity": "sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz",
+      "integrity": "sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.34.1.tgz",
+      "integrity": "sha512-anKiszvACti2sGy9CirTlNyk7BjjZPiML1jt2ZkTdcvpLU1YH6CXwRAZCA2UmRXnhiIftXQ7+Oh62Ji25W72jA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-arm64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.34.1.tgz",
+      "integrity": "sha512-kX2c+vbvaXC6vly1RDf/IWNXxrlxLNpBVWkdpRq5Ka7OOKj6nr66etKy2IENf6FtOgklkg9ZdGpEu9kwdlcwOQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-s390x": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.34.1.tgz",
+      "integrity": "sha512-7s0KX2tI9mZI2buRipKIw2X1ufdTeaRgwmRabt5bi9chYfhur+/C1OXg3TKg/eag1W+6CCWLVmSauV1owmRPxA==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-s390x": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linux-x64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.1.tgz",
+      "integrity": "sha512-wExv7SH9nmoBW3Wr2gvQopX1k8q2g5V5Iag8Zk6AVENsjwd+3adjwxtp3Dcu2QhOXr8W9NusBU6XcQUohBZ5MA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linux-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-arm64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.34.1.tgz",
+      "integrity": "sha512-DfvyxzHxw4WGdPiTF0SOHnm11Xv4aQexvqhRDAoD00MzHekAj9a/jADXeXYCDFH/DzYruwHbXU7uz+H+nWmSOQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-linuxmusl-x64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.1.tgz",
+      "integrity": "sha512-pax/kTR407vNb9qaSIiWVnQplPcGU8LRIJpDT5o8PdAx5aAA7AS3X9PS8Isw1/WfqgQorPotjrZL3Pqh6C5EBg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-libvips-linuxmusl-x64": "1.1.0"
+      }
+    },
+    "node_modules/@img/sharp-wasm32": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.34.1.tgz",
+      "integrity": "sha512-YDybQnYrLQfEpzGOQe7OKcyLUCML4YOXl428gOOzBgN6Gw0rv8dpsJ7PqTHxBnXnwXr8S1mYFSLSa727tpz0xg==",
+      "cpu": [
+        "wasm32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/runtime": "^1.4.0"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-ia32": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.34.1.tgz",
+      "integrity": "sha512-WKf/NAZITnonBf3U1LfdjoMgNO5JYRSlhovhRhMxXVdvWYveM4kM3L8m35onYIdh75cOMCo1BexgVQcCDzyoWw==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@img/sharp-win32-x64": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.1.tgz",
+      "integrity": "sha512-hw1iIAHpNE8q3uMIRCgGOeDoz9KtFNarFLQclLxr/LK1VBkj8nby18RjFvr6aP7USRYAjTZW6yisnBWMX571Tw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "Apache-2.0 AND LGPL-3.0-or-later",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      }
+    },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.8",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
+      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/set-array": "^1.2.1",
+        "@jridgewell/sourcemap-codec": "^1.4.10",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/set-array": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
+      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
+      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.25",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
+      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@napi-rs/wasm-runtime": {
+      "version": "0.2.9",
+      "resolved": "https://registry.npmjs.org/@napi-rs/wasm-runtime/-/wasm-runtime-0.2.9.tgz",
+      "integrity": "sha512-OKRBiajrrxB9ATokgEQoG87Z25c67pCpYcCwmXYX8PBftC9pBfN18gnm/fh1wurSLEKIAt+QRFLFCQISrb66Jg==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/core": "^1.4.0",
+        "@emnapi/runtime": "^1.4.0",
+        "@tybys/wasm-util": "^0.9.0"
+      }
+    },
+    "node_modules/@next/env": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/env/-/env-15.3.1.tgz",
+      "integrity": "sha512-cwK27QdzrMblHSn9DZRV+DQscHXRuJv6MydlJRpFSqJWZrTYMLzKDeyueJNN9MGd8NNiUKzDQADAf+dMLXX7YQ==",
+      "license": "MIT"
+    },
+    "node_modules/@next/eslint-plugin-next": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/eslint-plugin-next/-/eslint-plugin-next-15.3.1.tgz",
+      "integrity": "sha512-oEs4dsfM6iyER3jTzMm4kDSbrQJq8wZw5fmT6fg2V3SMo+kgG+cShzLfEV20senZzv8VF+puNLheiGPlBGsv2A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-glob": "3.3.1"
+      }
+    },
+    "node_modules/@next/swc-darwin-arm64": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-15.3.1.tgz",
+      "integrity": "sha512-hjDw4f4/nla+6wysBL07z52Gs55Gttp5Bsk5/8AncQLJoisvTBP0pRIBK/B16/KqQyH+uN4Ww8KkcAqJODYH3w==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-darwin-x64": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-15.3.1.tgz",
+      "integrity": "sha512-q+aw+cJ2ooVYdCEqZVk+T4Ni10jF6Fo5DfpEV51OupMaV5XL6pf3GCzrk6kSSZBsMKZtVC1Zm/xaNBFpA6bJ2g==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-gnu": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-15.3.1.tgz",
+      "integrity": "sha512-wBQ+jGUI3N0QZyWmmvRHjXjTWFy8o+zPFLSOyAyGFI94oJi+kK/LIZFJXeykvgXUk1NLDAEFDZw/NVINhdk9FQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-arm64-musl": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-15.3.1.tgz",
+      "integrity": "sha512-IIxXEXRti/AulO9lWRHiCpUUR8AR/ZYLPALgiIg/9ENzMzLn3l0NSxVdva7R/VDcuSEBo0eGVCe3evSIHNz0Hg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-gnu": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-15.3.1.tgz",
+      "integrity": "sha512-bfI4AMhySJbyXQIKH5rmLJ5/BP7bPwuxauTvVEiJ/ADoddaA9fgyNNCcsbu9SlqfHDoZmfI6g2EjzLwbsVTr5A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-linux-x64-musl": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-15.3.1.tgz",
+      "integrity": "sha512-FeAbR7FYMWR+Z+M5iSGytVryKHiAsc0x3Nc3J+FD5NVbD5Mqz7fTSy8CYliXinn7T26nDMbpExRUI/4ekTvoiA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-arm64-msvc": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-15.3.1.tgz",
+      "integrity": "sha512-yP7FueWjphQEPpJQ2oKmshk/ppOt+0/bB8JC8svPUZNy0Pi3KbPx2Llkzv1p8CoQa+D2wknINlJpHf3vtChVBw==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@next/swc-win32-x64-msvc": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-15.3.1.tgz",
+      "integrity": "sha512-3PMvF2zRJAifcRNni9uMk/gulWfWS+qVI/pagd+4yLF5bcXPZPPH2xlYRYOsUjmCJOXSTAC2PjRzbhsRzR2fDQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nolyfill/is-core-module": {
+      "version": "1.0.39",
+      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
+      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12.4.0"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@radix-ui/number": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/number/-/number-1.1.1.tgz",
+      "integrity": "sha512-MkKCwxlXTgz6CFoJx3pCwn07GKp36+aZyu/u2Ln2VrA5DcdyCZkASEDBTd8x5whTQQL5CiYf4prXKLcgQdv29g==",
+      "license": "MIT"
+    },
+    "node_modules/@radix-ui/primitive": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/primitive/-/primitive-1.1.2.tgz",
+      "integrity": "sha512-XnbHrrprsNqZKQhStrSwgRUQzoCI1glLzdw79xiZPoofhGICeZRSQ3dIxAKH1gb3OHfNf4d6f+vAv3kil2eggA==",
+      "license": "MIT"
+    },
+    "node_modules/@radix-ui/react-arrow": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-arrow/-/react-arrow-1.1.4.tgz",
+      "integrity": "sha512-qz+fxrqgNxG0dYew5l7qR3c7wdgRu1XVUHGnGYX7rg5HM4p9SWaRmJwfgR3J0SgyUKayLmzQIun+N6rWRgiRKw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-checkbox": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-checkbox/-/react-checkbox-1.2.3.tgz",
+      "integrity": "sha512-pHVzDYsnaDmBlAuwim45y3soIN8H4R7KbkSVirGhXO+R/kO2OLCe0eucUEbddaTcdMHHdzcIGHtZSMSQlA+apw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-collection": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-collection/-/react-collection-1.1.4.tgz",
+      "integrity": "sha512-cv4vSf7HttqXilDnAnvINd53OTl1/bjUYVZrkFnA7nwmY9Ob2POUy0WY0sfqBAe1s5FyKsyceQlqiEGPYNTadg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-slot": "1.2.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-compose-refs": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.2.tgz",
+      "integrity": "sha512-z4eqJvfiNnFMHIIvXP3CY57y2WJs5g2v3X0zm9mEJkrkNv4rDxu+sg9Jh8EkXyeqBkB7SOcboo9dMVqhyrACIg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-context": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-context/-/react-context-1.1.2.tgz",
+      "integrity": "sha512-jCi/QKUM2r1Ju5a3J64TH2A5SpKAgh0LpknyqdQ4m6DCV0xJ2HG1xARRwNGPQfi1SLdLWZ1OJz6F4OMBBNiGJA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-dialog": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-dialog/-/react-dialog-1.1.11.tgz",
+      "integrity": "sha512-yI7S1ipkP5/+99qhSI6nthfo/tR6bL6Zgxi/+1UO6qPa6UeM6nlafWcQ65vB4rU2XjgjMfMhI3k9Y5MztA62VQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-dismissable-layer": "1.1.7",
+        "@radix-ui/react-focus-guards": "1.1.2",
+        "@radix-ui/react-focus-scope": "1.1.4",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-portal": "1.1.6",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-slot": "1.2.0",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "aria-hidden": "^1.2.4",
+        "react-remove-scroll": "^2.6.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-direction": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-direction/-/react-direction-1.1.1.tgz",
+      "integrity": "sha512-1UEWRX6jnOA2y4H5WczZ44gOOjTEmlqv1uNW4GAJEO5+bauCBhv8snY65Iw5/VOS/ghKN9gr2KjnLKxrsvoMVw==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-dismissable-layer": {
+      "version": "1.1.7",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-dismissable-layer/-/react-dismissable-layer-1.1.7.tgz",
+      "integrity": "sha512-j5+WBUdhccJsmH5/H0K6RncjDtoALSEr6jbkaZu+bjw6hOPOhHycr6vEUujl+HBK8kjUfWcoCJXxP6e4lUlMZw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-escape-keydown": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-focus-guards": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-focus-guards/-/react-focus-guards-1.1.2.tgz",
+      "integrity": "sha512-fyjAACV62oPV925xFCrH8DR5xWhg9KYtJT4s3u54jxp+L/hbpTY2kIeEFFbFe+a/HCE94zGQMZLIpVTPVZDhaA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-focus-scope": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-focus-scope/-/react-focus-scope-1.1.4.tgz",
+      "integrity": "sha512-r2annK27lIW5w9Ho5NyQgqs0MmgZSTIKXWpVCJaLC1q2kZrZkcqnmHkCHMEmv8XLvsLlurKMPT+kbKkRkm/xVA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-id": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-id/-/react-id-1.1.1.tgz",
+      "integrity": "sha512-kGkGegYIdQsOb4XjsfM97rXsiHaBwco+hFI66oO4s9LU+PLAC5oJ7khdOVFxkhsmlbpUqDAvXw11CluXP+jkHg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-label": {
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-label/-/react-label-2.1.4.tgz",
+      "integrity": "sha512-wy3dqizZnZVV4ja0FNnUhIWNwWdoldXrneEyUcVtLYDAt8ovGS4ridtMAOGgXBBIfggL4BOveVWsjXDORdGEQg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-popper": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-popper/-/react-popper-1.2.4.tgz",
+      "integrity": "sha512-3p2Rgm/a1cK0r/UVkx5F/K9v/EplfjAeIFCGOPYPO4lZ0jtg4iSQXt/YGTSLWaf4x7NG6Z4+uKFcylcTZjeqDA==",
+      "license": "MIT",
+      "dependencies": {
+        "@floating-ui/react-dom": "^2.0.0",
+        "@radix-ui/react-arrow": "1.1.4",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-layout-effect": "1.1.1",
+        "@radix-ui/react-use-rect": "1.1.1",
+        "@radix-ui/react-use-size": "1.1.1",
+        "@radix-ui/rect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-portal": {
+      "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-portal/-/react-portal-1.1.6.tgz",
+      "integrity": "sha512-XmsIl2z1n/TsYFLIdYam2rmFwf9OC/Sh2avkbmVMDuBZIe7hSpM0cYnWPAo7nHOVx8zTuwDZGByfcqLdnzp3Vw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-presence": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-presence/-/react-presence-1.1.4.tgz",
+      "integrity": "sha512-ueDqRbdc4/bkaQT3GIpLQssRlFgWaL/U2z/S31qRwwLWoxHLgry3SIfCwhxeQNbirEUXFa+lq3RL3oBYXtcmIA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-primitive": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-primitive/-/react-primitive-2.1.0.tgz",
+      "integrity": "sha512-/J/FhLdK0zVcILOwt5g+dH4KnkonCtkVJsa2G6JmvbbtZfBEI1gMsO3QMjseL4F/SwfAMt1Vc/0XKYKq+xJ1sw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-slot": "1.2.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-roving-focus": {
+      "version": "1.1.7",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-roving-focus/-/react-roving-focus-1.1.7.tgz",
+      "integrity": "sha512-C6oAg451/fQT3EGbWHbCQjYTtbyjNO1uzQgMzwyivcHT3GKNEmu1q3UuREhN+HzHAVtv3ivMVK08QlC+PkYw9Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-collection": "1.1.4",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-controllable-state": "1.2.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-select": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-select/-/react-select-2.2.2.tgz",
+      "integrity": "sha512-HjkVHtBkuq+r3zUAZ/CvNWUGKPfuicGDbgtZgiQuFmNcV5F+Tgy24ep2nsAW2nFgvhGPJVqeBZa6KyVN0EyrBA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/number": "1.1.1",
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-collection": "1.1.4",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-dismissable-layer": "1.1.7",
+        "@radix-ui/react-focus-guards": "1.1.2",
+        "@radix-ui/react-focus-scope": "1.1.4",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-popper": "1.2.4",
+        "@radix-ui/react-portal": "1.1.6",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-slot": "1.2.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1",
+        "@radix-ui/react-use-previous": "1.1.1",
+        "@radix-ui/react-visually-hidden": "1.2.0",
+        "aria-hidden": "^1.2.4",
+        "react-remove-scroll": "^2.6.3"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-separator": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-separator/-/react-separator-1.1.4.tgz",
+      "integrity": "sha512-2fTm6PSiUm8YPq9W0E4reYuv01EE3aFSzt8edBiXqPHshF8N9+Kymt/k0/R+F3dkY5lQyB/zPtrP82phskLi7w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-slot": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.2.0.tgz",
+      "integrity": "sha512-ujc+V6r0HNDviYqIK3rW4ffgYiZ8g5DEHrGJVk4x7kTlLXRDILnKX9vAUYeIsLOoDpDJ0ujpqMkjH4w2ofuo6w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "1.1.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-tabs": {
+      "version": "1.1.9",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-tabs/-/react-tabs-1.1.9.tgz",
+      "integrity": "sha512-KIjtwciYvquiW/wAFkELZCVnaNLBsYNhTNcvl+zfMAbMhRkcvNuCLXDDd22L0j7tagpzVh/QwbFpwAATg7ILPw==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-direction": "1.1.1",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-roving-focus": "1.1.7",
+        "@radix-ui/react-use-controllable-state": "1.2.2"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-toast": {
+      "version": "1.2.11",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-toast/-/react-toast-1.2.11.tgz",
+      "integrity": "sha512-Ed2mlOmT+tktOsu2NZBK1bCSHh/uqULu1vWOkpQTVq53EoOuZUZw7FInQoDB3uil5wZc2oe0XN9a7uVZB7/6AQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-collection": "1.1.4",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-dismissable-layer": "1.1.7",
+        "@radix-ui/react-portal": "1.1.6",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-use-callback-ref": "1.1.1",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1",
+        "@radix-ui/react-visually-hidden": "1.2.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-tooltip": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-tooltip/-/react-tooltip-1.2.4.tgz",
+      "integrity": "sha512-DyW8VVeeMSSLFvAmnVnCwvI3H+1tpJFHT50r+tdOoMse9XqYDBCcyux8u3G2y+LOpt7fPQ6KKH0mhs+ce1+Z5w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/primitive": "1.1.2",
+        "@radix-ui/react-compose-refs": "1.1.2",
+        "@radix-ui/react-context": "1.1.2",
+        "@radix-ui/react-dismissable-layer": "1.1.7",
+        "@radix-ui/react-id": "1.1.1",
+        "@radix-ui/react-popper": "1.2.4",
+        "@radix-ui/react-portal": "1.1.6",
+        "@radix-ui/react-presence": "1.1.4",
+        "@radix-ui/react-primitive": "2.1.0",
+        "@radix-ui/react-slot": "1.2.0",
+        "@radix-ui/react-use-controllable-state": "1.2.2",
+        "@radix-ui/react-visually-hidden": "1.2.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-callback-ref": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-callback-ref/-/react-use-callback-ref-1.1.1.tgz",
+      "integrity": "sha512-FkBMwD+qbGQeMu1cOHnuGB6x4yzPjho8ap5WtbEJ26umhgqVXbhekKUQO+hZEL1vU92a3wHwdp0HAcqAUF5iDg==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-controllable-state": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-controllable-state/-/react-use-controllable-state-1.2.2.tgz",
+      "integrity": "sha512-BjasUjixPFdS+NKkypcyyN5Pmg83Olst0+c6vGov0diwTEo6mgdqVR6hxcEgFuh4QrAs7Rc+9KuGJ9TVCj0Zzg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-effect-event": "0.0.2",
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-effect-event": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-effect-event/-/react-use-effect-event-0.0.2.tgz",
+      "integrity": "sha512-Qp8WbZOBe+blgpuUT+lw2xheLP8q0oatc9UpmiemEICxGvFLYmHm9QowVZGHtJlGbS6A6yJ3iViad/2cVjnOiA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-escape-keydown": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-escape-keydown/-/react-use-escape-keydown-1.1.1.tgz",
+      "integrity": "sha512-Il0+boE7w/XebUHyBjroE+DbByORGR9KKmITzbR7MyQ4akpORYP/ZmbhAr0DG7RmmBqoOnZdy2QlvajJ2QA59g==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-callback-ref": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-layout-effect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-layout-effect/-/react-use-layout-effect-1.1.1.tgz",
+      "integrity": "sha512-RbJRS4UWQFkzHTTwVymMTUv8EqYhOp8dOOviLj2ugtTiXRaRQS7GLGxZTLL1jWhMeoSCf5zmcZkqTl9IiYfXcQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-previous": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-previous/-/react-use-previous-1.1.1.tgz",
+      "integrity": "sha512-2dHfToCj/pzca2Ck724OZ5L0EVrr3eHRNsG/b3xQJLA2hZpVCS99bLAX+hm1IHXDEnzU6by5z/5MIY794/a8NQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-rect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-rect/-/react-use-rect-1.1.1.tgz",
+      "integrity": "sha512-QTYuDesS0VtuHNNvMh+CjlKJ4LJickCMUAqjlE3+j8w+RlRpwyX3apEQKGFzbZGdo7XNG1tXa+bQqIE7HIXT2w==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/rect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-use-size": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-use-size/-/react-use-size-1.1.1.tgz",
+      "integrity": "sha512-ewrXRDTAqAXlkl6t/fkXWNAhFX9I+CkKlw6zjEwk86RSPKwZr3xpBRso655aqYafwtnbpHLj6toFzmd6xdVptQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-use-layout-effect": "1.1.1"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/react-visually-hidden": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-visually-hidden/-/react-visually-hidden-1.2.0.tgz",
+      "integrity": "sha512-rQj0aAWOpCdCMRbI6pLQm8r7S2BM3YhTa0SzOYD55k+hJA8oo9J+H+9wLM9oMlZWOX/wJWPTzfDfmZkf7LvCfg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-primitive": "2.1.0"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "@types/react-dom": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        },
+        "@types/react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@radix-ui/rect": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/rect/-/rect-1.1.1.tgz",
+      "integrity": "sha512-HPwpGIzkl28mWyZqG52jiqDJ12waP11Pa1lGoiyUkIEuMLBP0oeK/C89esbXrxsky5we7dfd8U58nm0SgAWpVw==",
+      "license": "MIT"
+    },
+    "node_modules/@rtsao/scc": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
+      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@rushstack/eslint-patch": {
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.11.0.tgz",
+      "integrity": "sha512-zxnHvoMQVqewTJr/W4pKjF0bMGiKJv1WX7bSrkl46Hg0QjESbzBROWK0Wg4RphzSOS5Jiy7eFimmM3UgMrMZbQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@standard-schema/utils": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
+      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
+      "license": "MIT"
+    },
+    "node_modules/@swc/counter": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@swc/counter/-/counter-0.1.3.tgz",
+      "integrity": "sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/@swc/helpers": {
+      "version": "0.5.15",
+      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.15.tgz",
+      "integrity": "sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "tslib": "^2.8.0"
+      }
+    },
+    "node_modules/@tanstack/query-core": {
+      "version": "5.74.7",
+      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.74.7.tgz",
+      "integrity": "sha512-X3StkN/Y6KGHndTjJf8H8th7AX4bKfbRpiVhVqevf0QWlxl6DhyJ0TYG3R0LARa/+xqDwzU9mA4pbJxzPCI29A==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      }
+    },
+    "node_modules/@tanstack/react-query": {
+      "version": "5.74.7",
+      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.74.7.tgz",
+      "integrity": "sha512-u4o/RIWnnrq26orGZu2NDPwmVof1vtAiiV6KYUXd49GuK+8HX+gyxoAYqIaZogvCE1cqOuZAhQKcrKGYGkrLxg==",
+      "license": "MIT",
+      "dependencies": {
+        "@tanstack/query-core": "5.74.7"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      },
+      "peerDependencies": {
+        "react": "^18 || ^19"
+      }
+    },
+    "node_modules/@tybys/wasm-util": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@tybys/wasm-util/-/wasm-util-0.9.0.tgz",
+      "integrity": "sha512-6+7nlbMVX/PVDCwaIQ8nTOPveOcFLSt8GcXdx8hD0bt39uWxYT88uXzqTd4fTvqta7oeUJqudepapKNt2DYJFw==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "tslib": "^2.4.0"
+      }
+    },
+    "node_modules/@types/d3-array": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
+      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-color": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
+      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-ease": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
+      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-interpolate": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
+      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-color": "*"
+      }
+    },
+    "node_modules/@types/d3-path": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
+      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-scale": {
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
+      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-time": "*"
+      }
+    },
+    "node_modules/@types/d3-shape": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
+      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-path": "*"
+      }
+    },
+    "node_modules/@types/d3-time": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
+      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-timer": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
+      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
+      "license": "MIT"
+    },
+    "node_modules/@types/estree": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
+      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/json-schema": {
+      "version": "7.0.15",
+      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
+      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/json5": {
+      "version": "0.0.29",
+      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
+      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/node": {
+      "version": "22.15.3",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.3.tgz",
+      "integrity": "sha512-lX7HFZeHf4QG/J7tBZqrCAXwz9J5RD56Y6MpP0eJkka8p+K0RY/yBTW7CYFJ4VGCclxqOLKmiGP5juQc6MKgcw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~6.21.0"
+      }
+    },
+    "node_modules/@types/react": {
+      "version": "19.1.2",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.2.tgz",
+      "integrity": "sha512-oxLPMytKchWGbnQM9O7D67uPa9paTNxO7jVoNMXgkkErULBPhPARCfkKL9ytcIJJRGjbsVwW4ugJzyFFvm/Tiw==",
+      "devOptional": true,
+      "license": "MIT",
+      "dependencies": {
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@types/react-dom": {
+      "version": "19.1.2",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.2.tgz",
+      "integrity": "sha512-XGJkWF41Qq305SKWEILa1O8vzhb3aOo3ogBlSmiqNko/WmRb6QIaweuZCXjKygVDXpzXb5wyxKTSOsmkuqj+Qw==",
+      "devOptional": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^19.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/eslint-plugin": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.31.0.tgz",
+      "integrity": "sha512-evaQJZ/J/S4wisevDvC1KFZkPzRetH8kYZbkgcTRyql3mcKsf+ZFDV1BVWUGTCAW5pQHoqn5gK5b8kn7ou9aFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/regexpp": "^4.10.0",
+        "@typescript-eslint/scope-manager": "8.31.0",
+        "@typescript-eslint/type-utils": "8.31.0",
+        "@typescript-eslint/utils": "8.31.0",
+        "@typescript-eslint/visitor-keys": "8.31.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.3.1",
+        "natural-compare": "^1.4.0",
+        "ts-api-utils": "^2.0.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/parser": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.31.0.tgz",
+      "integrity": "sha512-67kYYShjBR0jNI5vsf/c3WG4u+zDnCTHTPqVMQguffaWWFs7artgwKmfwdifl+r6XyM5LYLas/dInj2T0SgJyw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/scope-manager": "8.31.0",
+        "@typescript-eslint/types": "8.31.0",
+        "@typescript-eslint/typescript-estree": "8.31.0",
+        "@typescript-eslint/visitor-keys": "8.31.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.31.0.tgz",
+      "integrity": "sha512-knO8UyF78Nt8O/B64i7TlGXod69ko7z6vJD9uhSlm0qkAbGeRUSudcm0+K/4CrRjrpiHfBCjMWlc08Vav1xwcw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.31.0",
+        "@typescript-eslint/visitor-keys": "8.31.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.31.0.tgz",
+      "integrity": "sha512-DJ1N1GdjI7IS7uRlzJuEDCgDQix3ZVYVtgeWEyhyn4iaoitpMBX6Ndd488mXSx0xah/cONAkEaYyylDyAeHMHg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/typescript-estree": "8.31.0",
+        "@typescript-eslint/utils": "8.31.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^2.0.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.31.0.tgz",
+      "integrity": "sha512-Ch8oSjVyYyJxPQk8pMiP2FFGYatqXQfQIaMp+TpuuLlDachRWpUAeEu1u9B/v/8LToehUIWyiKcA/w5hUFRKuQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.31.0.tgz",
+      "integrity": "sha512-xLmgn4Yl46xi6aDSZ9KkyfhhtnYI15/CvHbpOy/eR5NWhK/BK8wc709KKwhAR0m4ZKRP7h07bm4BWUYOCuRpQQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.31.0",
+        "@typescript-eslint/visitor-keys": "8.31.0",
+        "debug": "^4.3.4",
+        "fast-glob": "^3.3.2",
+        "is-glob": "^4.0.3",
+        "minimatch": "^9.0.4",
+        "semver": "^7.6.0",
+        "ts-api-utils": "^2.0.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.31.0.tgz",
+      "integrity": "sha512-qi6uPLt9cjTFxAb1zGNgTob4x9ur7xC6mHQJ8GwEzGMGE9tYniublmJaowOJ9V2jUzxrltTPfdG2nKlWsq0+Ww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@typescript-eslint/scope-manager": "8.31.0",
+        "@typescript-eslint/types": "8.31.0",
+        "@typescript-eslint/typescript-estree": "8.31.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "8.31.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.31.0.tgz",
+      "integrity": "sha512-QcGHmlRHWOl93o64ZUMNewCdwKGU6WItOU52H0djgNmn1EOrhVudrDzXz4OycCRSCPwFCDrE2iIt5vmuUdHxuQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.31.0",
+        "eslint-visitor-keys": "^4.2.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@unrs/resolver-binding-darwin-arm64": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-arm64/-/resolver-binding-darwin-arm64-1.7.2.tgz",
+      "integrity": "sha512-vxtBno4xvowwNmO/ASL0Y45TpHqmNkAaDtz4Jqb+clmcVSSl8XCG/PNFFkGsXXXS6AMjP+ja/TtNCFFa1QwLRg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-darwin-x64": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-darwin-x64/-/resolver-binding-darwin-x64-1.7.2.tgz",
+      "integrity": "sha512-qhVa8ozu92C23Hsmv0BF4+5Dyyd5STT1FolV4whNgbY6mj3kA0qsrGPe35zNR3wAN7eFict3s4Rc2dDTPBTuFQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-freebsd-x64": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-freebsd-x64/-/resolver-binding-freebsd-x64-1.7.2.tgz",
+      "integrity": "sha512-zKKdm2uMXqLFX6Ac7K5ElnnG5VIXbDlFWzg4WJ8CGUedJryM5A3cTgHuGMw1+P5ziV8CRhnSEgOnurTI4vpHpg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm-gnueabihf": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-gnueabihf/-/resolver-binding-linux-arm-gnueabihf-1.7.2.tgz",
+      "integrity": "sha512-8N1z1TbPnHH+iDS/42GJ0bMPLiGK+cUqOhNbMKtWJ4oFGzqSJk/zoXFzcQkgtI63qMcUI7wW1tq2usZQSb2jxw==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm-musleabihf": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm-musleabihf/-/resolver-binding-linux-arm-musleabihf-1.7.2.tgz",
+      "integrity": "sha512-tjYzI9LcAXR9MYd9rO45m1s0B/6bJNuZ6jeOxo1pq1K6OBuRMMmfyvJYval3s9FPPGmrldYA3mi4gWDlWuTFGA==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm64-gnu": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-gnu/-/resolver-binding-linux-arm64-gnu-1.7.2.tgz",
+      "integrity": "sha512-jon9M7DKRLGZ9VYSkFMflvNqu9hDtOCEnO2QAryFWgT6o6AXU8du56V7YqnaLKr6rAbZBWYsYpikF226v423QA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-arm64-musl": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-arm64-musl/-/resolver-binding-linux-arm64-musl-1.7.2.tgz",
+      "integrity": "sha512-c8Cg4/h+kQ63pL43wBNaVMmOjXI/X62wQmru51qjfTvI7kmCy5uHTJvK/9LrF0G8Jdx8r34d019P1DVJmhXQpA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-ppc64-gnu": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-ppc64-gnu/-/resolver-binding-linux-ppc64-gnu-1.7.2.tgz",
+      "integrity": "sha512-A+lcwRFyrjeJmv3JJvhz5NbcCkLQL6Mk16kHTNm6/aGNc4FwPHPE4DR9DwuCvCnVHvF5IAd9U4VIs/VvVir5lg==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-riscv64-gnu": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-gnu/-/resolver-binding-linux-riscv64-gnu-1.7.2.tgz",
+      "integrity": "sha512-hQQ4TJQrSQW8JlPm7tRpXN8OCNP9ez7PajJNjRD1ZTHQAy685OYqPrKjfaMw/8LiHCt8AZ74rfUVHP9vn0N69Q==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-riscv64-musl": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-riscv64-musl/-/resolver-binding-linux-riscv64-musl-1.7.2.tgz",
+      "integrity": "sha512-NoAGbiqrxtY8kVooZ24i70CjLDlUFI7nDj3I9y54U94p+3kPxwd2L692YsdLa+cqQ0VoqMWoehDFp21PKRUoIQ==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-s390x-gnu": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-s390x-gnu/-/resolver-binding-linux-s390x-gnu-1.7.2.tgz",
+      "integrity": "sha512-KaZByo8xuQZbUhhreBTW+yUnOIHUsv04P8lKjQ5otiGoSJ17ISGYArc+4vKdLEpGaLbemGzr4ZeUbYQQsLWFjA==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-x64-gnu": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-gnu/-/resolver-binding-linux-x64-gnu-1.7.2.tgz",
+      "integrity": "sha512-dEidzJDubxxhUCBJ/SHSMJD/9q7JkyfBMT77Px1npl4xpg9t0POLvnWywSk66BgZS/b2Hy9Y1yFaoMTFJUe9yg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-linux-x64-musl": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-linux-x64-musl/-/resolver-binding-linux-x64-musl-1.7.2.tgz",
+      "integrity": "sha512-RvP+Ux3wDjmnZDT4XWFfNBRVG0fMsc+yVzNFUqOflnDfZ9OYujv6nkh+GOr+watwrW4wdp6ASfG/e7bkDradsw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-wasm32-wasi": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-wasm32-wasi/-/resolver-binding-wasm32-wasi-1.7.2.tgz",
+      "integrity": "sha512-y797JBmO9IsvXVRCKDXOxjyAE4+CcZpla2GSoBQ33TVb3ILXuFnMrbR/QQZoauBYeOFuu4w3ifWLw52sdHGz6g==",
+      "cpu": [
+        "wasm32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@napi-rs/wasm-runtime": "^0.2.9"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/@unrs/resolver-binding-win32-arm64-msvc": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-arm64-msvc/-/resolver-binding-win32-arm64-msvc-1.7.2.tgz",
+      "integrity": "sha512-gtYTh4/VREVSLA+gHrfbWxaMO/00y+34htY7XpioBTy56YN2eBjkPrY1ML1Zys89X3RJDKVaogzwxlM1qU7egg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-win32-ia32-msvc": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-ia32-msvc/-/resolver-binding-win32-ia32-msvc-1.7.2.tgz",
+      "integrity": "sha512-Ywv20XHvHTDRQs12jd3MY8X5C8KLjDbg/jyaal/QLKx3fAShhJyD4blEANInsjxW3P7isHx1Blt56iUDDJO3jg==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@unrs/resolver-binding-win32-x64-msvc": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/@unrs/resolver-binding-win32-x64-msvc/-/resolver-binding-win32-x64-msvc-1.7.2.tgz",
+      "integrity": "sha512-friS8NEQfHaDbkThxopGk+LuE5v3iY0StruifjQEt7SLbA46OnfgMO15sOTkbpJkol6RB+1l1TYPXh0sCddpvA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/acorn": {
+      "version": "8.14.1",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
+      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-jsx": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/any-promise": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
+      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
+      "license": "MIT"
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/arg": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
+      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
+      "license": "MIT"
+    },
+    "node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true,
+      "license": "Python-2.0"
+    },
+    "node_modules/aria-hidden": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/aria-hidden/-/aria-hidden-1.2.4.tgz",
+      "integrity": "sha512-y+CcFFwelSXpLZk/7fMB2mUbGtX9lKycf1MWJ7CaTIERyitVlyQx6C+sxcROU2BAJ24OiZyK+8wj2i8AlBoS3A==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/aria-query": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
+      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/array-buffer-byte-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
+      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "is-array-buffer": "^3.0.5"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array-includes": {
+      "version": "3.1.8",
+      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.8.tgz",
+      "integrity": "sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.4",
+        "is-string": "^1.0.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.findlast": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
+      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.findlastindex": {
+      "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
+      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.9",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "es-shim-unscopables": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.flat": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
+      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.flatmap": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
+      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/array.prototype.tosorted": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
+      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.3",
+        "es-errors": "^1.3.0",
+        "es-shim-unscopables": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/arraybuffer.prototype.slice": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
+      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.1",
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "is-array-buffer": "^3.0.4"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/ast-types-flow": {
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
+      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/async-function": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
+      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
+      "license": "MIT"
+    },
+    "node_modules/autoprefixer": {
+      "version": "10.4.21",
+      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
+      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "browserslist": "^4.24.4",
+        "caniuse-lite": "^1.0.30001702",
+        "fraction.js": "^4.3.7",
+        "normalize-range": "^0.1.2",
+        "picocolors": "^1.1.1",
+        "postcss-value-parser": "^4.2.0"
+      },
+      "bin": {
+        "autoprefixer": "bin/autoprefixer"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      },
+      "peerDependencies": {
+        "postcss": "^8.1.0"
+      }
+    },
+    "node_modules/available-typed-arrays": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
+      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "possible-typed-array-names": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/axe-core": {
+      "version": "4.10.3",
+      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
+      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
+      "dev": true,
+      "license": "MPL-2.0",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/axios": {
+      "version": "1.9.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
+      "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
+      "license": "MIT",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.0",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/axobject-query": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
+      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "license": "MIT"
+    },
+    "node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
+      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.24.4",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
+      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001688",
+        "electron-to-chromium": "^1.5.73",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.1"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/busboy": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
+      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
+      "dependencies": {
+        "streamsearch": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=10.16.0"
+      }
+    },
+    "node_modules/call-bind": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
+      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.0",
+        "es-define-property": "^1.0.0",
+        "get-intrinsic": "^1.2.4",
+        "set-function-length": "^1.2.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/camelcase-css": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
+      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001715",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001715.tgz",
+      "integrity": "sha512-7ptkFGMm2OAOgvZpwgA4yjQ5SQbrNVGdRjzH0pBdy1Fasvcr+KAeECmbCAECzTuDuoX0FCY8KzUxjf9+9kfZEw==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/chokidar/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/class-variance-authority": {
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/class-variance-authority/-/class-variance-authority-0.7.1.tgz",
+      "integrity": "sha512-Ka+9Trutv7G8M6WT6SeiRWz792K5qEqIGEGzXKhAE6xOWAY6pPH8U+9IY3oCMv6kqTmLsv7Xh/2w2RigkePMsg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "clsx": "^2.1.1"
+      },
+      "funding": {
+        "url": "https://polar.sh/cva"
+      }
+    },
+    "node_modules/client-only": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
+      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
+      "license": "MIT"
+    },
+    "node_modules/clsx": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/cmdk": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/cmdk/-/cmdk-1.1.1.tgz",
+      "integrity": "sha512-Vsv7kFaXm+ptHDMZ7izaRsP70GgrW9NBNGswt9OZaVBLlE0SNpDq8eu/VGXyF9r7M0azK3Wy7OlYXsuyYLFzHg==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-compose-refs": "^1.1.1",
+        "@radix-ui/react-dialog": "^1.1.6",
+        "@radix-ui/react-id": "^1.1.0",
+        "@radix-ui/react-primitive": "^2.0.2"
+      },
+      "peerDependencies": {
+        "react": "^18 || ^19 || ^19.0.0-rc",
+        "react-dom": "^18 || ^19 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/color": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
+      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-convert": "^2.0.1",
+        "color-string": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=12.5.0"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "license": "MIT"
+    },
+    "node_modules/color-string": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
+      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "color-name": "^1.0.0",
+        "simple-swizzle": "^0.2.2"
+      }
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/commander": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cookie": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
+      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/cssesc": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
+      "license": "MIT",
+      "bin": {
+        "cssesc": "bin/cssesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/csstype": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
+      "license": "MIT"
+    },
+    "node_modules/d3-array": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
+      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
+      "license": "ISC",
+      "dependencies": {
+        "internmap": "1 - 2"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-color": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
+      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-ease": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
+      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-format": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
+      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-interpolate": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
+      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-color": "1 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-path": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
+      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-scale": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
+      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-array": "2.10.0 - 3",
+        "d3-format": "1 - 3",
+        "d3-interpolate": "1.2.0 - 3",
+        "d3-time": "2.1.1 - 3",
+        "d3-time-format": "2 - 4"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-shape": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
+      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-path": "^3.1.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-time": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
+      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-array": "2 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-time-format": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
+      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-time": "1 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-timer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
+      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/damerau-levenshtein": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
+      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
+      "dev": true,
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/data-view-buffer": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
+      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/data-view-byte-length": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
+      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/inspect-js"
+      }
+    },
+    "node_modules/data-view-byte-offset": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
+      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-data-view": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/date-fns": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
+      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/kossnocorp"
+      }
+    },
+    "node_modules/date-fns-jalali": {
+      "version": "4.1.0-0",
+      "resolved": "https://registry.npmjs.org/date-fns-jalali/-/date-fns-jalali-4.1.0-0.tgz",
+      "integrity": "sha512-hTIP/z+t+qKwBDcmmsnmjWTduxCg+5KfdqWQvb2X/8C9+knYY6epN/pfxdDuyVlSVeFz0sM5eEfwIUQ70U4ckg==",
+      "license": "MIT"
+    },
+    "node_modules/debug": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
+      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
+      "license": "MIT"
+    },
+    "node_modules/deep-is": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
+      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/define-data-property": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
+      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/define-properties": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
+      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.0.1",
+        "has-property-descriptors": "^1.0.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/detect-libc": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/detect-node-es": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/detect-node-es/-/detect-node-es-1.1.0.tgz",
+      "integrity": "sha512-ypdmJU/TbBby2Dxibuv7ZLW3Bs1QEmM7nHjEANfohJLvE0XVujisn1qPJcZxg+qDucsr+bP6fLD1rPS3AhJ7EQ==",
+      "license": "MIT"
+    },
+    "node_modules/didyoumean": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
+      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/dlv": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
+      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
+      "license": "MIT"
+    },
+    "node_modules/doctrine": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
+      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/dom-helpers": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
+      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.8.7",
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "license": "MIT"
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.143",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.143.tgz",
+      "integrity": "sha512-QqklJMOFBMqe46k8iIOwA9l2hz57V2OKMmP5eSWcUvwx+mASAsbU+wkF1pHjn9ZVSBPrsYWr4/W/95y5SwYg2g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/embla-carousel": {
+      "version": "8.6.0",
+      "resolved": "https://registry.npmjs.org/embla-carousel/-/embla-carousel-8.6.0.tgz",
+      "integrity": "sha512-SjWyZBHJPbqxHOzckOfo8lHisEaJWmwd23XppYFYVh10bU66/Pn5tkVkbkCMZVdbUE5eTCI2nD8OyIP4Z+uwkA==",
+      "license": "MIT"
+    },
+    "node_modules/embla-carousel-react": {
+      "version": "8.6.0",
+      "resolved": "https://registry.npmjs.org/embla-carousel-react/-/embla-carousel-react-8.6.0.tgz",
+      "integrity": "sha512-0/PjqU7geVmo6F734pmPqpyHqiM99olvyecY7zdweCw+6tKEXnrE90pBiBbMMU8s5tICemzpQ3hi5EpxzGW+JA==",
+      "license": "MIT",
+      "dependencies": {
+        "embla-carousel": "8.6.0",
+        "embla-carousel-reactive-utils": "8.6.0"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17.0.1 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/embla-carousel-reactive-utils": {
+      "version": "8.6.0",
+      "resolved": "https://registry.npmjs.org/embla-carousel-reactive-utils/-/embla-carousel-reactive-utils-8.6.0.tgz",
+      "integrity": "sha512-fMVUDUEx0/uIEDM0Mz3dHznDhfX+znCCDCeIophYb1QGVM7YThSWX+wz11zlYwWFOr74b4QLGg0hrGPJeG2s4A==",
+      "license": "MIT",
+      "peerDependencies": {
+        "embla-carousel": "8.6.0"
+      }
+    },
+    "node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "license": "MIT"
+    },
+    "node_modules/es-abstract": {
+      "version": "1.23.9",
+      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.23.9.tgz",
+      "integrity": "sha512-py07lI0wjxAC/DcfK1S6G7iANonniZwTISvdPzk9hzeH0IZIshbuuFxLIU96OyF89Yb9hiqWn8M/bY83KY5vzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.2",
+        "arraybuffer.prototype.slice": "^1.0.4",
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "data-view-buffer": "^1.0.2",
+        "data-view-byte-length": "^1.0.2",
+        "data-view-byte-offset": "^1.0.1",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "es-set-tostringtag": "^2.1.0",
+        "es-to-primitive": "^1.3.0",
+        "function.prototype.name": "^1.1.8",
+        "get-intrinsic": "^1.2.7",
+        "get-proto": "^1.0.0",
+        "get-symbol-description": "^1.1.0",
+        "globalthis": "^1.0.4",
+        "gopd": "^1.2.0",
+        "has-property-descriptors": "^1.0.2",
+        "has-proto": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "internal-slot": "^1.1.0",
+        "is-array-buffer": "^3.0.5",
+        "is-callable": "^1.2.7",
+        "is-data-view": "^1.0.2",
+        "is-regex": "^1.2.1",
+        "is-shared-array-buffer": "^1.0.4",
+        "is-string": "^1.1.1",
+        "is-typed-array": "^1.1.15",
+        "is-weakref": "^1.1.0",
+        "math-intrinsics": "^1.1.0",
+        "object-inspect": "^1.13.3",
+        "object-keys": "^1.1.1",
+        "object.assign": "^4.1.7",
+        "own-keys": "^1.0.1",
+        "regexp.prototype.flags": "^1.5.3",
+        "safe-array-concat": "^1.1.3",
+        "safe-push-apply": "^1.0.0",
+        "safe-regex-test": "^1.1.0",
+        "set-proto": "^1.0.0",
+        "string.prototype.trim": "^1.2.10",
+        "string.prototype.trimend": "^1.0.9",
+        "string.prototype.trimstart": "^1.0.8",
+        "typed-array-buffer": "^1.0.3",
+        "typed-array-byte-length": "^1.0.3",
+        "typed-array-byte-offset": "^1.0.4",
+        "typed-array-length": "^1.0.7",
+        "unbox-primitive": "^1.1.0",
+        "which-typed-array": "^1.1.18"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-iterator-helpers": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
+      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.6",
+        "es-errors": "^1.3.0",
+        "es-set-tostringtag": "^2.0.3",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.6",
+        "globalthis": "^1.0.4",
+        "gopd": "^1.2.0",
+        "has-property-descriptors": "^1.0.2",
+        "has-proto": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "internal-slot": "^1.1.0",
+        "iterator.prototype": "^1.1.4",
+        "safe-array-concat": "^1.1.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-set-tostringtag": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
+      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-shim-unscopables": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
+      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-to-primitive": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
+      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7",
+        "is-date-object": "^1.0.5",
+        "is-symbol": "^1.0.4"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint": {
+      "version": "9.25.1",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.25.1.tgz",
+      "integrity": "sha512-E6Mtz9oGQWDCpV12319d59n4tx9zOTXSTmc8BLVxBx+G/0RdM5MvEEJLU9c0+aleoePYYgVTOsRblx433qmhWQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.2.0",
+        "@eslint-community/regexpp": "^4.12.1",
+        "@eslint/config-array": "^0.20.0",
+        "@eslint/config-helpers": "^0.2.1",
+        "@eslint/core": "^0.13.0",
+        "@eslint/eslintrc": "^3.3.1",
+        "@eslint/js": "9.25.1",
+        "@eslint/plugin-kit": "^0.2.8",
+        "@humanfs/node": "^0.16.6",
+        "@humanwhocodes/module-importer": "^1.0.1",
+        "@humanwhocodes/retry": "^0.4.2",
+        "@types/estree": "^1.0.6",
+        "@types/json-schema": "^7.0.15",
+        "ajv": "^6.12.4",
+        "chalk": "^4.0.0",
+        "cross-spawn": "^7.0.6",
+        "debug": "^4.3.2",
+        "escape-string-regexp": "^4.0.0",
+        "eslint-scope": "^8.3.0",
+        "eslint-visitor-keys": "^4.2.0",
+        "espree": "^10.3.0",
+        "esquery": "^1.5.0",
+        "esutils": "^2.0.2",
+        "fast-deep-equal": "^3.1.3",
+        "file-entry-cache": "^8.0.0",
+        "find-up": "^5.0.0",
+        "glob-parent": "^6.0.2",
+        "ignore": "^5.2.0",
+        "imurmurhash": "^0.1.4",
+        "is-glob": "^4.0.0",
+        "json-stable-stringify-without-jsonify": "^1.0.1",
+        "lodash.merge": "^4.6.2",
+        "minimatch": "^3.1.2",
+        "natural-compare": "^1.4.0",
+        "optionator": "^0.9.3"
+      },
+      "bin": {
+        "eslint": "bin/eslint.js"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://eslint.org/donate"
+      },
+      "peerDependencies": {
+        "jiti": "*"
+      },
+      "peerDependenciesMeta": {
+        "jiti": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-config-next": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/eslint-config-next/-/eslint-config-next-15.3.1.tgz",
+      "integrity": "sha512-GnmyVd9TE/Ihe3RrvcafFhXErErtr2jS0JDeCSp3vWvy86AXwHsRBt0E3MqP/m8ACS1ivcsi5uaqjbhsG18qKw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@next/eslint-plugin-next": "15.3.1",
+        "@rushstack/eslint-patch": "^1.10.3",
+        "@typescript-eslint/eslint-plugin": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
+        "@typescript-eslint/parser": "^5.4.2 || ^6.0.0 || ^7.0.0 || ^8.0.0",
+        "eslint-import-resolver-node": "^0.3.6",
+        "eslint-import-resolver-typescript": "^3.5.2",
+        "eslint-plugin-import": "^2.31.0",
+        "eslint-plugin-jsx-a11y": "^6.10.0",
+        "eslint-plugin-react": "^7.37.0",
+        "eslint-plugin-react-hooks": "^5.0.0"
+      },
+      "peerDependencies": {
+        "eslint": "^7.23.0 || ^8.0.0 || ^9.0.0",
+        "typescript": ">=3.3.1"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-import-resolver-node": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
+      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^3.2.7",
+        "is-core-module": "^2.13.0",
+        "resolve": "^1.22.4"
+      }
+    },
+    "node_modules/eslint-import-resolver-node/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-import-resolver-typescript": {
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/eslint-import-resolver-typescript/-/eslint-import-resolver-typescript-3.10.1.tgz",
+      "integrity": "sha512-A1rHYb06zjMGAxdLSkN2fXPBwuSaQ0iO5M/hdyS0Ajj1VBaRp0sPD3dn1FhME3c/JluGFbwSxyCfqdSbtQLAHQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "@nolyfill/is-core-module": "1.0.39",
+        "debug": "^4.4.0",
+        "get-tsconfig": "^4.10.0",
+        "is-bun-module": "^2.0.0",
+        "stable-hash": "^0.0.5",
+        "tinyglobby": "^0.2.13",
+        "unrs-resolver": "^1.6.2"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint-import-resolver-typescript"
+      },
+      "peerDependencies": {
+        "eslint": "*",
+        "eslint-plugin-import": "*",
+        "eslint-plugin-import-x": "*"
+      },
+      "peerDependenciesMeta": {
+        "eslint-plugin-import": {
+          "optional": true
+        },
+        "eslint-plugin-import-x": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-module-utils": {
+      "version": "2.12.0",
+      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.0.tgz",
+      "integrity": "sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^3.2.7"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependenciesMeta": {
+        "eslint": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-module-utils/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-plugin-import": {
+      "version": "2.31.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.31.0.tgz",
+      "integrity": "sha512-ixmkI62Rbc2/w8Vfxyh1jQRTdRTF52VxwRVHl/ykPAmqG+Nb7/kNn+byLP0LxPgI7zWA16Jt82SybJInmMia3A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@rtsao/scc": "^1.1.0",
+        "array-includes": "^3.1.8",
+        "array.prototype.findlastindex": "^1.2.5",
+        "array.prototype.flat": "^1.3.2",
+        "array.prototype.flatmap": "^1.3.2",
+        "debug": "^3.2.7",
+        "doctrine": "^2.1.0",
+        "eslint-import-resolver-node": "^0.3.9",
+        "eslint-module-utils": "^2.12.0",
+        "hasown": "^2.0.2",
+        "is-core-module": "^2.15.1",
+        "is-glob": "^4.0.3",
+        "minimatch": "^3.1.2",
+        "object.fromentries": "^2.0.8",
+        "object.groupby": "^1.0.3",
+        "object.values": "^1.2.0",
+        "semver": "^6.3.1",
+        "string.prototype.trimend": "^1.0.8",
+        "tsconfig-paths": "^3.15.0"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependencies": {
+        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
+      }
+    },
+    "node_modules/eslint-plugin-import/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
+    "node_modules/eslint-plugin-import/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/eslint-plugin-jsx-a11y": {
+      "version": "6.10.2",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
+      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "aria-query": "^5.3.2",
+        "array-includes": "^3.1.8",
+        "array.prototype.flatmap": "^1.3.2",
+        "ast-types-flow": "^0.0.8",
+        "axe-core": "^4.10.0",
+        "axobject-query": "^4.1.0",
+        "damerau-levenshtein": "^1.0.8",
+        "emoji-regex": "^9.2.2",
+        "hasown": "^2.0.2",
+        "jsx-ast-utils": "^3.3.5",
+        "language-tags": "^1.0.9",
+        "minimatch": "^3.1.2",
+        "object.fromentries": "^2.0.8",
+        "safe-regex-test": "^1.0.3",
+        "string.prototype.includes": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependencies": {
+        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
+      }
+    },
+    "node_modules/eslint-plugin-react": {
+      "version": "7.37.5",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
+      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-includes": "^3.1.8",
+        "array.prototype.findlast": "^1.2.5",
+        "array.prototype.flatmap": "^1.3.3",
+        "array.prototype.tosorted": "^1.1.4",
+        "doctrine": "^2.1.0",
+        "es-iterator-helpers": "^1.2.1",
+        "estraverse": "^5.3.0",
+        "hasown": "^2.0.2",
+        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
+        "minimatch": "^3.1.2",
+        "object.entries": "^1.1.9",
+        "object.fromentries": "^2.0.8",
+        "object.values": "^1.2.1",
+        "prop-types": "^15.8.1",
+        "resolve": "^2.0.0-next.5",
+        "semver": "^6.3.1",
+        "string.prototype.matchall": "^4.0.12",
+        "string.prototype.repeat": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      },
+      "peerDependencies": {
+        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
+      }
+    },
+    "node_modules/eslint-plugin-react-hooks": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
+      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
+      }
+    },
+    "node_modules/eslint-plugin-react/node_modules/resolve": {
+      "version": "2.0.0-next.5",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
+      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.13.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/eslint-plugin-react/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/eslint-scope": {
+      "version": "8.3.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
+      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-visitor-keys": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
+      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/espree": {
+      "version": "10.3.0",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
+      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "acorn": "^8.14.0",
+        "acorn-jsx": "^5.3.2",
+        "eslint-visitor-keys": "^4.2.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/esquery": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
+      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "estraverse": "^5.1.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/esrecurse": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
+      "license": "MIT"
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-equals": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
+      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/fast-glob": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
+      "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-levenshtein": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+      "license": "ISC",
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
+    "node_modules/file-entry-cache": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
+      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flat-cache": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=16.0.0"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
+      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^6.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/flat-cache": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
+      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flatted": "^3.2.9",
+        "keyv": "^4.5.4"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/flatted": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.9",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
+      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/for-each": {
+      "version": "0.3.5",
+      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
+      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/foreground-child": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
+      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.6",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
+      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "es-set-tostringtag": "^2.1.0",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fraction.js": {
+      "version": "4.3.7",
+      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
+      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "type": "patreon",
+        "url": "https://github.com/sponsors/rawify"
+      }
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/function.prototype.name": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
+      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "functions-have-names": "^1.2.3",
+        "hasown": "^2.0.2",
+        "is-callable": "^1.2.7"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/functions-have-names": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
+      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-nonce": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-nonce/-/get-nonce-1.0.1.tgz",
+      "integrity": "sha512-FJhYRoDaiatfEkUK8HKlicmu/3SGFD51q3itKDGoSTysQJBnfOcxU5GxnhE1E6soB76MbT0MBtnKJuXyAx+96Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/get-symbol-description": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
+      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-tsconfig": {
+      "version": "4.10.0",
+      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.0.tgz",
+      "integrity": "sha512-kGzZ3LWWQcGIAmg6iWvXn0ei6WDtV26wzHRMwDSzmAbcXrTEXxHy6IehI6/4eT6VRKyMP1eF1VqwrVUmE/LR7A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "resolve-pkg-maps": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
+      }
+    },
+    "node_modules/glob": {
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/glob/node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/glob/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/globals": {
+      "version": "14.0.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
+      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/globalthis": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
+      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-properties": "^1.2.1",
+        "gopd": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/gsap": {
+      "version": "3.12.7",
+      "resolved": "https://registry.npmjs.org/gsap/-/gsap-3.12.7.tgz",
+      "integrity": "sha512-V4GsyVamhmKefvcAKaoy0h6si0xX7ogwBoBSs2CTJwt7luW0oZzC0LhdkyuKV8PJAXr7Yaj8pMjCKD4GJ+eEMg==",
+      "license": "Standard 'no charge' license: https://gsap.com/standard-license. Club GSAP members get more: https://gsap.com/licensing/. Why GreenSock doesn't employ an MIT license: https://gsap.com/why-license/"
+    },
+    "node_modules/has-bigints": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
+      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-property-descriptors": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
+      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-define-property": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-proto": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
+      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-tostringtag": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
+      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
+      "license": "MIT",
+      "dependencies": {
+        "has-symbols": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ignore": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/import-fresh": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
+      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/input-otp": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/input-otp/-/input-otp-1.4.2.tgz",
+      "integrity": "sha512-l3jWwYNvrEa6NTCt7BECfCm48GvwuZzkoeG3gBL2w4CHeOXW3eKFmf9UNYkNfYc3mxMrthMnxjIE07MT0zLBQA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/internal-slot": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
+      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "hasown": "^2.0.2",
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/internmap": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
+      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/is-array-buffer": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
+      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-arrayish": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
+      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
+      "license": "MIT",
+      "optional": true
+    },
+    "node_modules/is-async-function": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
+      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "async-function": "^1.0.0",
+        "call-bound": "^1.0.3",
+        "get-proto": "^1.0.1",
+        "has-tostringtag": "^1.0.2",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-bigint": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
+      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-bigints": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+      "license": "MIT",
+      "dependencies": {
+        "binary-extensions": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-boolean-object": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
+      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-bun-module": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-bun-module/-/is-bun-module-2.0.0.tgz",
+      "integrity": "sha512-gNCGbnnnnFAUGKeZ9PdbyeGYJqewpmc2aKHUEMO5nQPWU9lOmv7jcmQIv+qHD8fXW6W7qfuCwX4rY9LNRjXrkQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.7.1"
+      }
+    },
+    "node_modules/is-callable": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
+      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-data-view": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
+      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "get-intrinsic": "^1.2.6",
+        "is-typed-array": "^1.1.13"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-date-object": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
+      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-finalizationregistry": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
+      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-generator-function": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
+      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-proto": "^1.0.0",
+        "has-tostringtag": "^1.0.2",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "license": "MIT",
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-map": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
+      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-number-object": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
+      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-regex": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
+      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-set": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
+      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-shared-array-buffer": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
+      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-string": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
+      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-symbol": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
+      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "has-symbols": "^1.1.0",
+        "safe-regex-test": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-typed-array": {
+      "version": "1.1.15",
+      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
+      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "which-typed-array": "^1.1.16"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakmap": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
+      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakref": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
+      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-weakset": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
+      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "get-intrinsic": "^1.2.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/isarray": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
+      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "license": "ISC"
+    },
+    "node_modules/iterator.prototype": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
+      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.6",
+        "get-proto": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "set-function-name": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/jackspeak": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
+      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/jiti": {
+      "version": "1.21.7",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
+      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
+      "license": "MIT",
+      "bin": {
+        "jiti": "bin/jiti.js"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-stable-stringify-without-jsonify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
+      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.0"
+      },
+      "bin": {
+        "json5": "lib/cli.js"
+      }
+    },
+    "node_modules/jsx-ast-utils": {
+      "version": "3.3.5",
+      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
+      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-includes": "^3.1.6",
+        "array.prototype.flat": "^1.3.1",
+        "object.assign": "^4.1.4",
+        "object.values": "^1.1.6"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "json-buffer": "3.0.1"
+      }
+    },
+    "node_modules/language-subtag-registry": {
+      "version": "0.3.23",
+      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
+      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
+      "dev": true,
+      "license": "CC0-1.0"
+    },
+    "node_modules/language-tags": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
+      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "language-subtag-registry": "^0.3.20"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/levn": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/lilconfig": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
+      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antonk52"
+      }
+    },
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "license": "MIT"
+    },
+    "node_modules/locate-path": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
+      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/loose-envify": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^3.0.0 || ^4.0.0"
+      },
+      "bin": {
+        "loose-envify": "cli.js"
+      }
+    },
+    "node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "license": "ISC"
+    },
+    "node_modules/lucide-react": {
+      "version": "0.503.0",
+      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.503.0.tgz",
+      "integrity": "sha512-HGGkdlPWQ0vTF8jJ5TdIqhQXZi6uh3LnNgfZ8MHiuxFfX3RZeA79r2MW2tHAZKlAVfoNE8esm3p+O6VkIvpj6w==",
+      "license": "ISC",
+      "peerDependencies": {
+        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/mz": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
+      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0",
+        "object-assign": "^4.0.1",
+        "thenify-all": "^1.0.0"
+      }
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/napi-postinstall": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/napi-postinstall/-/napi-postinstall-0.2.2.tgz",
+      "integrity": "sha512-Wy1VI/hpKHwy1MsnFxHCJxqFwmmxD0RA/EKPL7e6mfbsY01phM2SZyJnRdU0bLvhu0Quby1DCcAZti3ghdl4/A==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "napi-postinstall": "lib/cli.js"
+      },
+      "engines": {
+        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/napi-postinstall"
+      }
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/next": {
+      "version": "15.3.1",
+      "resolved": "https://registry.npmjs.org/next/-/next-15.3.1.tgz",
+      "integrity": "sha512-8+dDV0xNLOgHlyBxP1GwHGVaNXsmp+2NhZEYrXr24GWLHtt27YrBPbPuHvzlhi7kZNYjeJNR93IF5zfFu5UL0g==",
+      "license": "MIT",
+      "dependencies": {
+        "@next/env": "15.3.1",
+        "@swc/counter": "0.1.3",
+        "@swc/helpers": "0.5.15",
+        "busboy": "1.6.0",
+        "caniuse-lite": "^1.0.30001579",
+        "postcss": "8.4.31",
+        "styled-jsx": "5.1.6"
+      },
+      "bin": {
+        "next": "dist/bin/next"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^19.8.0 || >= 20.0.0"
+      },
+      "optionalDependencies": {
+        "@next/swc-darwin-arm64": "15.3.1",
+        "@next/swc-darwin-x64": "15.3.1",
+        "@next/swc-linux-arm64-gnu": "15.3.1",
+        "@next/swc-linux-arm64-musl": "15.3.1",
+        "@next/swc-linux-x64-gnu": "15.3.1",
+        "@next/swc-linux-x64-musl": "15.3.1",
+        "@next/swc-win32-arm64-msvc": "15.3.1",
+        "@next/swc-win32-x64-msvc": "15.3.1",
+        "sharp": "^0.34.1"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.1.0",
+        "@playwright/test": "^1.41.2",
+        "babel-plugin-react-compiler": "*",
+        "react": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "react-dom": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
+        "sass": "^1.3.0"
+      },
+      "peerDependenciesMeta": {
+        "@opentelemetry/api": {
+          "optional": true
+        },
+        "@playwright/test": {
+          "optional": true
+        },
+        "babel-plugin-react-compiler": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/next-themes": {
+      "version": "0.4.6",
+      "resolved": "https://registry.npmjs.org/next-themes/-/next-themes-0.4.6.tgz",
+      "integrity": "sha512-pZvgD5L0IEvX5/9GWyHMf3m8BKiVQwsCMHfoFosXtXBMnaS0ZnIJ9ST4b4NqLVKDEm8QBxoNNGNaBv2JNF6XNA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17 || ^18 || ^19 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/next/node_modules/postcss": {
+      "version": "8.4.31",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
+      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.6",
+        "picocolors": "^1.0.0",
+        "source-map-js": "^1.0.2"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/normalize-range": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
+      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-hash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
+      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object-keys": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.assign": {
+      "version": "4.1.7",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
+      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0",
+        "has-symbols": "^1.1.0",
+        "object-keys": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object.entries": {
+      "version": "1.1.9",
+      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
+      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.fromentries": {
+      "version": "2.0.8",
+      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
+      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/object.groupby": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
+      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/object.values": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
+      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/optionator": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "deep-is": "^0.1.3",
+        "fast-levenshtein": "^2.0.6",
+        "levn": "^0.4.1",
+        "prelude-ls": "^1.2.1",
+        "type-check": "^0.4.0",
+        "word-wrap": "^1.2.5"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/own-keys": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
+      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "get-intrinsic": "^1.2.6",
+        "object-keys": "^1.1.1",
+        "safe-push-apply": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
+      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/package-json-from-dist": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
+      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
+      "license": "BlueOak-1.0.0"
+    },
+    "node_modules/parent-module": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "callsites": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "license": "MIT"
+    },
+    "node_modules/path-scurry": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/pirates": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
+      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/possible-typed-array-names": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
+      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/postcss": {
+      "version": "8.5.3",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
+      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.8",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/postcss-import": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
+      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
+      "license": "MIT",
+      "dependencies": {
+        "postcss-value-parser": "^4.0.0",
+        "read-cache": "^1.0.0",
+        "resolve": "^1.1.7"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.0.0"
+      }
+    },
+    "node_modules/postcss-js": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
+      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
+      "license": "MIT",
+      "dependencies": {
+        "camelcase-css": "^2.0.1"
+      },
+      "engines": {
+        "node": "^12 || ^14 || >= 16"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/postcss/"
+      },
+      "peerDependencies": {
+        "postcss": "^8.4.21"
+      }
+    },
+    "node_modules/postcss-nested": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
+      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "postcss-selector-parser": "^6.1.1"
+      },
+      "engines": {
+        "node": ">=12.0"
+      },
+      "peerDependencies": {
+        "postcss": "^8.2.14"
+      }
+    },
+    "node_modules/postcss-selector-parser": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
+      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
+      "license": "MIT",
+      "dependencies": {
+        "cssesc": "^3.0.0",
+        "util-deprecate": "^1.0.2"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/postcss-value-parser": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
+      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
+      "license": "MIT"
+    },
+    "node_modules/prelude-ls": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
+      "license": "MIT"
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/react": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
+      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-day-picker": {
+      "version": "9.6.7",
+      "resolved": "https://registry.npmjs.org/react-day-picker/-/react-day-picker-9.6.7.tgz",
+      "integrity": "sha512-rCSt6X8FXQWpjykns/azRXjJk3cMSzkzGbDEXuEveFGNZgOjZULdJQ5wsu8Zfyo8ZgPBoYCBKQ5wRrgJfhJGbg==",
+      "license": "MIT",
+      "dependencies": {
+        "@date-fns/tz": "1.2.0",
+        "date-fns": "4.1.0",
+        "date-fns-jalali": "4.1.0-0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "type": "individual",
+        "url": "https://github.com/sponsors/gpbl"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0"
+      }
+    },
+    "node_modules/react-dom": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
+      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
+      "license": "MIT",
+      "dependencies": {
+        "scheduler": "^0.26.0"
+      },
+      "peerDependencies": {
+        "react": "^19.1.0"
+      }
+    },
+    "node_modules/react-hook-form": {
+      "version": "7.56.1",
+      "resolved": "https://registry.npmjs.org/react-hook-form/-/react-hook-form-7.56.1.tgz",
+      "integrity": "sha512-qWAVokhSpshhcEuQDSANHx3jiAEFzu2HAaaQIzi/r9FNPm1ioAvuJSD4EuZzWd7Al7nTRKcKPnBKO7sRn+zavQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/react-hook-form"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17 || ^18 || ^19"
+      }
+    },
+    "node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
+      "license": "MIT"
+    },
+    "node_modules/react-remove-scroll": {
+      "version": "2.6.3",
+      "resolved": "https://registry.npmjs.org/react-remove-scroll/-/react-remove-scroll-2.6.3.tgz",
+      "integrity": "sha512-pnAi91oOk8g8ABQKGF5/M9qxmmOPxaAnopyTHYfqYEwJhyFrbbBtHuSgtKEoH0jpcxx5o3hXqH1mNd9/Oi+8iQ==",
+      "license": "MIT",
+      "dependencies": {
+        "react-remove-scroll-bar": "^2.3.7",
+        "react-style-singleton": "^2.2.3",
+        "tslib": "^2.1.0",
+        "use-callback-ref": "^1.3.3",
+        "use-sidecar": "^1.1.3"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-remove-scroll-bar": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/react-remove-scroll-bar/-/react-remove-scroll-bar-2.3.8.tgz",
+      "integrity": "sha512-9r+yi9+mgU33AKcj6IbT9oRCO78WriSj6t/cF8DWBZJ9aOGPOTEDvdUDz1FwKim7QXWwmHqtdHnRJfhAxEG46Q==",
+      "license": "MIT",
+      "dependencies": {
+        "react-style-singleton": "^2.2.2",
+        "tslib": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-resizable-panels": {
+      "version": "2.1.9",
+      "resolved": "https://registry.npmjs.org/react-resizable-panels/-/react-resizable-panels-2.1.9.tgz",
+      "integrity": "sha512-z77+X08YDIrgAes4jl8xhnUu1LNIRp4+E7cv4xHmLOxxUPO/ML7PSrE813b90vj7xvQ1lcf7g2uA9GeMZonjhQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc",
+        "react-dom": "^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/react-router": {
+      "version": "7.5.2",
+      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.5.2.tgz",
+      "integrity": "sha512-9Rw8r199klMnlGZ8VAsV/I8WrIF6IyJ90JQUdboupx1cdkgYqwnrYjH+I/nY/7cA1X5zia4mDJqH36npP7sxGQ==",
+      "license": "MIT",
+      "dependencies": {
+        "cookie": "^1.0.1",
+        "set-cookie-parser": "^2.6.0",
+        "turbo-stream": "2.4.0"
+      },
+      "engines": {
+        "node": ">=20.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=18",
+        "react-dom": ">=18"
+      },
+      "peerDependenciesMeta": {
+        "react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-router-dom": {
+      "version": "7.5.2",
+      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.5.2.tgz",
+      "integrity": "sha512-yk1XW8Fj7gK7flpYBXF3yzd2NbX6P7Kxjvs2b5nu1M04rb5pg/Zc4fGdBNTeT4eDYL2bvzWNyKaIMJX/RKHTTg==",
+      "license": "MIT",
+      "dependencies": {
+        "react-router": "7.5.2"
+      },
+      "engines": {
+        "node": ">=20.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=18",
+        "react-dom": ">=18"
+      }
+    },
+    "node_modules/react-smooth": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
+      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-equals": "^5.0.1",
+        "prop-types": "^15.8.1",
+        "react-transition-group": "^4.4.5"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
+        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/react-style-singleton": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/react-style-singleton/-/react-style-singleton-2.2.3.tgz",
+      "integrity": "sha512-b6jSvxvVnyptAiLjbkWLE/lOnR4lfTtDAl+eUC7RZy+QQWc6wRzIV2CE6xBuMmDxc2qIihtDCZD5NPOFl7fRBQ==",
+      "license": "MIT",
+      "dependencies": {
+        "get-nonce": "^1.0.0",
+        "tslib": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/runtime": "^7.5.5",
+        "dom-helpers": "^5.0.1",
+        "loose-envify": "^1.4.0",
+        "prop-types": "^15.6.2"
+      },
+      "peerDependencies": {
+        "react": ">=16.6.0",
+        "react-dom": ">=16.6.0"
+      }
+    },
+    "node_modules/read-cache": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
+      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
+      "license": "MIT",
+      "dependencies": {
+        "pify": "^2.3.0"
+      }
+    },
+    "node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
+    "node_modules/recharts": {
+      "version": "2.15.3",
+      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.3.tgz",
+      "integrity": "sha512-EdOPzTwcFSuqtvkDoaM5ws/Km1+WTAO2eizL7rqiG0V2UVhTnz0m7J2i0CjVPUCdEkZImaWvXLbZDS2H5t6GFQ==",
+      "license": "MIT",
+      "dependencies": {
+        "clsx": "^2.0.0",
+        "eventemitter3": "^4.0.1",
+        "lodash": "^4.17.21",
+        "react-is": "^18.3.1",
+        "react-smooth": "^4.0.4",
+        "recharts-scale": "^0.4.4",
+        "tiny-invariant": "^1.3.1",
+        "victory-vendor": "^36.6.8"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "peerDependencies": {
+        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
+        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/recharts-scale": {
+      "version": "0.4.5",
+      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
+      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
+      "license": "MIT",
+      "dependencies": {
+        "decimal.js-light": "^2.4.1"
+      }
+    },
+    "node_modules/recharts/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "license": "MIT"
+    },
+    "node_modules/reflect.getprototypeof": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
+      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.9",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.7",
+        "get-proto": "^1.0.1",
+        "which-builtin-type": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
+      "license": "MIT"
+    },
+    "node_modules/regexp.prototype.flags": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
+      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "define-properties": "^1.2.1",
+        "es-errors": "^1.3.0",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "set-function-name": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/resolve-pkg-maps": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
+      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
+      }
+    },
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+      "license": "MIT",
+      "engines": {
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
+    },
+    "node_modules/safe-array-concat": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
+      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "get-intrinsic": "^1.2.6",
+        "has-symbols": "^1.1.0",
+        "isarray": "^2.0.5"
+      },
+      "engines": {
+        "node": ">=0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safe-push-apply": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
+      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "isarray": "^2.0.5"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safe-regex-test": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
+      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "is-regex": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/scheduler": {
+      "version": "0.26.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
+      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
+      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
+      "devOptional": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/set-cookie-parser": {
+      "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
+      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
+      "license": "MIT"
+    },
+    "node_modules/set-function-length": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
+      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.4",
+        "gopd": "^1.0.1",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/set-function-name": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
+      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-data-property": "^1.1.4",
+        "es-errors": "^1.3.0",
+        "functions-have-names": "^1.2.3",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/set-proto": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
+      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/sharp": {
+      "version": "0.34.1",
+      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.34.1.tgz",
+      "integrity": "sha512-1j0w61+eVxu7DawFJtnfYcvSv6qPFvfTaqzTQ2BLknVhHTwGS8sc63ZBF4rzkWMBVKybo4S5OBtDdZahh2A1xg==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "color": "^4.2.3",
+        "detect-libc": "^2.0.3",
+        "semver": "^7.7.1"
+      },
+      "engines": {
+        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/libvips"
+      },
+      "optionalDependencies": {
+        "@img/sharp-darwin-arm64": "0.34.1",
+        "@img/sharp-darwin-x64": "0.34.1",
+        "@img/sharp-libvips-darwin-arm64": "1.1.0",
+        "@img/sharp-libvips-darwin-x64": "1.1.0",
+        "@img/sharp-libvips-linux-arm": "1.1.0",
+        "@img/sharp-libvips-linux-arm64": "1.1.0",
+        "@img/sharp-libvips-linux-ppc64": "1.1.0",
+        "@img/sharp-libvips-linux-s390x": "1.1.0",
+        "@img/sharp-libvips-linux-x64": "1.1.0",
+        "@img/sharp-libvips-linuxmusl-arm64": "1.1.0",
+        "@img/sharp-libvips-linuxmusl-x64": "1.1.0",
+        "@img/sharp-linux-arm": "0.34.1",
+        "@img/sharp-linux-arm64": "0.34.1",
+        "@img/sharp-linux-s390x": "0.34.1",
+        "@img/sharp-linux-x64": "0.34.1",
+        "@img/sharp-linuxmusl-arm64": "0.34.1",
+        "@img/sharp-linuxmusl-x64": "0.34.1",
+        "@img/sharp-wasm32": "0.34.1",
+        "@img/sharp-win32-ia32": "0.34.1",
+        "@img/sharp-win32-x64": "0.34.1"
+      }
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/simple-swizzle": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
+      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "is-arrayish": "^0.3.1"
+      }
+    },
+    "node_modules/sonner": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/sonner/-/sonner-2.0.3.tgz",
+      "integrity": "sha512-njQ4Hht92m0sMqqHVDL32V2Oun9W1+PHO9NDv9FHfJjT3JT22IG4Jpo3FPQy+mouRKCXFWO+r67v6MrHX2zeIA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "react": "^18.0.0 || ^19.0.0 || ^19.0.0-rc",
+        "react-dom": "^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/stable-hash": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/stable-hash/-/stable-hash-0.0.5.tgz",
+      "integrity": "sha512-+L3ccpzibovGXFK+Ap/f8LOS0ahMrHTf3xu7mMLSpEGU0EO9ucaysSylKo9eRDFNhWve/y275iPmIZ4z39a9iA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/streamsearch": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
+      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
+    "node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/string-width-cjs/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string.prototype.includes": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
+      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/string.prototype.matchall": {
+      "version": "4.0.12",
+      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
+      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.3",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.6",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.0.0",
+        "get-intrinsic": "^1.2.6",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "internal-slot": "^1.1.0",
+        "regexp.prototype.flags": "^1.5.3",
+        "set-function-name": "^2.0.2",
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.repeat": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
+      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "define-properties": "^1.1.3",
+        "es-abstract": "^1.17.5"
+      }
+    },
+    "node_modules/string.prototype.trim": {
+      "version": "1.2.10",
+      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
+      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "define-data-property": "^1.1.4",
+        "define-properties": "^1.2.1",
+        "es-abstract": "^1.23.5",
+        "es-object-atoms": "^1.0.0",
+        "has-property-descriptors": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.trimend": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
+      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.2",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/string.prototype.trimstart": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
+      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "define-properties": "^1.2.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/styled-jsx": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.6.tgz",
+      "integrity": "sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==",
+      "license": "MIT",
+      "dependencies": {
+        "client-only": "0.0.1"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "peerDependencies": {
+        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "babel-plugin-macros": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/sucrase": {
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
+      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.2",
+        "commander": "^4.0.0",
+        "glob": "^10.3.10",
+        "lines-and-columns": "^1.1.6",
+        "mz": "^2.7.0",
+        "pirates": "^4.0.1",
+        "ts-interface-checker": "^0.1.9"
+      },
+      "bin": {
+        "sucrase": "bin/sucrase",
+        "sucrase-node": "bin/sucrase-node"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/tailwind-merge": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/tailwind-merge/-/tailwind-merge-3.2.0.tgz",
+      "integrity": "sha512-FQT/OVqCD+7edmmJpsgCsY820RTD5AkBryuG5IUqR5YQZSdj5xlH5nLgH7YPths7WsLPSpSBNneJdM8aS8aeFA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/dcastil"
+      }
+    },
+    "node_modules/tailwindcss": {
+      "version": "3.4.17",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
+      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
+      "license": "MIT",
+      "dependencies": {
+        "@alloc/quick-lru": "^5.2.0",
+        "arg": "^5.0.2",
+        "chokidar": "^3.6.0",
+        "didyoumean": "^1.2.2",
+        "dlv": "^1.1.3",
+        "fast-glob": "^3.3.2",
+        "glob-parent": "^6.0.2",
+        "is-glob": "^4.0.3",
+        "jiti": "^1.21.6",
+        "lilconfig": "^3.1.3",
+        "micromatch": "^4.0.8",
+        "normalize-path": "^3.0.0",
+        "object-hash": "^3.0.0",
+        "picocolors": "^1.1.1",
+        "postcss": "^8.4.47",
+        "postcss-import": "^15.1.0",
+        "postcss-js": "^4.0.1",
+        "postcss-load-config": "^4.0.2",
+        "postcss-nested": "^6.2.0",
+        "postcss-selector-parser": "^6.1.2",
+        "resolve": "^1.22.8",
+        "sucrase": "^3.35.0"
+      },
+      "bin": {
+        "tailwind": "lib/cli.js",
+        "tailwindcss": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/tailwindcss-animate": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/tailwindcss-animate/-/tailwindcss-animate-1.0.7.tgz",
+      "integrity": "sha512-bl6mpH3T7I3UFxuvDEXLxy/VuFxBk5bbzplh7tXI68mwMokNYd1t9qPBHlnyTwfa4JGC4zP516I1hYYtQ/vspA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "tailwindcss": ">=3.0.0 || insiders"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/tailwindcss/node_modules/postcss-load-config": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
+      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "lilconfig": "^3.0.0",
+        "yaml": "^2.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      },
+      "peerDependencies": {
+        "postcss": ">=8.0.9",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "postcss": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/thenify": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
+      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
+      "license": "MIT",
+      "dependencies": {
+        "any-promise": "^1.0.0"
+      }
+    },
+    "node_modules/thenify-all": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
+      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
+      "license": "MIT",
+      "dependencies": {
+        "thenify": ">= 3.1.0 < 4"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/tiny-invariant": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
+      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
+      "license": "MIT"
+    },
+    "node_modules/tinyglobby": {
+      "version": "0.2.13",
+      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
+      "integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fdir": "^6.4.4",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/SuperchupuDev"
+      }
+    },
+    "node_modules/tinyglobby/node_modules/fdir": {
+      "version": "6.4.4",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
+      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tinyglobby/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/ts-api-utils": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
+      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.12"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4"
+      }
+    },
+    "node_modules/ts-interface-checker": {
+      "version": "0.1.13",
+      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
+      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/tsconfig-paths": {
+      "version": "3.15.0",
+      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
+      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/json5": "^0.0.29",
+        "json5": "^1.0.2",
+        "minimist": "^1.2.6",
+        "strip-bom": "^3.0.0"
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
+    },
+    "node_modules/turbo-stream": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/turbo-stream/-/turbo-stream-2.4.0.tgz",
+      "integrity": "sha512-FHncC10WpBd2eOmGwpmQsWLDoK4cqsA/UT/GqNoaKOQnT8uzhtCbg3EoUDMvqpOSAI0S26mr0rkjzbOO6S3v1g==",
+      "license": "ISC"
+    },
+    "node_modules/type-check": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/typed-array-buffer": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
+      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "es-errors": "^1.3.0",
+        "is-typed-array": "^1.1.14"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/typed-array-byte-length": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
+      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.8",
+        "for-each": "^0.3.3",
+        "gopd": "^1.2.0",
+        "has-proto": "^1.2.0",
+        "is-typed-array": "^1.1.14"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typed-array-byte-offset": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
+      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "for-each": "^0.3.3",
+        "gopd": "^1.2.0",
+        "has-proto": "^1.2.0",
+        "is-typed-array": "^1.1.15",
+        "reflect.getprototypeof": "^1.0.9"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typed-array-length": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
+      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bind": "^1.0.7",
+        "for-each": "^0.3.3",
+        "gopd": "^1.0.1",
+        "is-typed-array": "^1.1.13",
+        "possible-typed-array-names": "^1.0.0",
+        "reflect.getprototypeof": "^1.0.6"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/unbox-primitive": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
+      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.3",
+        "has-bigints": "^1.0.2",
+        "has-symbols": "^1.1.0",
+        "which-boxed-primitive": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
+      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/unrs-resolver": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/unrs-resolver/-/unrs-resolver-1.7.2.tgz",
+      "integrity": "sha512-BBKpaylOW8KbHsu378Zky/dGh4ckT/4NW/0SHRABdqRLcQJ2dAOjDo9g97p04sWflm0kqPqpUatxReNV/dqI5A==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "napi-postinstall": "^0.2.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/JounQin"
+      },
+      "optionalDependencies": {
+        "@unrs/resolver-binding-darwin-arm64": "1.7.2",
+        "@unrs/resolver-binding-darwin-x64": "1.7.2",
+        "@unrs/resolver-binding-freebsd-x64": "1.7.2",
+        "@unrs/resolver-binding-linux-arm-gnueabihf": "1.7.2",
+        "@unrs/resolver-binding-linux-arm-musleabihf": "1.7.2",
+        "@unrs/resolver-binding-linux-arm64-gnu": "1.7.2",
+        "@unrs/resolver-binding-linux-arm64-musl": "1.7.2",
+        "@unrs/resolver-binding-linux-ppc64-gnu": "1.7.2",
+        "@unrs/resolver-binding-linux-riscv64-gnu": "1.7.2",
+        "@unrs/resolver-binding-linux-riscv64-musl": "1.7.2",
+        "@unrs/resolver-binding-linux-s390x-gnu": "1.7.2",
+        "@unrs/resolver-binding-linux-x64-gnu": "1.7.2",
+        "@unrs/resolver-binding-linux-x64-musl": "1.7.2",
+        "@unrs/resolver-binding-wasm32-wasi": "1.7.2",
+        "@unrs/resolver-binding-win32-arm64-msvc": "1.7.2",
+        "@unrs/resolver-binding-win32-ia32-msvc": "1.7.2",
+        "@unrs/resolver-binding-win32-x64-msvc": "1.7.2"
+      }
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "node_modules/use-callback-ref": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/use-callback-ref/-/use-callback-ref-1.3.3.tgz",
+      "integrity": "sha512-jQL3lRnocaFtu3V00JToYz/4QkNWswxijDaCVNZRiRTO3HQDLsdu1ZtmIUvV4yPp+rvWm5j0y0TG/S61cuijTg==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/use-sidecar": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/use-sidecar/-/use-sidecar-1.1.3.tgz",
+      "integrity": "sha512-Fedw0aZvkhynoPYlA5WXrMCAMm+nSWdZt6lzJQ7Ok8S6Q+VsHmHpRWndVRJ8Be0ZbkfPc5LRYH+5XrzXcEeLRQ==",
+      "license": "MIT",
+      "dependencies": {
+        "detect-node-es": "^1.1.0",
+        "tslib": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "@types/react": "*",
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
+      },
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "license": "MIT"
+    },
+    "node_modules/vaul": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/vaul/-/vaul-1.1.2.tgz",
+      "integrity": "sha512-ZFkClGpWyI2WUQjdLJ/BaGuV6AVQiJ3uELGk3OYtP+B6yCO7Cmn9vPFXVJkRaGkOJu3m8bQMgtyzNHixULceQA==",
+      "license": "MIT",
+      "dependencies": {
+        "@radix-ui/react-dialog": "^1.1.1"
+      },
+      "peerDependencies": {
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc",
+        "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0.0 || ^19.0.0-rc"
+      }
+    },
+    "node_modules/victory-vendor": {
+      "version": "36.9.2",
+      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
+      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
+      "license": "MIT AND ISC",
+      "dependencies": {
+        "@types/d3-array": "^3.0.3",
+        "@types/d3-ease": "^3.0.0",
+        "@types/d3-interpolate": "^3.0.1",
+        "@types/d3-scale": "^4.0.2",
+        "@types/d3-shape": "^3.1.0",
+        "@types/d3-time": "^3.0.0",
+        "@types/d3-timer": "^3.0.0",
+        "d3-array": "^3.1.6",
+        "d3-ease": "^3.0.1",
+        "d3-interpolate": "^3.0.1",
+        "d3-scale": "^4.0.2",
+        "d3-shape": "^3.1.0",
+        "d3-time": "^3.0.0",
+        "d3-timer": "^3.0.1"
+      }
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/which-boxed-primitive": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
+      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-bigint": "^1.1.0",
+        "is-boolean-object": "^1.2.1",
+        "is-number-object": "^1.1.1",
+        "is-string": "^1.1.1",
+        "is-symbol": "^1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-builtin-type": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
+      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "function.prototype.name": "^1.1.6",
+        "has-tostringtag": "^1.0.2",
+        "is-async-function": "^2.0.0",
+        "is-date-object": "^1.1.0",
+        "is-finalizationregistry": "^1.1.0",
+        "is-generator-function": "^1.0.10",
+        "is-regex": "^1.2.1",
+        "is-weakref": "^1.0.2",
+        "isarray": "^2.0.5",
+        "which-boxed-primitive": "^1.1.0",
+        "which-collection": "^1.0.2",
+        "which-typed-array": "^1.1.16"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-collection": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
+      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-map": "^2.0.3",
+        "is-set": "^2.0.3",
+        "is-weakmap": "^2.0.2",
+        "is-weakset": "^2.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/which-typed-array": {
+      "version": "1.1.19",
+      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
+      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "available-typed-arrays": "^1.0.7",
+        "call-bind": "^1.0.8",
+        "call-bound": "^1.0.4",
+        "for-each": "^0.3.5",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-tostringtag": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/word-wrap": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
+      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/yaml": {
+      "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.7.1.tgz",
+      "integrity": "sha512-10ULxpnOCQXxJvBgxsn9ptjq6uviG/htZKk9veJGhlqn3w/DxQ631zFF+nlQXLwmImeS5amR2dl2U8sg6U9jsQ==",
+      "license": "ISC",
+      "bin": {
+        "yaml": "bin.mjs"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/zod": {
+      "version": "3.24.3",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.3.tgz",
+      "integrity": "sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
+    }
+  }
+}
diff --git a/frontend/package.json b/frontend/package.json
new file mode 100644
index 0000000..383d36a
--- /dev/null
+++ b/frontend/package.json
@@ -0,0 +1,59 @@
+{
+  "name": "cosmocargo-frontend",
+  "version": "0.1.0",
+  "private": true,
+  "scripts": {
+    "dev": "next dev",
+    "build": "next build",
+    "start": "next start",
+    "lint": "next lint",
+    "lint:fix": "next lint --fix",
+    "update-deps": "npx npm-check-updates -u && npm install && npm audit fix"
+  },
+  "dependencies": {
+    "@hookform/resolvers": "^5.0.1",
+    "@radix-ui/react-checkbox": "^1.2.3",
+    "@radix-ui/react-dialog": "^1.1.11",
+    "@radix-ui/react-label": "^2.1.4",
+    "@radix-ui/react-select": "^2.2.2",
+    "@radix-ui/react-separator": "^1.1.4",
+    "@radix-ui/react-slot": "^1.2.0",
+    "@radix-ui/react-tabs": "^1.1.9",
+    "@radix-ui/react-toast": "^1.2.11",
+    "@radix-ui/react-tooltip": "^1.2.4",
+    "@tanstack/react-query": "^5.74.7",
+    "axios": "^1.9.0",
+    "class-variance-authority": "^0.7.1",
+    "clsx": "^2.1.1",
+    "cmdk": "^1.1.1",
+    "embla-carousel-react": "^8.6.0",
+    "gsap": "^3.12.7",
+    "input-otp": "^1.4.2",
+    "lucide-react": "^0.503.0",
+    "next": "^15.3.1",
+    "next-themes": "^0.4.6",
+    "react": "^19.1.0",
+    "react-day-picker": "^9.6.7",
+    "react-dom": "^19.1.0",
+    "react-hook-form": "^7.56.1",
+    "react-resizable-panels": "^2.1.9",
+    "react-router-dom": "^7.5.2",
+    "recharts": "^2.15.3",
+    "sonner": "^2.0.3",
+    "tailwind-merge": "^3.2.0",
+    "tailwindcss-animate": "^1.0.7",
+    "vaul": "^1.1.2",
+    "zod": "^3.24.3"
+  },
+  "devDependencies": {
+    "@types/node": "^22.15.3",
+    "@types/react": "^19.1.2",
+    "@types/react-dom": "^19.1.2",
+    "autoprefixer": "^10.4.21",
+    "eslint": "^9.25.1",
+    "eslint-config-next": "15.3.1",
+    "postcss": "^8.5.3",
+    "tailwindcss": "^3.4.1",
+    "typescript": "^5.8.3"
+  }
+}
diff --git a/frontend/postcss.config.js b/frontend/postcss.config.js
new file mode 100644
index 0000000..0cc9a9d
--- /dev/null
+++ b/frontend/postcss.config.js
@@ -0,0 +1,6 @@
+module.exports = {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {},
+  },
+} 
\ No newline at end of file
diff --git a/frontend/public/android-chrome-192x192.png b/frontend/public/android-chrome-192x192.png
new file mode 100644
index 0000000000000000000000000000000000000000..385ca0ddb98f36defb4b74840ac95478711d6130
GIT binary patch
literal 13849
zcmV+!Hs;BRP)<h;3K|Lk000e1NJLTq006)M006)U1^@s6Qrv6@00001b5ch_0Itp)
z=>PyA07*naRCr$PT?cqo#q$5nIrpabgcg#}m8uVeiXH4?r6eF02rAec_691}r%(U-
zEWD@E6eR&HV8wzJMLMBM2?>M}((BE==ggly0UsshoO{o?1@3%bKKZ=6voo_hduC^6
zW(h$EO5iAvz(i(g>HM8xHfK~gu`^s&Y+;h>N>U}YGn3R!f|SC<?Exe+xE+C7gQ3z<
zz<ZE|V^9L4r*K$xWJL;-nj(?XK_%)46)6%?DuddAkPPNH01^PP&Kp_lR3B7;V{q{V
zBFpKMm)JYE>D-;2)Q^b!1AGFQl0Xy#a3mPvpr#gjlN|2|DnKBvhNGEgX1aX-&hV&8
zIl4Y1B8k|MP9&cV@Bm@DNT4uo*wsA-29^gEz+*865qK^ErmJV}Y3&NLcY}&P%;-&o
zK4A3Nzr%-kK1O30_=}(dSR>gWRvi+!dR|46;&7d&0+$ofiBQ!J4GW$^0G4&2@Tds`
z{|zdDM<NV%)+>RGY?ednOCsySlr|FCPG%K@NTRdB+!lacFCG)yF)>XDDu9U+4Wc?i
z0(8y$#nH7kK3<aL{vbY$K>fgKDu}{-EH9NA*8~;7$Fp#B4$qX4U7Spkd=V25fr`E$
zjt8_w?=Nf4r9wT^Ux+z6*TFHvm00k?jHymwa-0C7!NeE@Ldt$Wy#Gmpu@@|#7E}QL
zo0<TkNG$w{c)*noiOyl>vx%q=0C553*TBFkQq@601@P->@=xL>PGo6KdTl$^Q8QG6
zG#rfMm=H&R%|9t_get~YF4=Z%PyqsF#(Ya?Ms~LBvRxb}sr6lnX#|KeNDDXc8=KyU
zfS8%zafCVU4k~~Vu^oeLh5Hg=<!NfYdXWSS0&oU^guoUBDf`YQPxZ=;n-o-lz@AC#
zsAr}TpVhQ;x$15v#&8Bwh$uWjcl<-;#9R$Yx+Q05{EVOiShs`%5_3j2hpSRaX9;{Y
zAddyORX{S*EYZ9Ns+5_N8UJHY0gk@eb&I2nY>om-&SZ(Mqy|$b)sKAkZt>J~C;m&4
z<x6G_j@ukm0Fy-<i0Fpp>^+Z2x*LrCOh_dExva8AoXm^bMkWk=eGoZ<3Sf<h{TwUP
z$PdcnoZ;vTMZFh<3jkOYap`}eVBqc9!xC;0lm!*Q|K`U+ikPmLxu<nVnEiZGcqm8`
zarVNabIhy*0#ty;WDkp<7E}NWmzuw!&dBBviOR23NxdDwKLA7@OAG&?`KXp$=s#;j
zLT*q2{B4z*O%F4ToLL^HgsA;h;(N6npZS<Ebs7~XV-q;Odrqcy7jW!+`pjNi{*G_t
z{IYnZo(C$djvz<_!JK%^&o_Zt<#%UiB;Isj{*D>j&)*lUY4kDE(2sVXLLv6?#B?q|
z@c^5WLu(q1zC$FcK-`c$EaCm20{CtcEE#$161ErT6?Y+~8;EF3;D;+%Atow<Y8#M~
z8ND{B09MG?7dZDtW@hv(O<`FYL9C7hs29M26P4*rnGt?+kv-$%A<=t+3gAt_TQt^y
zDO<x@N5>9k(EVUlR8X)k&5#)`M-A$$%1~cj3TIV0>Z{AZssej>G{WNBAT+KOLLy=z
z+5GXGO$sx=O&ouJPA1g`6~LlJ=?%0Q*#+T1)bS+KgJAV41}s_ls;eH3^1Z0swFSGD
zFTkEvKcTX46I^xGN3cmm2uo;(nD)mZvHPh=>d_z3?Ybf?HVKkF)Ei=HX^dJGxOdLb
z_{kvRpaQfcE`R)89B}7UbR~9X5y>L~?qCI(N_`zlH?P3X<=>zv_g9n`tb?nz%Fs}@
z&<Mn&c1NpTXCkHl<%sLp2a?^VUxr;o7?wRW;n#y133`DHO{?!33v(waHZGG?eh5Gp
zt3nqXWqYu8&db>G$2`=P?*%I^kC-OehVb~dNIPp7j=TIegvJPOtPg;Bu}gMd{_&8u
zf7}0pil74cU@nXdIp7DjCGIRaUJj)Pm@&etg|E~*Q2f`QSTW^Ml;?>{(!Z?)Bjh&I
zmJr*a7y6EQ7Kz85>;toi|C2K;aophq1{J`h>9qh24VhEi-lozuOvnOooK+i^u<18_
z^$s@9dlQcGA`4jgAIh+}HaPBz+tB5rF%V{wSAgMUC_`pvw3;7O0Ix{g^FfB?6rWC@
zXF=!>z_L@M@ZzkT`Y5)3|3RaNThBQ;5`!%)5}nSy7AKCH1d=VUfGGBje3vAj^zo3G
z;-CUpF{38ooH%i!w5k97Z5&mOF@Ui3Das_&jiPbZRwDO<r?L6#cfoA7$<sXL!fVv^
zlAF+b<l_(uVKL0e8J2K;V`BtOAd4lh7rltqgj{wpm~R6xz$#n+06j{5EjE1mIyQXr
zn&#j41&D>;GxI@oyW}P-&jhvm!yi5jDu6F$S;v?oKCDi5*&UB)$>(0m$lAGd0T#c0
zGwQ2Kbx>$s6LEpo|DJczs^{sJ3_?U3S&=Ty$&B3;Q~*mv>^{;<Ui&LFDkbq`VtR&E
zJ`-fl!w)S{R9jq#g%htp)y^${Hx;(HB-sFx8hnGyU{wVxPRq@sxK4d=_7fi?G}`oP
zE5fe(Fr<!e`QX~bil73tv@*Q)yC^yGX-SIWlCl6ED;{pM%ENOwOX8Ai)r<+6*C!-0
z4$<wqA*yXBgeN8=Bq|<qNEnDDsEQM=x*F7$6r!f609CuTqPApb!$H~f^8(@cEAK$>
z5s#RCSylt64?<0R>p=W}@DS{+Mc&LfLuZ%vm7u-|(3!9(jG?LFOE)ja>JOgQeDQ5g
z9Dt~{onZ@)(&BeWI`E#H=*`+fR}~k8(m1QjP^E=L{D8tGU!r<<o(QftO_~u&DLDOs
z8Hn$EqG>n*?0_s?nKL+UX;VmphhQ_s-7GGqOFt-&3lC9-k|a$6a~rP>eb7K6fKBZ1
z_J|m_hp#K!gS>?wBJcYTP`!Jb_O<X7B%2-Ghun)EL+*w6w@EPHVOK_ec4e!|paPgA
zQMb@AQ$|i{ZzjHnh=u}ifAzUVfcc$7h(zVi&B$B$5ej~pgPP(U9-Br<Jx)jed*4NP
zyeWHw%FH*;&Pbfn9QVO5fcb0V5R79dv%NH_>=H0P2T(VFP21iqCS4bLVICE&{SB+8
zKaTSJb-MaA)yNhejWZseiPk+u`BBe+fo-H#pOKT9x+ACnp2^b9-b{n1?`~xew~u3B
zJcwf5L=+I+s`un$>DzZ}${@n1-GyG6520t~1MYS|sGs^)&ak9gTS6540<<I{H+~lt
zl~t*@pQI(K;9?M2e%0v)nWlHCDcX+Qk0znu*H7G5g4TV`##xWd^5|lWfihA#Gbb}~
zK}$>q6`&;v8T@_h<R$jfq|O-tO#pLOzkMReAYb~LGivtkz>>G_#O{>~^>sO{RYX#I
zod4oN&%&k&KSFVh$jNNIt0f|W3eb{-4E!!ikvQwr8^L%Ogm?p8kE*6MMfv#UxvNoL
zu-@>&SmX~}{Oa$BYS-CKnUIrNeSvt_(>a;FTC~N23gD)g5AG&{*w&qJS06>?2PM!j
zKFSWd?ucmDitn)G?YmLCx7jmjqo@Zy{e_lN=@u~dlB!;vJv{NdeP7`gBm9C2;FgpR
z?KE`uu2Ut1Oa{;!fH&fMO`zIZ6v8{SCi{8(HSaCM_XMZkKOOB)z05rV3BN$8zA`5>
zwL}kspaSTTQWI^io4za35n&(Bj5jQ;$lw8uzU*4DV<Uch;aV+`-U#%+=N+V;F~mrh
z18v2Qe`n6Hgn#Sp98>_kk~*y26(1HQhuUr9L3|TfD>NH~!z3WWDAvt+8Edm&FeIBZ
zADM-ACy9#f#(=@wN#*`InMu0suAl-Kld;x%$ehv+vZ}rZ(qeghTI#?J^1a%nYIhzM
zJ~jxor7b#S{-*1KmwrNAM`2AG1^!pB+=TllP9)tyN<jrMAY<)TH@<uTB=uDQJq>g{
zW}Avkvt^U-#g=cU>q@j2A<-AU{0qVo+8UKvF=TmA&fwU^Mmh!+K&P}WpT`lQ_2nap
z`2j%l?+0b4Q+7L-Ex_;p8lx-cIH~(7IQxlDw6JX5pjCZV=P7c?n8xyco5K^xlSor+
zDHnmI(Eyi%P$B`vDxri_ln|+vAgY#0s-k*lbrq;O9#VA%w%3utnje~fzn&*R<<TID
z0dpYBP4~Jot6|mdt@!2H5vbhpSBoe`Ucd?0J=tQr!x~gGV|?#n@&BDj`pqAKBOoU-
z8!6${vNVhcF9K-lTPf_o`hAyD4&Z-(M5qH$#>^!El`v5WK`jBHOa)a*L{*YXRVvgf
znUtz^!|vuyLv9$y65X&bpv|)C3`S=>klKrSqKjX@1v{61-7ML1NI1@T@O`v7aiCH5
zHpntv{L$d}Jfj^0P64vfDyr5Nej5XK0cdBG;pW@33m_Ln9T|eNI;D$i?e*i;qCWlO
zK~iw>yD4mufWKnOBMs+(X0pi=y7j|p_f0`WVta!l@l#L}o@y%V>!>k-vXPQdXOkwV
zz>NSbt*TU++7-DsJc`oeP6TV2QbBN60;<c2b+iA8bsxXlWT{0-w&VE0ccbU9@rJ5P
zGiZ-WA^(^=G;*gq^aaWnfZjp7G@BeU0mRo>>v|+qC3i$_)<Y=neF{K<A|iLD-#dLo
z@vV*X-$L$(&p>qwi}Xl{XqAf7@1KVF&f@((-M~ydY4(tW2?tkv*4;Z0&HxP1bfolQ
zoAeBT3$0!JfY|xhjD7$mJ^BTAej_WXnYN<3#FlTSVC9S_pg8_6&3{l2LiZu}pjYOD
zM$;j;LFGX?nTdbD_+pe~zuw*^0#YYi+UX3u0^lU8LyK$Lq+r$92`KK_FSzp?T}jO<
zfP&3my@yrrPtX$V4+l{+_nZlz7z%+FDf<NVZK$>5b23vK(<)sY_^kr`fC08V+otmg
z(!U7kF1`f1IC8U5eRMq5T{j*(&b$OH1>@P=6l0^^ME>xGd2e9NtmmLQ4~<X`jY)!t
z{Sk>U#(;`csMpOIme{;&sRg8#E-GUT{jc?8BuCg~`$$RRC%{N`7mwb4N@zGX48I-u
z=MRGt5_I<Hm7CsnB1Llb%t`ob{#)9UN(aCe8i^jm#-rP%HygY7YOvksvFaL`liAwX
z%N>Ui?RN?w7JryczMDb!0<iow1>xZli+}5-*FiO}9EaYuaZI!mMR-NNaKW!1|IM#f
z9Cy$-tr(W5OJor0iRj|&q47T$>~}<SzfyoH=om*f<xzm{u(Blh0V#;ZUwHb($jy2f
zuE=0Or>Bdlss5s(+^;WQi_%TYwI*75^z*L6iK8cJHHr*^2zj2LGc4f>gZ&z9?k@^J
zQ<2&kc6x#sBN_0@GoR(1dSLk-&!IZGqZzUc;%Gtwd)NPgUthQe^_3+EPiTj3m)(pm
z7mjhOEINyD7e&dKJG_<0yT2gUFBD(~Qo5=(=`9A%0pOLoIj)E(EPm)sly>VA^!Qk;
zy6fk@g4~auMMBrUI5F#4#A^@cxpmeOe*f973Tf;oS@C6NknK|i$OhzUbnHVmbtZrw
zW-z1&hY}iw^&{^_-bLcctsqz_0r9%zAOAN_tNGb&&{)``;yf9y0)$&~h9-#hVhZ?7
z0kY9Eq*kuDlu3FPKzCEP(Sby`ICq?J3D%B&0M5vOuTZFiW8XG$)>LSvQlgW)8olId
zgm7Bus&Nee`1(U%dh~=tpD2L1;OZ!)-3SR2_6M|ijgFeu?Xm2hmmuu_V*%v)I@oHe
z;Eak5bT3yuK^mDoEOxG*Y7ctn)@uvz0735~A;xKox@F(_<4Lmc@wdhVpx8sO?)v+%
z?R-(U%ImD_ofD7R5v#CQRUjsBJ=*^9Es|FM0b5-SN_w1x6}LYds7fH7>sYY0IN`FT
z<H++;)CWn}tE=E$q$W!?j3<zY=Jcxl!6ael=@((u*e4(^zK%LzMrc_vTCMyQ?G}HB
zxQ#0jQeE+P_^~545kJ2$3y!#?0A$^qTi?bQ_nHEHh}7gd8{Qz$#om4tLNH$4CRH<i
zDmoq?fD52`l1Xu))ym({`STfw-LeL@y4oY+?gjrp|1$@QkyJzfkd#Pl%5lnc^CyGN
z@%$XjmgNe-fHWf{wWp%e{}FJmFJ!9PL$LXZENr^!28e$jEg(7T5uN`RI(_jz+Wz@H
z<od=#jfJ_l?YyDLz45VtV_o?DCD4u8L*qVmH{`iFrY%(faoA0>rJYOQCkP~-0rW|f
zSw)BAvHZ^GQPsXvz%77AKijH;$Xx|U`SCNfTl6);iwZ%_WLnin#bWtgFJNyUH_HwB
zP-+a$cFEE>D|UaumSqYceEc<XhpR~9m$@OJ&G4PK8FCl4f9{xvQE=YSqawavs&^oH
z(O2j^Z#p7(ZiA$_TCk4@d-|S*mA5>F`e=`Q@McVhF&sq2l2f^4)`+A(jdj%D+7bm2
z0d1kOJbYidz~=$9)=!SvElKl!EPn8HC}EanP?}Bn5%`3iAGv!wI?tbu<exu>+(c&8
z;T>J!kytb8LF_o^GKkF}P=EoKM0h!SX#B%wx;+o)-*g3-jLxy4HkU|P7p_jj)s4)Y
zAmRI7am!QKlP)4G0vGJn6==8U8+2HZjhJm44KY&O>trmy{W&<|1I+uwSOHc><Yczm
zV2ELZjZIa6X=tCwvh4*T76ENO_B9fA_d5qGZ+=p{1PV-GMC{s*9y4D>(&|O9)z%nd
zL*zCryZfJ-2^3KG9?W$h`HA@A*jN8!vftmbFTgY;r$M$&V&ba-@=7#kbF0A>7J)Tc
z4`IjIf%WM>z?1B#MVloH(fz~M5Wd%V!2>4JLcLes`ZQSf`E(dkTmZ{tTi8_}T@_Ja
zw4>4XrhEZr*gKr0Xs;mRJYRWw4rjcqOK&V4|1Z=f`0xl~bT;<4k1WhXr!POy%$|^{
za<{N(As=_Yi1N<8-0JVMPRw--%9_0<J{ty#+`3Dz#|kjTmU<R}-Xx%x)p@%{m=vC$
z{0lN6cEUgbQWdmb_A`#p{x_nwZvm;giyR-qqAJ_4^|I@+aoEj)c<(W@Dx!GImxH=B
zaj9YMY`VQVegJG+ZK>xG(VN6@_dzFfx!I4cs$B;xdU7i2V*=!vE@o|~@9<4FI(<GJ
z_8O1UTv3_Q1xxRJIq(vFi1H-DRkMb~ue4-gG=kJE1(=RDk*XAOJtPv*oTfbMZ5G2?
zj&J5|*nHIuW}&nckJ$AS)-OlrdDGBp)o&o>e@Wx+46N8gk$dB#*m2gS0ao3D900!*
znHWE5>OeZOc8WW~(9y@R0?b2l#9o_yJb^{hy5HTb)V4~-pZEVCD$}~@VBhym(!QOI
zuAjV%u;Seik({1F!MQ__oAn@6_cE?L9p01vYgM?enlr3*%O#{e8Rf9PMihW1BRMg|
zCX1x?Tf800tc&OUo{!ZxJ_d0C<hQ`Ad3L&f{0>ro{0!of%M7UKa2%H1^<v<eK0rMI
zH)Icu|G<iPpXOw%O98~;b}EvOXS@7_#FQZt`^}gzvvG(p=e5`0hk}8F{Wk1Dm^>mz
zzw^AQNL;tnW0U8A428n4yXGDg47@6!+@7Ms8^F`6BNE1aIY^j6-UVF>@E+27N;ZgR
zfd+UhY26($)U-;*;)mb#+Z|9OrgZq~BXs;~Cc?^#4L>5?oJ@9}az0j%n*e9vm3LVW
zm4|v#-_xD7a-dJM3NRVzb~|>SEZJ-a-oW)_EX(^Ao^~Nt-a5(uTz|}nDB7Xf`t5(3
z56NX}QWI*E+Tr)d{)3vfmKV`8dk!6d^mtL?@>doP9B7UmXpq7t72q{=4ULrRuapTB
zy;-rrApQSqPK2fRyo6n+h?E0eA2zp#GSX3UI*^pRSo88EY*=oZ$#Z}P5$Y^%ybI3|
zc}D)jw=Nkm7J}7ljXZ0r3$KAjjY>=_S0bg}L=uS%isV3$Y+Yg-{Pe;sI6W)7VL)^(
zHx=OwY2VG!A~?fJi%d0n#OT81E9#jF+dtsaJPDPGlP{b*BJuZ@C23uYMipSHE$s|u
zJPe{F0*gp8Q8!RL+b8}+N|i`#@vGR{?PpzzRku#^i<@6@gBw~}gsz{yi<E_*Hl3;E
z;k;I+b;Z)VU-H{CPm}BsIT-xp?4b!Fe8#8H<QJe6$)a>uL^$lxY)72RoWzV|i8uvJ
zDIo61piW@4-S=3X2)6f1MYqPJC3Zql@jwKB`5J^vGjYwI==$jtB&=KFb~r;zd^jVb
zwDZpHe!?#iNFZKu<OK>TS#yWBG9Kk;GOLD-MqwTa<p=|XBa9<eMQ%f?bOM3TVF_n~
z(N5eEcrz}jF1{5OKk_yzQ@fZf9%JZ)i!){6XXyIze-R-fIGagRG=}-m)*`xd<B+k~
zJottHyX_TxP!Y2{CTCdm=R_n5-TD*^D?oG9zJXRz;r7U0#LA@v5~ooSBP0TH#Mi{s
zu@0tVZ|_sF{I2IA9=Y%dh>|1~CFuCY`{*)%hG`dDjehM&LQ&r{u=19t124sqp{lID
zDPi~coXlQ_zLepUiL-7|QZ_orIBZHU7b)pbslS#KPe?QU>_CLP3o^CWU3^vXK~!cq
zZuZ+~z3eB`U7Uxn3lZuevfN5~qz6`#i@5M&{G>?A)&5}m9FVJJyYhhnL}iEsbd8FE
zqZQeufnd&J(8&Osa%K=QFYB(o7kL+E`eZ?f@a3M<UO<GX%;0ADvfj;4m_Fk5%7Syn
zO}9@9Z0IGmv3A>uFd}<s!mpknF}ttj3UD~VB8)oE-oBp%`DRtc03t1K*sWUG0=Ecx
z79~%F8RSh6x4P|rnuqQmy{^^Xv>I5JQE<+cSUvU$tA{clKckK$dWMy_7jrVnFH9e=
zeF2)1rci_eq;^*&TtpIGpaT5~Fr2(AGM^Srcn{(pz&juU*>-6cTcR$HPz1|?2zz^-
zj8)?%LYP1S2h0l;DSXV_p%L5tjdrhp0S*^{@G4cIZGvR8_XVU|0KU|SOI18+y7<wz
zA+n$>2WG@>S&Lp%UqIZJHKyO{HbsA3ToP8@@)U|rIL#+!o=0+J-UU`J$;oK7(%X@q
zdg%7K0vt@_MDz^lXsbF4fGDdXD#;1APO}$oo39*$^&{@Ed|`<Aout*jqsRNNAZo`}
zaSy9Uz8<$xZ6Vm0aWl4DJ}MCH{t5!!lRYf{J&y%p5dyzbfc-qun@EcbmvJUZ7y=a+
zfSL}+STg<<>^^y*MdE2d8&Y1Z#qD?cd<H_xODrAhVC2H?-+s=OT8Ou(auHC#aPGS(
zo#wLPeyhqFnjsH=Q~-@Hagp{Jj*qIaInrHF?<GK7^B&?k5()3$zxfTsMVM6(TDBM6
zXTFMde|!fK+v7DLLUE6Dth#w3YFejwZCJAgVqgu|^YA$%6V_T;+09dW{Z;`EW=xb?
z43VX)Ky)X8PQd=6TlFysSTOlJOUxe;(h!sX7rKA&DiYWJX}OE@@QD=VTvp%oIQIPG
zOiTFlbm27LpUVhzefH4!`Tl74A542dD1abXdsYdloyaB)VTj^e=v{i;iT2-~oND?4
z5d~=5F8Kjn=l&Pb+c#UgRvN)BD!OeLaR;_tkP(Qvy;Xqve0*`@i&j^4Gh<=`Mga~m
zE0S~~LU(si6zPtFbBAWF8vD4ZFI<b7`yza~)0Z<5Qdw$QJWo@T7tkTjfJ#JjSgE@$
zC$n9V84J{E908{Q2LvJ#c2>MH^X1CauD6*YB$23IybE1EeGh5h&-I#%^AOti`};+l
zkN561Op#s#62=BalCPUPG-ioE+x-D)0v$0;%#<;w^o{*hs6CrS;or|&kK?l6M61<{
zKrWwT=b@%md#t|cF%<Vc)o+vfn-O%03fwNK@!2_<<XLee&t}t5?|}UROq|G4Zm-h0
zM7Yur$A>j;C`b4cdVKH-B6e^0`eF9~IU>$yl_+R+_T>Rp)nPyVP9}ahVei)0{xhzh
zxe3pnOs<Z;0jmHR*(|eE`YQo$2LTDUX8T{hK=+yd2T_CHSD@PL*mCK0*f{*QK)mb{
zyZtP?L%MzDHF2fBlA*if2CxDYghPs4=I$%=;zFy7NLl=Go=+FQIP{9FuG||Qg?P#|
z0AYm+jG8knVO0RqZe5a!)xx-XUPY42;aUWstI@F{cjjyHJW08KSem?|hpy^2DOfuG
z)rM@g0IFoYpSN15>VRHr|Gi}5#EG8Qb<`s;liLLB7huSo(hf57LI550%0$%OjNP&h
zz2AElv76WE?Pgg!S41?H-|=k23od~NmCStC?2N=Ifk*oPC=OT!7&?1zcL~xrfc64q
ziy+t6q0QnS&~5HyL>1<>*xu>}BDQD!$h)ykB=Q6rh^h|EuRB8HC(OH?ybup=oqz&X
z0Wz{n{{e~T18CopctmlkPG8JK=lRnRQd!ngbIX4hL2ld5&%lPO?+m;kH%&V9ty1f{
ze(rU?uj=6GWCg4O4Ed<+Bw1GH?T-{~Tn_smo)9moi$B@nwX*Zg%nPBkTOaM=YEjZK
zz(B-+uZ4<1IhhIh0Y-bH<OZYy@Z@y+WAQJYx>@Rztw3sg6)|hi3>`OTGTQw4eajC@
zducYS+IPl^Tc1XGm!4J@$}pcB5=rg6Nm2OLxx<sbHGcr#U<?=qV1|TQ>75{{r$eH1
zx1w9$=Xg@jGD>VTxjuT^M)aEYq9ye>-JL2&Yywu@{A7Sec%lr%_r>o`m>vj0ZhGg)
zFBL#r>^TD>5K<ivCyoQuQ$V-`j2<8)h%B)^Xp1ND5{eFcp-E(JC9GSDKL33R5qk>t
z%E9t>qITzBL&sw4plcy6z5)xxp;vv&5$1Sw-sQ;weds-0?tY~J{6*JLR77-xZ0`?Z
zkpO!Vm^*+d=J4lN%Mg#p@hWy}$zly4Z2aWkzSLe`iP*ElZ%JG7egFU!$4Nv%RMwcd
z?AmeWrCJf&`dFdAfdix}4iLRlU2l8*^8mc*ZAsF8p#VHDJpy$&6B1twrZWJv26F_6
zn#>2TMFbwk8z@9WwiLOXTK)Y_UwsIBl?ZF_PR?#i0v5lEk}WH4e+G`YBt6ajrj3Y`
zYPI6G-LYG9FMRgHM+5Svw<TfvOaVB%X9&W=+rmKuK<ae>^#>5u62S+4S0Lj7yo~~M
z)Z+HLe*7*ve)S>5r1=dHp;8=rZ<~aQPCfjFEIovXOGEK`W$$+<?TOxzckw9aw&i;I
z1zH=gD}ZL^)W-ILN>_kb<oW)c;%G#8DkMCE=dr1{9lFl>58D6oxn*U@jnH*)TVd|3
z8T9~mo_c;jMR<x$Br$g}dQN{yWW<#+_{uC-!O!l>!JqqiRRQ?ZQ`^AhycsHu0%;dm
z;;jMwAYx@C0%RF%v*DfMEL6Pw6%y7jv%Ds!ej*!Mip#Ez!*0cvORt3*;&$OXqr-aM
zo>_~L>OJLoM2Z`8MkRrUk5aaM={a)$!(h1rXl2r~(_=t<76=o-bP`DC;~HYY%MxI>
z1K}Y+XeeNp0ZBrAwTcBVlw<EV{&ydv+HA-_cQDpncfZdH_PVpwv`4$wF4Y1B56XqE
zV+q%1)#vB9gVW#pSgHWbAk6C53pU&V;ta4>=&EH93qQmTM1%ohp+Jc3kVr}Kp7fTl
zO7X|bJK(JLBb$H!vqgJOJVOg_u1gYSPXhx)tW>*2-=N#<$=ZW{{{wb0;ifES!PLOu
z#2A&9DL{iS|D+2c(My2v<?DPwM(p@;(G81VR6uTo!n!gAzdX4OI~G+M<JJqUtJ-zY
ziuG1>>>e=T&EoE)!#A@u_i<yfQbg(<qnz9S?FI39eF#ewfTs)yLrm2*VD&kG^i{1A
zyS^}U;^P|3oMxbCbu|{;vlY%N|JwbXkug|#>r>c$(m4UM_(djMhXpy>t2Rx=N-_9}
zELXwPUSFMF7|?VD5OF$)=W!r<6b+@%TLwu2Vj>&<#J`&Z2A00D6S?p2X&J8<TZqNK
ze&k(#{Yw2I;t;V?g?Z>U_djU2=<8;4p&58J%awnR7sctdp-feP2D2yqj(vyRr$7+5
zw=IL%`4i)S$S_^IrmI%Pyiprbk?&|3x0hOog!a6PMqtD6+XCjf()bN4(R<2sh|b^G
zVj%!#Ov_U8M|(+}ULD3X1>o!q8PcY!z|vbF=reo7Zl4efM1|{Sdhfa#e4h1}?)Khj
zSajkUSb6Ky5W#N#4GepArS@9=@!4;{R$Hx?-1(zj`IqZ$97yfVQ-DwV^@Wq)0nk@h
zoUhpVW1|}W^yb1cu=b-O{P}<W6XaIbr5Bdp@f>Q}is#S#7)0%(t?RVBh_;Krhw%F7
z1qOc0a^;H<m7@+!Q2@>!5Cy5?^L?2@XSP(&|8EHjFHcfj%QpW(B3GS^Undn{%h&!<
zeWNP5BUaq@49dIo^6P~m%D<#8{0yDuPuHs7xe+e1W|S+x5BXDol}Qr!SOK)qhU%E7
zKy<&ZonH_xT%B!Owdn0RoX7e~1z(QcgtD#rcQ2FVbOf6E=s2ty{UCOpei69om_4h8
z*M(QqIgQ$}1zkR!g0_GD0LkU%^IVM04#joCI20aLq0mBz9w~r!(KR=H5LCPiIxH~1
zsVNfXPC^V29jR*)4{lVRSBC|6Z9(;J-xeQhi0vPTyo;}fsO0Q#AYQ8!VGPN?eTDYF
zeu3~kg%H7QZUbYxs??t}2D<{H;H?opJyU>brz9fE^&Xfm({1{Mh5)VOwRj$*ATGXs
zp0Ev$3g7wvRoRZsSB}P}!8iJ4>2kTY1}Q(!N7{F@wWplKC6~v**u#o+Y8LW*Urxhg
zW)4N*nF7o?X*g7x0n&NPD|Y|*Xdp&+)broeG6S1GFVVsuge%k+AOhTWopK&>$2{U!
zue6KZUF1N-Z&;2l^QIwg<0{W~{KJLID2I$QM%U;2zL=896YsVH@Z8f|Lv<|JAI_|g
zESn6pPH2epF$k){$epnVE8pD>aTxXm6!$t=d#Ji9rL(8jqbcMQGeS%DXpi@`{quV*
ze&3=Rr*%Z?IisB07n?%3A0cr|0kjLRIq8q>i~X9Q+w>7khle$oKYHDs2MJ1XGM2tx
zh;=!8ed3D{?-4J#Pn0n1>K6TG&v{6B36g*RMtiJVm^v1}SF940^GCUM{9ra8zQ*UC
z0?a+-IH-y!O4ZE}1LE-OhWR7LaMq|;^!#>g{l?oaP(n@XWbM7Ky?sQ|nr}cHY=t{h
z<T{IT?&6W|$X(tG1t;dKMkxiK`i6V!Mm4Me{KEhnipuW<NzZ@~rkgae>$gn;LXDe0
zVhl&Qq8)&D{O;Wd(E6xYtiR?S>^SREA5?Q-NKU7==tZTA#I;Kh|JO={74L2_d_niT
z=xs<mX0)>)pzDA(#;S1z_@Zws)JX3GxKOX`w06Sl)4p{>Mwc5<yVr^D@6Uq>h42=z
zB;&6kH(|>aqoIW8*L6?nJ8-BKuTzQ`{kToJT9~qSdn>#FJ^{XOw5#A{pA2o`poUi?
z&q*H$6>~s3lUoiDFAl!R`a*;n<F|U36W`vm#cP*f!oQz?K?c^1ybCP5_tnxhZ{k4Z
zs)wzn8le@%h|b@H*2{m^cKfi>A|EdJL#b!*vstc!M|JTOK#dG308boXL$8W|L!z+|
zmtaOfggyulkeg7x&7mnkRiT@=nFhucg{!uob2&DQxYK-hr&#c+f{?Pkh$`HMsKPCX
z+P+o0u@&LT;&AKHrIi6b4K-zcd$dw;i=jRN(Adx-=Ir#eeHGgN&>iQ0umGYW8e)Ik
zgpv)l_;&nO2vf*v5Qp8BH$Q34OO4ufIU}s32(g=UHFGBZuT=;u-lauj3h#|}S>-d+
zMxQj9F)K^SAEB>x;Iz`M0NOm}q~8e%ue!yahYC=XTZ8Y$Z_y6JR)IZIM%)?gv18;Y
z><;UQQY1iu9SS6fGAu6Gl}f}EyI?<{g@PCb3<U%iz-7$X36ct9^EYzGuRa_VRq$7I
z<gNnPtI8q#_5ljJ7;09QYx`FLN`I4N>sNs6^jJtd2cYxZ5`u>&(C+0``0l=~a8{dt
z3v7>)(fWi4bUHsCsRLqRuPg`GIy5WKi4fEwO#5#wh39>zUUA3gbj1#v3#ux)>HxXc
zWwTYsmPc1tN5Yx2c3&0c3E<bLTS$zp{>A;zxLSCKaBDV<blS;`2eXuX;rIwx4Q`5I
z{R;4Lzf+*{$KZpCaT*b$hlk+8#g&>DNO72_05NHyNINGMX=leEIxP&L(K58a&cY&~
zzA;mazeR+7C=L2U*OQVnLQ}dbij=)SN5Y7-{H1NpzDi6_g}c<(GO@kZUx+f34qXbM
zWqV=sEs*F101<8x;Gr9I`=Sbbf8SQHUJFRn(6W*CC))|Oa0&JZ841UQBe8opTK^*w
zaUH{83zH6wiB(l##~wgALea$T_cRS#DsI1Z!DOV{!)$x+X7H2Z9$Z%^|7ldeFKGSk
zFjwuPnJB9AAF|A)M5hAui~@zd2BJ}hLLUyM)x(Rh?Tae0@WHJRF+q||f@Eu0;IdtU
z6he?g2=;Ipp>Z-oqHPF^lM$9+Lqw7t;fZ!cCEF36VAmGB=+~qV%TW*PDsJphS_S4o
zl(EcEiNL8y?ZP&EKp?l@Gd6e1bz!Rq(+3fXa$hF4m+0ydppA4Yz$u+Titzo5bVv8W
zgHVXtQWuKXi?1+4k{fn)$u4RCmBS>+p#)j%_(CDH-$*lONFrmQM-^2-Nuw4{F4XAL
zD088q-Eblxb&yj=5J{r2R3MxM#Ha5Im&<wkjo7)({mBlDp86DE&dKLPRfPiRtMt$m
z?;Zrhc}1MUOS7j0s6C?M#6ByA{z(~29(0F}$w-a}vDrQ%K;%v6lDRwMc-lv#Jc_C_
z<Wg@Kh3%`4#zXJnGSW2}EFwP{6Ayo+!mz+S2!}R2mOC9BPN1j+a2;{bC<k~r4O{lL
zJ7`6p8MclC6jtBgUliC~G*<UpN5I(YUHQKrjrqTg39m&3(1PDeD!%~Z0*|HdK|+kj
zW4DAr9C3yDQ&xGT{m--lF1muQ{<EMZG)?{fDUOdWwb#A|#`SKWqud=_Pd`EdvpRO0
zYx_470rOmKddBu)o0b*elao{7RDW;wIZ`7Gc#sllWEjJ36$RK+3W!7Sp`d_yGQ#M7
zx_qhIk$9p?_Eb6TG9rkG%0$ETS=*slWqPQS(rM~IEOc2rlz(AwSpnwuy8sG*rMskg
zOZ<6|6yFkRkAAPH21+X$^Zt|r>Mh7!K8q%LwlltowD<@crUCG$B2x|mKUL>aUOgJC
zKD4wZnpFUvxUbY<uk?u^Jl+x_L%+LO7RAsQMjAU^z^=WG`Thl#)gb9A8v5rJBPg3_
zOH*xW=K>IqP59g+M1YIIuR2`Hgky2>i#cju0lq#V5|y?O0WyEba-%So2@CK@6yoBm
zsI)Q9PeWU#SFk4P0h(xzX)qBzLps{3X90YbCH&||>IC6Kc1m|;A+Jn-x1+0N^9qoy
z`Tsu!p^xcoyHgs`Y$Alyue_?^udzTiLMd3ikcKT^V&>3OZK)SBC|eYVG!w58Tm*c}
zF1~p*3N{<*ceJ%_UIFIxI|IzK0i9*ejY`Lj;<!eKXtsS-El?s%{3e_p#2+Cc<~kZ^
z&hCGJmiN%Mm23-{!N5hP@}nQwI@zUOaUHgc#edWVxak)|GbYgf@aL-`;Vr<!3$W%W
zGFTqn2y;!g6}x?P9Z+1>bR0foFH~gG@TI0#LdXW>8Y%T|Nc0Q<Z<dx5i+uyTq^q-#
zx55-z1~`%?zW}@>-HxqzXkVPWD1Tz?HAkaDG4eo$QQU{O7rVXi_=vxzc7A46WIsR+
zy_GT-SrQ8~9jUz)nda|vi+1poB?J8niPhV~mF=HpiadrOG<^u>$>|YDgm~X;oL4Sx
z3_OwK_PjY2ptKCAt#3X9OW6J@--tEKKJnD`*%Ylm0JeO4+B?h;0fv?X0}fJgXM`Fx
zH4|&C&nvZ@BXb65`U{YKS^}i{X&_u`IRDoZ+H^dUX9&Ic=!@6mg~?N1*_5mEFqHHq
zWY<U<yuwoN$P|0~{=~MQ0JhpCTEW1x+g$noJeF>G^{kVo6=2Q@DNyZSSmFU{iLw@+
zNo}dS_Pen2>s>&d1E{HMNN~}UlE`BBS2Jn&@^5vG<3S_sD_~3ek%7}aK+{s!ItIUK
zcU3=mZ4+UxEg?9Xe{Wg=W~X-tAZmZ6_)GxJJe1uiO~R%Zms%p6L6|vCXTy%KXW?r~
zBT|2*f1-o>IQ3g<efB+oY4#2`vIw<+&d0+IP6mTNQC+z01{C<uvpNQOu(Em63Xs$H
zJdh+@pzfD)Fq?9r5TdY_$SxC+r3YS=6boNOaEf>ymGv+9gXt5c8yJ5;b&jOWRa?y_
zy(xSmVFogN3qnVe$5a^jG0er+T^(HfO^UXeFF?OB0Ke@ISN0|^j3&@g30S!YNwG7{
z_WL(S|7++P6D>R5BBHBXx|ug12bICU$`Wq9zP=#WK)++IX)|YllOG1F&mKDx;eW#(
z{s>+9t5=JUY8hkpl-r0UQ9;6#`in%^rZ8^Ia^-(d$53dqJ8QMMGk~}NyV)J20o6zI
z`Ac7;(lwH@to8adC6^ht4yP;7Zrt0MAiF(ax;0PP_HoeT)3P)hRRHZ0ERVhf*u5G+
zEsyIjEkx;`KjC!VKqFT9%v8um=hzyX>+^k12Tz|O-38`HB9wyZ!HX_^ORRAP`1JT_
z)JH7?p{qVL0osaD2nk~`Wa*bgp2hlmC;^&cOMOxTJth)o+`&aaEd$RxT&|an)zD@)
z<#uE@&OW&<NLdP^WOtATKpzq6umg&EJ7q5a%pd5TV(-{rV)ci8i`b2G0K34_G>0OO
zABQdF{=iS5(9rl7Ap3;lA=!Te;C?x0|CN9Xj9(zrvovIhxaaT-$VRKE8hiL^uwi$o
zLX4SElzT>DN3mZp6F@{Xt^jlUo&%M{%kRb?^Yw4$MZJ^hkd<e#az(yXaX#*fV49rz
z0TYeX+kbx<lLh2*-82e?-g_@eFM$Eju5ksJbJA!qy=S6d+P9(*m75uxA@S1~ylf_k
zOD{i!X>x}fnfOfucQ3gz(WvX3+m`tuI{`sb;|ef4{aye^$8$I$u3thnoOl;f=arP1
z<F{eJQ|zfHL!|{oEoX``VGEc?XSoUtm1+!#Rp~_{oA?5xKeeysy}60-USz6aD5~36
z%JEaE^crd%E9v@G)m|sT;DFP@lG9X|?HdA)Z=vgM6+CK;tHA9-T?R=zYMVFp1rWQx
z_zDCXh~2#e%u7Ld6@?WG>CR0@)H(E5rlz5NBHP3RgmiH;G?qc-M>?nl{~ZYNC`S-H
zk-!lOpru02Nf&l#Al(Aj0ayp{La5T0K+Ph`Tx+O^ttUb>tFNdb8Y<gf24QSt(V-%#
z1)yhSSKYs^$8Nv>qM0QZEAbqu0NJO7Lvl<7DAUS;O~UO0(Lyl4j}ZAM6i4jD=!Fh{
zJ><5;vz9AtOMM6+@dm-+Niw2_&%cvg%A=Q~(CrF!EzxkS{eGkZO!-F~Vr-v)`5ZqJ
zhVa~oon8d1Z3plTWN8-Siq_M>Jn{dJ3V2UW8zm9m0C2Di+Nl!Hb~=?i$DwfVQNgI6
zFma>;%uG*02<8Fk?*}w8h|8eTHW04{q~%bRWss$fSRGwtR<SBS;PY=1rr6Rh*mns2
z@UZ%!3)tnlGYf?qj`cDoX3te4CXfh&Q0Ie?ZuVgM@UgIS^Fde%g?<Df7tC7_8di!J
zd#yKP_4UzfZmVhb4t<$fY(VYzW6o7w7@mcEQM%kO?=Q@ifOoMSsQ`0MO#xi<!8p-E
zQiQigq#TMrQI@R;L>s{P9V9IQIo4zFs$!yJuXM+Bbm*ko_zN_+Lf5M<*NtOPD8f>L
zV1WdVRDjRY(@+mF0liEZPb_d@pNqGRN+6;y3A+IlfshZTLa1B-*_nqBdkHRES{tYb
zSQBKWp_q*1q)?lE9>A#z<6f82>f>?nPJXgkJOmP+Mogd+Izh4v1rSN`O@XK-r~s@2
zB>pWz4QfEV3q;$&Tm+`#{fqoBNW2>o%HdQi5E@Yjhw8%GQ0LKT!+SdU*+>bmk)>>A
z{=8BRopL7v=N`jT-hI)(kwfsQZ4l~w5=?D1g2Y?Vtk#1h7nmx+Tms@fu*us{ua-hm
z>tK@{P}B;9SC-<EO_j&`F7C-hHn>95`bW6(e-9?Lcp^!CeVYh}?iqrpdcr1A7Pqg<
zpW|oru^DU?ltAMWa4Y*LD9oS)jur_772s%@$siwYNg${IZiy|}>1dHaPyvpXnGEvb
bmIVGEX9~YSC`@R#00000NkvXXu0mjfIH!pY

literal 0
HcmV?d00001

diff --git a/frontend/public/android-chrome-512x512.png b/frontend/public/android-chrome-512x512.png
new file mode 100644
index 0000000000000000000000000000000000000000..3e6a8c519e3ca0e5751f437e2234152e5ba89145
GIT binary patch
literal 44014
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

literal 0
HcmV?d00001

diff --git a/frontend/public/apple-touch-icon.png b/frontend/public/apple-touch-icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..740eaa52f4519897f98073659f39c77c51920928
GIT binary patch
literal 12375
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
JPDHLkV1oSy;Q{~v

literal 0
HcmV?d00001

diff --git a/frontend/public/favicon-16x16.png b/frontend/public/favicon-16x16.png
new file mode 100644
index 0000000000000000000000000000000000000000..9e4a82527f701d38942bc6d8cbfc291e3d749fb1
GIT binary patch
literal 725
zcmV;`0xJE9P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px%k4Z#9R5(wSlU+!YVHC&z=iRGYhUR9D@MB#>N;y)T-iW3kbYUbRON2lNQBiqQ
zmIM<DQ*SJzn_`(YB@1$s@FI!6C_l;~rm?(m7v<-L;x;vL?&CeNiEERhdf>S^=l}mb
z=WxzL_^-oMX>}DaQw3Nm1_>Ja7k|msH=<gbbDY8T0QQGH%%A@X(Dyith;Vy#VOl$8
zHUdP*scAx7aykHN`y=3#iDR5et`-6=01!Oxc?7TR{$<D$l2CB569GbD6rc;~T1gbD
ze(XwHdV90)2#AWdw&?zD$GD|62pI3tE45*OS=5v=U<C;~MjA|5%*qdYV^&wd1o-3P
z;aOUM<n=(2tT9;i%FYnLEYnnj&<-GWw&*ZM&ozh5DTB|DVKrf>=^=dE<2U1WNXnd^
zN(xXXQZpn`xJ9560E+ilI^f)=gKXUcZAS~z-u1y&+k&~mvQ4wZj1tQ+)j%*1ZlN0*
z<+?&%_uM>also5<cjG(~CMPg+upDD&8-Gm>xNgy_E^P+F0A`S__e`m2yyAtftq!p(
zZY=N4z;I(10&>NMo_Rp&RF&R6O};1qKgr94TxNAGZ_9dmat4Cm3vYZP2AjLFrcMoM
zlfHg}w!N{wc4nwGax$R`*pmAZYE{1D^%{norXh*37%|>~d+z}xI=(>jsuw9k{UGLM
zgMYFi3c!}^EI_nFt;FIq;B>5E=bji$$}<nys$UihexEV)2(Tpcb73{6?a=^h-U%?@
zgD3-32^%@r$|%Z5avzZ<(I;XqxQPJD4F0KCTNjJis=Ee8L|HrxNCwi6I)dT{VtPL@
zJvIcUx_<ZZh%LIKAkGE}-{AFqpsKNnNMUeKYA_oWi_HH7Gj8@tq+)FS00000NkvXX
Hu0mjf$;m_v

literal 0
HcmV?d00001

diff --git a/frontend/public/favicon-32x32.png b/frontend/public/favicon-32x32.png
new file mode 100644
index 0000000000000000000000000000000000000000..6a7b0f94bd44dd5a5110a49a5581b05d9f0be56c
GIT binary patch
literal 1612
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
KMNUMnLSTYJ$N`A}

literal 0
HcmV?d00001

diff --git a/frontend/public/favicon.ico b/frontend/public/favicon.ico
new file mode 100644
index 0000000000000000000000000000000000000000..4e26adb53eb655a5788f881c812808cdc12a4506
GIT binary patch
literal 15406
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
a=R?TC|6*+e{)4d3iHnWt|NQ>9H1HqH9$v8k

literal 0
HcmV?d00001

diff --git a/frontend/public/logo.svg b/frontend/public/logo.svg
new file mode 100644
index 0000000..8845bab
--- /dev/null
+++ b/frontend/public/logo.svg
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
+  <circle cx="50" cy="50" r="45" fill="#1E3A8A" />
+  <path d="M30,30 L70,30 L70,70 L30,70 Z" fill="none" stroke="white" stroke-width="3" />
+  <circle cx="50" cy="50" r="10" fill="#BE185D" />
+  <path d="M20,20 L80,80" stroke="white" stroke-width="2" />
+  <path d="M80,20 L20,80" stroke="white" stroke-width="2" />
+</svg> 
\ No newline at end of file
diff --git a/frontend/public/manifest.json b/frontend/public/manifest.json
new file mode 100644
index 0000000..232ac66
--- /dev/null
+++ b/frontend/public/manifest.json
@@ -0,0 +1,20 @@
+{
+  "name": "CosmoCargo",
+  "short_name": "CosmoCargo",
+  "icons": [
+    {
+      "src": "/favicon.ico",
+      "sizes": "64x64 32x32 24x24 16x16",
+      "type": "image/x-icon"
+    },
+    {
+      "src": "/logo.svg",
+      "type": "image/svg+xml",
+      "sizes": "192x192 512x512"
+    }
+  ],
+  "start_url": "/",
+  "display": "standalone",
+  "theme_color": "#1E3A8A",
+  "background_color": "#0F172A"
+} 
\ No newline at end of file
diff --git a/frontend/public/robots.txt b/frontend/public/robots.txt
new file mode 100644
index 0000000..4c5e606
--- /dev/null
+++ b/frontend/public/robots.txt
@@ -0,0 +1,3 @@
+# Allow all crawlers
+User-agent: *
+Allow: / 
\ No newline at end of file
diff --git a/frontend/public/site.webmanifest b/frontend/public/site.webmanifest
new file mode 100644
index 0000000..45dc8a2
--- /dev/null
+++ b/frontend/public/site.webmanifest
@@ -0,0 +1 @@
+{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
\ No newline at end of file
diff --git a/frontend/src/components/BrowserRouterWrapper.tsx b/frontend/src/components/BrowserRouterWrapper.tsx
new file mode 100644
index 0000000..d2c3368
--- /dev/null
+++ b/frontend/src/components/BrowserRouterWrapper.tsx
@@ -0,0 +1,12 @@
+"use client";
+
+import React from "react";
+import { BrowserRouter } from "react-router-dom";
+
+export function BrowserRouterWrapper({
+  children,
+}: {
+  children: React.ReactNode;
+}) {
+  return <BrowserRouter>{children}</BrowserRouter>;
+}
diff --git a/frontend/src/components/ClientProviders.tsx b/frontend/src/components/ClientProviders.tsx
new file mode 100644
index 0000000..dab7fef
--- /dev/null
+++ b/frontend/src/components/ClientProviders.tsx
@@ -0,0 +1,23 @@
+"use client";
+
+import React from "react";
+import { Toaster } from "sonner";
+import { AuthProvider } from "../contexts/AuthContext";
+import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
+
+const queryClient = new QueryClient();
+
+export default function ClientProviders({
+  children,
+}: {
+  children: React.ReactNode;
+}) {
+  return (
+      <QueryClientProvider client={queryClient}>
+        <AuthProvider>
+          {children}
+          <Toaster />
+        </AuthProvider>
+      </QueryClientProvider>
+  );
+}
diff --git a/frontend/src/components/DashboardHeader.tsx b/frontend/src/components/DashboardHeader.tsx
new file mode 100644
index 0000000..ce6e181
--- /dev/null
+++ b/frontend/src/components/DashboardHeader.tsx
@@ -0,0 +1,127 @@
+"use client";
+
+import React, { useState } from "react";
+import {
+  Bell,
+  Menu,
+  User,
+  Settings,
+  HelpCircle,
+  LogOut,
+} from "lucide-react";
+import { Button } from "./ui/button";
+import { useAuth } from "../contexts/AuthContext";
+import Link from "next/link";
+
+interface DashboardHeaderProps {
+  onMenuToggle: () => void;
+}
+
+const DashboardHeader: React.FC<DashboardHeaderProps> = ({ onMenuToggle }) => {
+  const [isProfileOpen, setIsProfileOpen] = useState(false);
+  const { user, logout } = useAuth();
+
+  const toggleProfile = () => {
+    setIsProfileOpen(!isProfileOpen);
+  };
+
+  const handleLogout = () => {
+    logout();
+    window.location.href = "/";
+  };
+
+  return (
+    <header className="py-3 px-4 flex items-center justify-between sticky top-0 z-30">
+      <div className="flex items-center">
+        <Button
+          variant="ghost"
+          size="sm"
+          className="md:hidden mr-2"
+          onClick={onMenuToggle}
+        >
+          <Menu className="h-6 w-6" />
+        </Button>
+      </div>
+
+      <div className="flex items-center space-x-4">
+        <Button variant="ghost" size="sm" className="relative">
+          <Bell className="h-5 w-5" />
+          <span className="absolute top-0 right-0 h-2 w-2 bg-space-accent-purple rounded-full"></span>
+        </Button>
+
+        <div className="relative">
+          <Button
+            variant="ghost"
+            size="sm"
+            className="flex items-center space-x-2"
+            onClick={toggleProfile}
+          >
+            <div className="w-8 h-8 rounded-full bg-space-secondary flex items-center justify-center">
+              <User className="h-5 w-5 text-space-accent-purple" />
+            </div>
+          </Button>
+
+          {isProfileOpen && (
+            <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-space-primary border border-space-secondary/30 py-1 z-40">
+              <div className="px-4 py-2 border-b border-space-secondary/30">
+                <p className="text-sm font-medium text-space-text-primary">
+                  {user?.name}
+                </p>
+                <p className="text-xs text-space-text-secondary">
+                  {user?.email}
+                </p>
+                <p className="text-xs mt-1 text-space-accent-purple capitalize">
+                  {user?.role === "customer"
+                    ? "Kund"
+                    : user?.role === "pilot"
+                    ? "Pilot"
+                    : "Admin"}
+                </p>
+              </div>
+              <ul>
+                <li>
+                  <Link
+                    href="/dashboard/user-settings"
+                    className="flex items-center px-4 py-2 text-sm text-space-text-primary hover:bg-space-secondary/50"
+                  >
+                    <User className="h-4 w-4 mr-2" />
+                    Min profil
+                  </Link>
+                </li>
+                <li>
+                  <Link
+                    href="/dashboard/user-settings"
+                    className="flex items-center px-4 py-2 text-sm text-space-text-primary hover:bg-space-secondary/50"
+                  >
+                    <Settings className="h-4 w-4 mr-2" />
+                    Inställningar
+                  </Link>
+                </li>
+                <li>
+                  <Link
+                    href="/faq"
+                    className="flex items-center px-4 py-2 text-sm text-space-text-primary hover:bg-space-secondary/50"
+                  >
+                    <HelpCircle className="h-4 w-4 mr-2" />
+                    Hjälp & support
+                  </Link>
+                </li>
+                <li className="border-t border-space-secondary/30">
+                  <button
+                    onClick={handleLogout}
+                    className="w-full flex items-center px-4 py-2 text-sm text-space-danger hover:bg-space-secondary/50"
+                  >
+                    <LogOut className="h-4 w-4 mr-2" />
+                    Logga ut
+                  </button>
+                </li>
+              </ul>
+            </div>
+          )}
+        </div>
+      </div>
+    </header>
+  );
+};
+
+export default DashboardHeader;
diff --git a/frontend/src/components/DashboardSidebar.tsx b/frontend/src/components/DashboardSidebar.tsx
new file mode 100644
index 0000000..0c7d80e
--- /dev/null
+++ b/frontend/src/components/DashboardSidebar.tsx
@@ -0,0 +1,217 @@
+"use client";
+
+import React, { useState } from "react";
+import Link from "next/link";
+import { usePathname } from "next/navigation";
+import {
+  Rocket,
+  Home,
+  ClipboardList,
+  Settings,
+  HelpCircle,
+  LogOut,
+  Package,
+  PackageCheck,
+  User,
+} from "lucide-react";
+import { Button } from "./ui/button";
+import { useAuth } from "../contexts/AuthContext";
+
+const navItems = [
+  {
+    roles: ["customer"],
+    title: "Kundmeny",
+    items: [
+      { icon: Home, label: "Översikt", href: "/dashboard" },
+      { icon: Package, label: "Boka Frakt", href: "/dashboard/shipments/add" },
+      {
+        icon: PackageCheck,
+        label: "Leveranser",
+        href: "/dashboard/shipments/ongoing",
+      },
+    ],
+  },
+  {
+    roles: ["pilot"],
+    title: "Pilotmeny",
+    items: [
+      { icon: Home, label: "Översikt", href: "/dashboard" },
+      {
+        icon: Rocket,
+        label: "Tilldelade Frakter",
+        href: "/dashboard/shipments/assigned",
+      },
+    ],
+  },
+  {
+    roles: ["admin"],
+    title: "Adminmeny",
+    items: [
+      { icon: Home, label: "Översikt", href: "/dashboard" },
+      {
+        icon: ClipboardList,
+        label: "Frakter",
+        href: "/dashboard/shipments",
+      },
+      {
+        icon: User,
+        label: "Piloter",
+        href: "/dashboard/pilots",
+      },
+    ],
+  },
+  {
+    roles: ["customer", "pilot", "admin"],
+    title: "Övrigt",
+    items: [
+      {
+        icon: Settings,
+        label: "Inställningar",
+        href: "/dashboard/user-settings",
+      },
+      { icon: HelpCircle, label: "Hjälp", href: "/faq" },
+    ],
+  },
+];
+
+interface DashboardSidebarProps {
+  isMobile?: boolean;
+  onClose?: () => void;
+}
+
+const DashboardSidebar: React.FC<DashboardSidebarProps> = ({
+  isMobile = false,
+  onClose,
+}) => {
+  const pathname = usePathname();
+  const [isOpen, setIsOpen] = useState(true);
+  const { user, logout } = useAuth();
+
+  const userRole = user?.role || "customer";
+
+  const toggleSidebar = () => {
+    setIsOpen(!isOpen);
+  };
+
+  const handleItemClick = () => {
+    if (isMobile && onClose) {
+      onClose();
+    }
+  };
+
+  const handleLogout = () => {
+    logout();
+    window.location.href = "/";
+  };
+
+  return (
+    <aside
+      className={`h-screen bg-space-primary border-r border-space-secondary/30 ${
+        isOpen ? "w-64" : "w-20"
+      } transition-all duration-300 flex flex-col`}
+    >
+      <div className="p-4 border-b border-space-secondary/30 flex items-center justify-between">
+        <div
+          className={`flex items-center ${!isOpen && "justify-center w-full"}`}
+        >
+          <Rocket
+            className={`h-6 w-6 text-space-accent-purple ${
+              !isOpen && "mx-auto"
+            }`}
+          />
+          {isOpen && (
+            <span className="ml-2 text-xl space-gradient-text font-orbitron font-bold">
+              CosmoCargo™
+            </span>
+          )}
+        </div>
+        {!isMobile && (
+          <Button
+            variant="ghost"
+            size="sm"
+            className="text-space-text-secondary"
+            onClick={toggleSidebar}
+          >
+            {isOpen ? (
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                width="24"
+                height="24"
+                viewBox="0 0 24 24"
+                fill="none"
+                stroke="currentColor"
+                strokeWidth="2"
+                strokeLinecap="round"
+                strokeLinejoin="round"
+              >
+                <path d="M15 18l-6-6 6-6" />
+              </svg>
+            ) : (
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                width="24"
+                height="24"
+                viewBox="0 0 24 24"
+                fill="none"
+                stroke="currentColor"
+                strokeWidth="2"
+                strokeLinecap="round"
+                strokeLinejoin="round"
+              >
+                <path d="M9 18l6-6-6-6" />
+              </svg>
+            )}
+          </Button>
+        )}
+      </div>
+
+      <div className="flex-1 overflow-y-auto py-4 px-3">
+        {navItems
+          .filter((section) => section.roles.includes(userRole))
+          .map((section, i) => (
+            <div key={i} className="mb-6">
+              {isOpen && (
+                <h3 className="px-3 mb-2 text-xs font-medium text-space-text-secondary uppercase tracking-wider">
+                  {section.title}
+                </h3>
+              )}
+              <ul className="space-y-1">
+                {section.items.map((item, j) => (
+                  <li key={j}>
+                    <Link
+                      href={item.href}
+                      className={`flex items-center p-2 rounded-md transition-colors ${
+                        pathname === item.href
+                          ? "bg-space-secondary text-space-accent-purple"
+                          : "text-space-text-primary hover:bg-space-secondary/50"
+                      }`}
+                      onClick={handleItemClick}
+                    >
+                      <item.icon
+                        className={`h-5 w-5 ${!isOpen && "mx-auto"}`}
+                      />
+                      {isOpen && <span className="ml-3">{item.label}</span>}
+                    </Link>
+                  </li>
+                ))}
+              </ul>
+            </div>
+          ))}
+      </div>
+
+      <div className="p-4 border-t border-space-secondary/30">
+        <button
+          onClick={handleLogout}
+          className={`flex items-center p-2 w-full rounded-md text-space-danger hover:bg-space-secondary/50 ${
+            !isOpen && "justify-center"
+          }`}
+        >
+          <LogOut className="h-5 w-5" />
+          {isOpen && <span className="ml-3">Logga ut</span>}
+        </button>
+      </div>
+    </aside>
+  );
+};
+
+export default DashboardSidebar;
diff --git a/frontend/src/components/FeatureList.tsx b/frontend/src/components/FeatureList.tsx
new file mode 100644
index 0000000..9ef5756
--- /dev/null
+++ b/frontend/src/components/FeatureList.tsx
@@ -0,0 +1,96 @@
+"use client";
+
+import React from "react";
+import {
+  Rocket,
+  Shield,
+  Zap,
+  Globe,
+  Package,
+  FileText,
+} from "lucide-react";
+
+interface FeatureProps {
+  icon: React.ReactNode;
+  title: string;
+  description: string;
+}
+
+const Feature: React.FC<FeatureProps> = ({ icon, title, description }) => {
+  return (
+    <div className="space-card p-6 hover:shadow-lg transition-all duration-300 hover:translate-y-[-5px]">
+      <div className="flex justify-center mb-4">
+        <div className="h-12 w-12 rounded-full bg-space-secondary flex items-center justify-center text-space-accent-purple">
+          {icon}
+        </div>
+      </div>
+      <h3 className="text-xl font-medium text-center mb-3">{title}</h3>
+      <p className="text-space-text-secondary text-center">{description}</p>
+    </div>
+  );
+};
+
+const FeatureList = () => {
+  const features = [
+    {
+      icon: <Rocket size={24} />,
+      title: "Snabba Leveranser",
+      description:
+        "Leveranser som når målet i tid, oavsett destination i galaxen.",
+    },
+    {
+      icon: <Shield size={24} />,
+      title: "Säker Frakt",
+      description:
+        "Avancerad säkerhetsteknik som skyddar din last genom hela resan.",
+    },
+    {
+      icon: <Globe size={24} />,
+      title: "9000+ Destinationer",
+      description:
+        "Täckning av över 9000 rymdstationer och kolonier i universum.",
+    },
+    {
+      icon: <Zap size={24} />,
+      title: "Realtidsspårning",
+      description: "Följ din frakt med precisionsspårning i realtid.",
+    },
+    {
+      icon: <Package size={24} />,
+      title: "Speciallaster",
+      description:
+        "Anpassade lösningar för känsliga varor och levande organismer.",
+    },
+    {
+      icon: <FileText size={24} />,
+      title: "Tullförenkling",
+      description:
+        "Automatiserade tullformulär som förenklar intergalaktiska leveranser.",
+    },
+  ];
+
+  return (
+    <div className="container mx-auto px-4 py-16">
+      <h2 className="text-3xl md:text-4xl font-medium text-center mb-4 space-gradient-text">
+        Våra Tjänster
+      </h2>
+      <p className="text-space-text-secondary text-center max-w-2xl mx-auto mb-12">
+        CosmoCargo™ erbjuder marknadens mest pålitliga fraktlösningar för alla
+        dina behov i galaxen.
+      </p>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
+        {features.map((feature, index) => (
+          <Feature
+            key={index}
+            icon={feature.icon}
+            title={feature.title}
+            description={feature.description}
+          />
+        ))}
+      </div>
+    </div>
+  );
+};
+
+export default FeatureList;
diff --git a/frontend/src/components/Footer.tsx b/frontend/src/components/Footer.tsx
new file mode 100644
index 0000000..207269c
--- /dev/null
+++ b/frontend/src/components/Footer.tsx
@@ -0,0 +1,197 @@
+"use client";
+
+import React from "react";
+import { Rocket, Mail, MapPin, PhoneCall, Github } from "lucide-react";
+import Link from "next/link";
+
+const Footer = () => {
+  return (
+    <footer className="border-t border-space-secondary/30 bg-space-primary">
+      <div className="container mx-auto px-4 py-12">
+        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
+          <div>
+            <div className="flex items-center mb-4">
+              <Rocket className="h-6 w-6 text-space-accent-purple mr-2" />
+              <span className="text-xl font-bold space-gradient-text font-orbitron">
+                CosmoCargo™
+              </span>
+            </div>
+            <p className="text-space-text-secondary mb-4">
+              Den ledande aktören inom rymdlogistik, med leveranser till över
+              9000 rymdstationer.
+            </p>
+            <div className="flex space-x-4">
+              <a
+                href="#"
+                className="text-space-text-secondary hover:text-space-accent-purple"
+              >
+                <svg
+                  className="h-6 w-6"
+                  fill="currentColor"
+                  viewBox="0 0 24 24"
+                  aria-hidden="true"
+                >
+                  <path
+                    fillRule="evenodd"
+                    d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"
+                    clipRule="evenodd"
+                  />
+                </svg>
+              </a>
+              <a
+                href="#"
+                className="text-space-text-secondary hover:text-space-accent-purple"
+              >
+                <svg
+                  className="h-6 w-6"
+                  fill="currentColor"
+                  viewBox="0 0 24 24"
+                  aria-hidden="true"
+                >
+                  <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
+                </svg>
+              </a>
+              <a
+                href="#"
+                className="text-space-text-secondary hover:text-space-accent-purple"
+              >
+                <Github className="h-6 w-6" />
+              </a>
+            </div>
+          </div>
+
+          <div>
+            <h3 className="text-lg font-medium mb-4">Länkar</h3>
+            <ul className="space-y-2">
+              <li>
+                <Link
+                  href="/"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Hem
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/about"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Om Oss
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Tjänster
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/contact"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Kontakt
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/faq"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  FAQ
+                </Link>
+              </li>
+            </ul>
+          </div>
+
+          <div>
+            <h3 className="text-lg font-medium mb-4">Tjänster</h3>
+            <ul className="space-y-2">
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Fraktbokning
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Realtidsspårning
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Tulldeklaration
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Specialfrakter
+                </Link>
+              </li>
+              <li>
+                <Link
+                  href="/services"
+                  className="text-space-text-secondary hover:text-space-accent-purple transition-colors"
+                >
+                  Försäkringar
+                </Link>
+              </li>
+            </ul>
+          </div>
+
+          <div>
+            <h3 className="text-lg font-medium mb-4">Kontakt</h3>
+            <ul className="space-y-4">
+              <li className="flex items-start">
+                <MapPin className="h-5 w-5 text-space-accent-purple mr-2 mt-0.5" />
+                <span className="text-space-text-secondary">
+                  Station Alpha, Orbit Plaza 42, Andromeda
+                </span>
+              </li>
+              <li className="flex items-center">
+                <Mail className="h-5 w-5 text-space-accent-purple mr-2" />
+                <a
+                  href="mailto:info@cosmocargo.space"
+                  className="text-space-text-secondary hover:text-space-accent-purple"
+                >
+                  info@cosmocargo.space
+                </a>
+              </li>
+              <li className="flex items-center">
+                <PhoneCall className="h-5 w-5 text-space-accent-purple mr-2" />
+                <a
+                  href="tel:+123456789"
+                  className="text-space-text-secondary hover:text-space-accent-purple"
+                >
+                  +1 (234) 567-89
+                </a>
+              </li>
+            </ul>
+          </div>
+        </div>
+
+        <div className="border-t border-space-secondary/30 mt-12 pt-8 text-center">
+          <p className="text-space-text-secondary text-sm">
+            &copy; {new Date().getFullYear()} CosmoCargo™. Alla rättigheter
+            reserverade.
+          </p>
+        </div>
+      </div>
+    </footer>
+  );
+};
+
+export default Footer;
diff --git a/frontend/src/components/Header.tsx b/frontend/src/components/Header.tsx
new file mode 100644
index 0000000..764557c
--- /dev/null
+++ b/frontend/src/components/Header.tsx
@@ -0,0 +1,183 @@
+"use client";
+
+import React, { useState } from "react";
+import { Menu, X, Rocket, User, LogIn, LogOut } from "lucide-react";
+import { Button } from "./ui/button";
+import Link from "next/link";
+import { useRouter } from "next/navigation";
+
+// Create a dummy auth implementation to avoid errors
+const useDummyAuth = () => {
+  return {
+    isAuthenticated: false,
+    user: null,
+    logout: () => {},
+  };
+};
+
+const Header = () => {
+  const [isMenuOpen, setIsMenuOpen] = useState(false);
+  // Use the dummy auth instead of the real one until we properly set up auth
+  const { isAuthenticated, logout } = useDummyAuth();
+  const router = useRouter();
+
+  const handleLoginClick = () => {
+    router.push("/login");
+    setIsMenuOpen(false);
+  };
+
+  const handleLogoutClick = () => {
+    logout();
+    setIsMenuOpen(false);
+  };
+
+  const handleDashboardClick = () => {
+    router.push("/dashboard");
+    setIsMenuOpen(false);
+  };
+
+  return (
+    <header className="relative z-50 w-full">
+      <div className="container mx-auto px-4 py-4 flex items-center justify-between">
+        <div className="flex items-center space-x-2">
+          <Rocket className="h-8 w-8 text-space-accent-purple" />
+          <span className="text-xl md:text-2xl space-gradient-text font-orbitron font-bold">
+            CosmoCargo™
+          </span>
+        </div>
+
+        {/* Desktop Menu */}
+        <nav className="hidden md:flex items-center space-x-8">
+          <Link
+            href="/"
+            className="text-space-text-primary hover:text-space-accent-purple transition-colors"
+          >
+            Hem
+          </Link>
+          <Link
+            href="/about"
+            className="text-space-text-primary hover:text-space-accent-purple transition-colors"
+          >
+            Om Oss
+          </Link>
+          <Link
+            href="/services"
+            className="text-space-text-primary hover:text-space-accent-purple transition-colors"
+          >
+            Tjänster
+          </Link>
+          <Link
+            href="/contact"
+            className="text-space-text-primary hover:text-space-accent-purple transition-colors"
+          >
+            Kontakt
+          </Link>
+
+          {isAuthenticated ? (
+            <>
+              <Button
+                variant="outline"
+                className="border-space-accent-blue text-space-accent-blue hover:bg-space-accent-blue/10"
+                onClick={handleDashboardClick}
+              >
+                <User className="mr-2 h-4 w-4" />
+                Dashboard
+              </Button>
+              <Button
+                variant="outline"
+                className="border-space-danger text-space-danger hover:bg-space-danger/10"
+                onClick={handleLogoutClick}
+              >
+                <LogOut className="mr-2 h-4 w-4" />
+                Logga ut
+              </Button>
+            </>
+          ) : (
+            <Button
+              variant="outline"
+              className="border-space-accent-blue text-space-accent-blue hover:bg-space-accent-blue/10"
+              onClick={handleLoginClick}
+            >
+              <LogIn className="mr-2 h-4 w-4" />
+              Logga in
+            </Button>
+          )}
+        </nav>
+
+        {/* Mobile Menu Button */}
+        <button
+          className="md:hidden text-space-text-primary"
+          onClick={() => setIsMenuOpen(!isMenuOpen)}
+        >
+          {isMenuOpen ? (
+            <X className="h-6 w-6" />
+          ) : (
+            <Menu className="h-6 w-6" />
+          )}
+        </button>
+      </div>
+
+      {/* Mobile Menu */}
+      {isMenuOpen && (
+        <nav className="md:hidden absolute w-full bg-space-primary/95 backdrop-blur-md border-b border-space-secondary/30 py-4 px-6 shadow-lg">
+          <div className="flex flex-col space-y-4">
+            <Link
+              href="/"
+              className="text-space-text-primary hover:text-space-accent-purple transition-colors py-2"
+            >
+              Hem
+            </Link>
+            <Link
+              href="/about"
+              className="text-space-text-primary hover:text-space-accent-purple transition-colors py-2"
+            >
+              Om Oss
+            </Link>
+            <Link
+              href="/services"
+              className="text-space-text-primary hover:text-space-accent-purple transition-colors py-2"
+            >
+              Tjänster
+            </Link>
+            <Link
+              href="/contact"
+              className="text-space-text-primary hover:text-space-accent-purple transition-colors py-2"
+            >
+              Kontakt
+            </Link>
+
+            {isAuthenticated ? (
+              <>
+                <Button
+                  className="space-button w-full flex items-center justify-center"
+                  onClick={handleDashboardClick}
+                >
+                  <User className="mr-2 h-4 w-4" />
+                  Dashboard
+                </Button>
+                <Button
+                  variant="outline"
+                  className="w-full flex items-center justify-center border-space-danger text-space-danger"
+                  onClick={handleLogoutClick}
+                >
+                  <LogOut className="mr-2 h-4 w-4" />
+                  Logga ut
+                </Button>
+              </>
+            ) : (
+              <Button
+                className="space-button w-full flex items-center justify-center"
+                onClick={handleLoginClick}
+              >
+                <LogIn className="mr-2 h-4 w-4" />
+                Logga in
+              </Button>
+            )}
+          </div>
+        </nav>
+      )}
+    </header>
+  );
+};
+
+export default Header;
diff --git a/frontend/src/components/HeroSection.tsx b/frontend/src/components/HeroSection.tsx
new file mode 100644
index 0000000..a03fe06
--- /dev/null
+++ b/frontend/src/components/HeroSection.tsx
@@ -0,0 +1,73 @@
+"use client";
+
+import React from "react";
+import { Button } from "./ui/button";
+import { ArrowRight, Rocket } from "lucide-react";
+import Link from "next/link";
+
+const HeroSection = () => {
+  return (
+    <div className="relative min-h-[calc(100vh-80px)] flex items-center">
+      <div className="container mx-auto px-4 py-16">
+        <div className="max-w-4xl mx-auto text-center">
+          <div className="inline-flex items-center px-3 py-1 rounded-full bg-space-secondary/40 text-space-accent-purple text-sm mb-6">
+            <Rocket size={16} className="mr-2" />
+            <span>Ledande inom rymdlogistik</span>
+          </div>
+
+          <h1 className="text-4xl md:text-5xl lg:text-6xl font-extrabold mb-6">
+            <span className="space-gradient-text">Intergalaktisk</span>
+            <br />
+            Fraktcentral
+          </h1>
+
+          <p className="text-xl text-space-text-secondary mb-8 max-w-2xl mx-auto">
+            Tillförlitliga leveranser till över 9000 rymdstationer. Boka din
+            nästa frakt med CosmoCargo™ idag.
+          </p>
+
+          <div className="flex flex-col sm:flex-row justify-center gap-4">
+            <Link href="/login">
+              <Button className="space-button group">
+                Logga in
+                <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
+              </Button>
+            </Link>
+
+            <Link href="/services">
+              <Button
+                variant="outline"
+                className="border-space-accent-blue text-space-accent-blue hover:bg-space-accent-blue/10"
+              >
+                Läs mer om våra tjänster
+              </Button>
+            </Link>
+          </div>
+
+          <div className="mt-12 flex items-center justify-center space-x-8">
+            <div>
+              <p className="text-3xl font-medium space-gradient-text">9000+</p>
+              <p className="text-sm text-space-text-secondary">Destinationer</p>
+            </div>
+            <div>
+              <p className="text-3xl font-medium space-gradient-text">24/7</p>
+              <p className="text-sm text-space-text-secondary">Support</p>
+            </div>
+            <div>
+              <p className="text-3xl font-medium space-gradient-text">99.9%</p>
+              <p className="text-sm text-space-text-secondary">
+                Framgångsrika leveranser
+              </p>
+            </div>
+          </div>
+        </div>
+      </div>
+
+      {/* Decorative elements */}
+      <div className="absolute top-1/3 left-10 w-24 h-24 bg-space-accent-purple/10 rounded-full blur-3xl"></div>
+      <div className="absolute bottom-1/4 right-10 w-32 h-32 bg-space-accent-blue/10 rounded-full blur-3xl"></div>
+    </div>
+  );
+};
+
+export default HeroSection;
diff --git a/frontend/src/components/ProtectedRoute.tsx b/frontend/src/components/ProtectedRoute.tsx
new file mode 100644
index 0000000..a989c7a
--- /dev/null
+++ b/frontend/src/components/ProtectedRoute.tsx
@@ -0,0 +1,22 @@
+
+import React from 'react';
+import { Navigate, useLocation } from 'react-router-dom';
+import { useAuth } from '../contexts/AuthContext';
+import { toast } from 'sonner';
+
+const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
+  const { isAuthenticated } = useAuth();
+  const location = useLocation();
+
+  if (!isAuthenticated) {
+    // Show toast notification
+    toast.error('Du måste logga in för att komma åt den här sidan');
+    
+    // Redirect to login page, but save the path they were trying to access
+    return <Navigate to="/login" state={{ from: location.pathname }} replace />;
+  }
+
+  return <>{children}</>;
+};
+
+export default ProtectedRoute;
diff --git a/frontend/src/components/SpaceBackground.tsx b/frontend/src/components/SpaceBackground.tsx
new file mode 100644
index 0000000..aeade0d
--- /dev/null
+++ b/frontend/src/components/SpaceBackground.tsx
@@ -0,0 +1,132 @@
+"use client";
+
+import React, { useEffect, useRef } from "react";
+import { gsap } from "gsap";
+
+interface SpaceBackgroundProps {
+  starCount?: number;
+  children?: React.ReactNode;
+}
+
+const SpaceBackground = ({
+  starCount = 150,
+  children,
+}: SpaceBackgroundProps) => {
+  const containerRef = useRef<HTMLDivElement>(null);
+
+  useEffect(() => {
+    const container = containerRef.current;
+    if (!container) return;
+
+    // Clear existing stars
+    const existingStars = container.querySelectorAll(".star");
+    existingStars.forEach((star) => star.remove());
+
+    // GSAP timeline for orchestrating animations
+    const masterTimeline = gsap.timeline();
+
+    // Create new stars
+    for (let i = 0; i < starCount; i++) {
+      const star = document.createElement("div");
+      star.classList.add("star");
+
+      // Random size (mostly small with a few larger ones)
+      const size = Math.random() < 0.9 ? Math.random() * 2 : Math.random() * 4;
+      star.style.width = `${size}px`;
+      star.style.height = `${size}px`;
+
+      // Random position
+      star.style.top = `${Math.random() * 100}%`;
+      star.style.left = `${Math.random() * 100}%`;
+
+      // Base opacity
+      const baseOpacity = 0.2 + Math.random() * 0.8;
+      star.style.opacity = baseOpacity.toString();
+
+      // Randomly assign star colors for some stars (most remain white)
+      if (Math.random() < 0.15) {
+        const colors = ["#33C3F0", "#9b87f5", "#FEC6A1", "#E5DEFF", "#D3E4FD"];
+        const randomColor = colors[Math.floor(Math.random() * colors.length)];
+        star.style.backgroundColor = randomColor;
+      }
+
+      container.appendChild(star);
+
+      // Apply random animation type
+      const animationType = Math.random();
+
+      if (animationType < 0.33) {
+        // Twinkle animation
+        gsap.to(star, {
+          opacity: Math.min(baseOpacity + 0.3, 1),
+          duration: 1 + Math.random() * 2,
+          repeat: -1,
+          yoyo: true,
+          ease: "sine.inOut",
+          delay: Math.random() * 3,
+        });
+      } else if (animationType < 0.66) {
+        // Float animation
+        gsap.to(star, {
+          x: Math.random() * 10 - 5,
+          y: Math.random() * 10 - 5,
+          duration: 3 + Math.random() * 5,
+          repeat: -1,
+          yoyo: true,
+          ease: "sine.inOut",
+          delay: Math.random() * 3,
+        });
+      } else {
+        // Pulse animation
+        const timeline = gsap.timeline({
+          repeat: -1,
+          delay: Math.random() * 3,
+        });
+
+        timeline
+          .to(star, {
+            boxShadow: `0 0 ${Math.random() * 3 + 2}px ${
+              Math.random() * 2 + 1
+            }px rgba(255, 255, 255, 0.7)`,
+            opacity: Math.min(baseOpacity + 0.4, 1),
+            duration: 1 + Math.random() * 2,
+            ease: "sine.inOut",
+          })
+          .to(star, {
+            boxShadow: "0 0 0px 0px rgba(255, 255, 255, 0)",
+            opacity: baseOpacity,
+            duration: 1 + Math.random() * 2,
+            ease: "sine.inOut",
+          });
+      }
+
+      // Add drift animation to all stars
+      gsap.to(star, {
+        x: `+=${Math.random() * 30 - 15}`,
+        y: `+=${Math.random() * 30 - 15}`,
+        duration: 15 + Math.random() * 20,
+        repeat: -1,
+        yoyo: true,
+        ease: "none",
+      });
+    }
+
+    return () => {
+      // Cleanup GSAP animations on unmount
+      masterTimeline.kill();
+      gsap.killTweensOf(container.querySelectorAll(".star"));
+    };
+  }, [starCount]);
+
+  return (
+    <div
+      ref={containerRef}
+      className="relative min-h-screen w-full bg-space-gradient overflow-hidden"
+    >
+      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_rgba(155,135,245,0.15)_0%,_rgba(11,14,24,0)_70%)]"></div>
+      {children}
+    </div>
+  );
+};
+
+export default SpaceBackground;
diff --git a/frontend/src/components/ui/badge.tsx b/frontend/src/components/ui/badge.tsx
new file mode 100644
index 0000000..e274dba
--- /dev/null
+++ b/frontend/src/components/ui/badge.tsx
@@ -0,0 +1,41 @@
+import * as React from "react";
+import { cva, type VariantProps } from "class-variance-authority";
+
+import { cn } from "@/lib/utils";
+
+const badgeVariants = cva(
+  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
+  {
+    variants: {
+      variant: {
+        default:
+          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
+        secondary:
+          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
+        destructive:
+          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
+        outline: "text-foreground",
+        success:
+          "border-transparent bg-green-500 text-white hover:bg-green-500/80",
+        warning:
+          "border-transparent bg-amber-500 text-white hover:bg-amber-500/80",
+        info: "border-transparent bg-blue-500 text-white hover:bg-blue-500/80",
+      },
+    },
+    defaultVariants: {
+      variant: "default",
+    },
+  }
+);
+
+export interface BadgeProps
+  extends React.HTMLAttributes<HTMLDivElement>,
+    VariantProps<typeof badgeVariants> {}
+
+function Badge({ className, variant, ...props }: BadgeProps) {
+  return (
+    <div className={cn(badgeVariants({ variant }), className)} {...props} />
+  );
+}
+
+export { Badge, badgeVariants };
diff --git a/frontend/src/components/ui/button.tsx b/frontend/src/components/ui/button.tsx
new file mode 100644
index 0000000..f2329bd
--- /dev/null
+++ b/frontend/src/components/ui/button.tsx
@@ -0,0 +1,56 @@
+import * as React from "react";
+import { Slot } from "@radix-ui/react-slot";
+import { cva, type VariantProps } from "class-variance-authority";
+
+import { cn } from "@/lib/utils";
+
+const buttonVariants = cva(
+  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
+  {
+    variants: {
+      variant: {
+        default: "bg-primary text-primary-foreground hover:bg-primary/90",
+        destructive:
+          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
+        outline:
+          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
+        secondary:
+          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
+        ghost: "hover:bg-accent hover:text-accent-foreground",
+        link: "text-primary underline-offset-4 hover:underline",
+      },
+      size: {
+        default: "h-10 px-4 py-2",
+        sm: "h-9 rounded-md px-3",
+        lg: "h-11 rounded-md px-8",
+        icon: "h-10 w-10",
+      },
+    },
+    defaultVariants: {
+      variant: "default",
+      size: "default",
+    },
+  }
+);
+
+export interface ButtonProps
+  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
+    VariantProps<typeof buttonVariants> {
+  asChild?: boolean;
+}
+
+const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
+  ({ className, variant, size, asChild = false, ...props }, ref) => {
+    const Comp = asChild ? Slot : "button";
+    return (
+      <Comp
+        className={cn(buttonVariants({ variant, size, className }))}
+        ref={ref}
+        {...props}
+      />
+    );
+  }
+);
+Button.displayName = "Button";
+
+export { Button, buttonVariants };
diff --git a/frontend/src/components/ui/card.tsx b/frontend/src/components/ui/card.tsx
new file mode 100644
index 0000000..a67bd01
--- /dev/null
+++ b/frontend/src/components/ui/card.tsx
@@ -0,0 +1,83 @@
+import * as React from "react";
+
+import { cn } from "@/lib/utils";
+
+const Card = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn(
+      "rounded-lg border text-card-foreground shadow-sm",
+      className
+    )}
+    {...props}
+  />
+));
+Card.displayName = "Card";
+
+const CardHeader = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex flex-col space-y-1.5 p-6", className)}
+    {...props}
+  />
+));
+CardHeader.displayName = "CardHeader";
+
+const CardTitle = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLHeadingElement>
+>(({ className, ...props }, ref) => (
+  <h3
+    ref={ref}
+    className={cn("text-xl font-medium leading-none", className)}
+    {...props}
+  />
+));
+CardTitle.displayName = "CardTitle";
+
+const CardDescription = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLParagraphElement>
+>(({ className, ...props }, ref) => (
+  <p
+    ref={ref}
+    className={cn("text-sm text-muted-foreground", className)}
+    {...props}
+  />
+));
+CardDescription.displayName = "CardDescription";
+
+const CardContent = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
+));
+CardContent.displayName = "CardContent";
+
+const CardFooter = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    className={cn("flex items-center p-6 pt-0", className)}
+    {...props}
+  />
+));
+CardFooter.displayName = "CardFooter";
+
+export {
+  Card,
+  CardHeader,
+  CardFooter,
+  CardTitle,
+  CardDescription,
+  CardContent,
+};
diff --git a/frontend/src/components/ui/chart.tsx b/frontend/src/components/ui/chart.tsx
new file mode 100644
index 0000000..4c3a61b
--- /dev/null
+++ b/frontend/src/components/ui/chart.tsx
@@ -0,0 +1,360 @@
+import * as React from "react";
+import {
+  ResponsiveContainer,
+  Tooltip,
+  Legend,
+  LegendProps,
+} from "recharts";
+
+import { cn } from "@/lib/utils";
+
+// Format: { THEME_NAME: CSS_SELECTOR }
+const THEMES = { light: "", dark: ".dark" } as const;
+
+export type ChartConfig = {
+  [k in string]: {
+    label?: React.ReactNode;
+    icon?: React.ComponentType;
+  } & (
+    | { color?: string; theme?: never }
+    | { color?: never; theme: Record<keyof typeof THEMES, string> }
+  );
+};
+
+type ChartContextProps = {
+  config: ChartConfig;
+};
+
+const ChartContext = React.createContext<ChartContextProps | null>(null);
+
+function useChart() {
+  const context = React.useContext(ChartContext);
+
+  if (!context) {
+    throw new Error("useChart must be used within a <ChartContainer />");
+  }
+
+  return context;
+}
+
+const ChartContainer = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> & {
+    config: ChartConfig;
+    children: React.ComponentProps<typeof ResponsiveContainer>["children"];
+  }
+>(({ id, className, children, config, ...props }, ref) => {
+  const uniqueId = React.useId();
+  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;
+
+  return (
+    <ChartContext.Provider value={{ config }}>
+      <div
+        data-chart={chartId}
+        ref={ref}
+        className={cn(
+          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
+          className
+        )}
+        {...props}
+      >
+        <ChartStyle id={chartId} config={config} />
+        <ResponsiveContainer>{children}</ResponsiveContainer>
+      </div>
+    </ChartContext.Provider>
+  );
+});
+ChartContainer.displayName = "Chart";
+
+const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
+  const colorConfig = Object.entries(config).filter(
+    ([, config]) => config.theme || config.color
+  );
+
+  if (!colorConfig.length) {
+    return null;
+  }
+
+  return (
+    <style
+      dangerouslySetInnerHTML={{
+        __html: Object.entries(THEMES)
+          .map(
+            ([theme, prefix]) => `
+${prefix} [data-chart=${id}] {
+${colorConfig
+  .map(([key, itemConfig]) => {
+    const color =
+      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
+      itemConfig.color;
+    return color ? `  --color-${key}: ${color};` : null;
+  })
+  .join("\n")}
+}
+`
+          )
+          .join("\n"),
+      }}
+    />
+  );
+};
+
+const ChartTooltip = Tooltip;
+
+const ChartTooltipContent = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<typeof Tooltip> &
+    React.ComponentProps<"div"> & {
+      hideLabel?: boolean;
+      hideIndicator?: boolean;
+      indicator?: "line" | "dot" | "dashed";
+      nameKey?: string;
+      labelKey?: string;
+    }
+>(
+  (
+    {
+      active,
+      payload,
+      className,
+      indicator = "dot",
+      hideLabel = false,
+      hideIndicator = false,
+      label,
+      labelFormatter,
+      labelClassName,
+      formatter,
+      color,
+      nameKey,
+      labelKey,
+    },
+    ref
+  ) => {
+    const { config } = useChart();
+
+    const tooltipLabel = React.useMemo(() => {
+      if (hideLabel || !payload?.length) {
+        return null;
+      }
+
+      const [item] = payload;
+      const key = `${labelKey || item.dataKey || item.name || "value"}`;
+      const itemConfig = getPayloadConfigFromPayload(config, item, key);
+      const value =
+        !labelKey && typeof label === "string"
+          ? config[label as keyof typeof config]?.label || label
+          : itemConfig?.label;
+
+      if (labelFormatter) {
+        return (
+          <div className={cn("font-medium", labelClassName)}>
+            {labelFormatter(value, payload)}
+          </div>
+        );
+      }
+
+      if (!value) {
+        return null;
+      }
+
+      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
+    }, [
+      label,
+      labelFormatter,
+      payload,
+      hideLabel,
+      labelClassName,
+      config,
+      labelKey,
+    ]);
+
+    if (!active || !payload?.length) {
+      return null;
+    }
+
+    const nestLabel = payload.length === 1 && indicator !== "dot";
+
+    return (
+      <div
+        ref={ref}
+        className={cn(
+          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
+          className
+        )}
+      >
+        {!nestLabel ? tooltipLabel : null}
+        <div className="grid gap-1.5">
+          {payload.map((item, index) => {
+            const key = `${nameKey || item.name || item.dataKey || "value"}`;
+            const itemConfig = getPayloadConfigFromPayload(config, item, key);
+            const indicatorColor = color || item.payload.fill || item.color;
+
+            return (
+              <div
+                key={item.dataKey}
+                className={cn(
+                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
+                  indicator === "dot" && "items-center"
+                )}
+              >
+                {formatter && item?.value !== undefined && item.name ? (
+                  formatter(item.value, item.name, item, index, item.payload)
+                ) : (
+                  <>
+                    {itemConfig?.icon ? (
+                      <itemConfig.icon />
+                    ) : (
+                      !hideIndicator && (
+                        <div
+                          className={cn(
+                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
+                            {
+                              "h-2.5 w-2.5": indicator === "dot",
+                              "w-1": indicator === "line",
+                              "w-0 border-[1.5px] border-dashed bg-transparent":
+                                indicator === "dashed",
+                              "my-0.5": nestLabel && indicator === "dashed",
+                            }
+                          )}
+                          style={
+                            {
+                              "--color-bg": indicatorColor,
+                              "--color-border": indicatorColor,
+                            } as React.CSSProperties
+                          }
+                        />
+                      )
+                    )}
+                    <div
+                      className={cn(
+                        "flex flex-1 justify-between leading-none",
+                        nestLabel ? "items-end" : "items-center"
+                      )}
+                    >
+                      <div className="grid gap-1.5">
+                        {nestLabel ? tooltipLabel : null}
+                        <span className="text-muted-foreground">
+                          {itemConfig?.label || item.name}
+                        </span>
+                      </div>
+                      {item.value && (
+                        <span className="font-mono font-medium tabular-nums text-foreground">
+                          {item.value.toLocaleString()}
+                        </span>
+                      )}
+                    </div>
+                  </>
+                )}
+              </div>
+            );
+          })}
+        </div>
+      </div>
+    );
+  }
+);
+ChartTooltipContent.displayName = "ChartTooltip";
+
+const ChartLegend = Legend;
+
+const ChartLegendContent = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> &
+    Pick<LegendProps, "payload" | "verticalAlign"> & {
+      hideIcon?: boolean;
+      nameKey?: string;
+    }
+>(({ payload, className, hideIcon, nameKey, verticalAlign }, ref) => {
+  const { config } = useChart();
+
+  if (!payload?.length) {
+    return null;
+  }
+
+  return (
+    <div
+      ref={ref}
+      className={cn(
+        "flex flex-wrap items-center gap-4 text-xs",
+        verticalAlign === "top" && "mt-2.5",
+        verticalAlign === "bottom" && "mb-2.5",
+        className
+      )}
+    >
+      {payload.map((item) => {
+        const key = `${nameKey || item.dataKey}`;
+        const itemConfig = getPayloadConfigFromPayload(config, item, key);
+
+        return (
+          <div
+            key={item.value}
+            className={cn(
+              "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
+            )}
+          >
+            {itemConfig?.icon && !hideIcon ? (
+              <itemConfig.icon />
+            ) : (
+              <div
+                className="h-2 w-2 shrink-0 rounded-[2px]"
+                style={{
+                  backgroundColor: item.color,
+                }}
+              />
+            )}
+            {itemConfig?.label}
+          </div>
+        );
+      })}
+    </div>
+  );
+});
+ChartLegendContent.displayName = "ChartLegend";
+
+// Helper to extract item config from a payload.
+function getPayloadConfigFromPayload(
+  config: ChartConfig,
+  payload: unknown,
+  key: string
+) {
+  if (typeof payload !== "object" || payload === null) {
+    return undefined;
+  }
+
+  const payloadPayload =
+    "payload" in payload &&
+    typeof payload.payload === "object" &&
+    payload.payload !== null
+      ? payload.payload
+      : undefined;
+
+  let configLabelKey: string = key;
+
+  if (
+    key in payload &&
+    typeof payload[key as keyof typeof payload] === "string"
+  ) {
+    configLabelKey = payload[key as keyof typeof payload] as string;
+  } else if (
+    payloadPayload &&
+    key in payloadPayload &&
+    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
+  ) {
+    configLabelKey = payloadPayload[
+      key as keyof typeof payloadPayload
+    ] as string;
+  }
+
+  return configLabelKey in config
+    ? config[configLabelKey]
+    : config[key as keyof typeof config];
+}
+
+export {
+  ChartContainer,
+  ChartTooltip,
+  ChartTooltipContent,
+  ChartLegend,
+  ChartLegendContent,
+  ChartStyle,
+};
diff --git a/frontend/src/components/ui/checkbox.tsx b/frontend/src/components/ui/checkbox.tsx
new file mode 100644
index 0000000..1320575
--- /dev/null
+++ b/frontend/src/components/ui/checkbox.tsx
@@ -0,0 +1,35 @@
+import * as React from "react";
+import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
+import { Check } from "lucide-react";
+
+import { cn } from "@/lib/utils";
+
+const Checkbox = React.forwardRef<
+  HTMLButtonElement,
+  React.ComponentProps<"button"> & {
+    checked?: boolean;
+    onCheckedChange?: (checked: boolean) => void;
+    required?: boolean;
+  }
+>(({ className, checked, onCheckedChange, ...props }, ref) => (
+  <CheckboxPrimitive.Root
+    ref={ref}
+    className={cn(
+      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
+      className
+    )}
+    checked={checked}
+    onCheckedChange={onCheckedChange}
+    {...props}
+  >
+    <CheckboxPrimitive.Indicator
+      className={cn("flex items-center justify-center text-current")}
+    >
+      <Check className="h-4 w-4" />
+    </CheckboxPrimitive.Indicator>
+  </CheckboxPrimitive.Root>
+));
+
+Checkbox.displayName = CheckboxPrimitive.Root.displayName;
+
+export { Checkbox };
diff --git a/frontend/src/components/ui/dialog.tsx b/frontend/src/components/ui/dialog.tsx
new file mode 100644
index 0000000..7aa1645
--- /dev/null
+++ b/frontend/src/components/ui/dialog.tsx
@@ -0,0 +1,117 @@
+import * as React from "react";
+import * as DialogPrimitive from "@radix-ui/react-dialog";
+import { X } from "lucide-react";
+
+import { cn } from "@/lib/utils";
+
+const Dialog = DialogPrimitive.Root;
+
+const DialogTrigger = DialogPrimitive.Trigger;
+
+const DialogPortal = DialogPrimitive.Portal;
+
+const DialogClose = DialogPrimitive.Close;
+
+const DialogOverlay = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Overlay>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Overlay
+    ref={ref}
+    className={cn(
+      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
+      className
+    )}
+    {...props}
+  />
+));
+DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
+
+const DialogContent = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
+>(({ className, children, ...props }, ref) => (
+  <DialogPortal>
+    <DialogOverlay />
+    <DialogPrimitive.Content
+      ref={ref}
+      className={cn(
+        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
+        className
+      )}
+      {...props}
+    >
+      {children}
+      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
+        <X className="h-4 w-4" />
+        <span className="sr-only">Close</span>
+      </DialogPrimitive.Close>
+    </DialogPrimitive.Content>
+  </DialogPortal>
+));
+DialogContent.displayName = DialogPrimitive.Content.displayName;
+
+const DialogHeader = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col space-y-1.5 text-center sm:text-left",
+      className
+    )}
+    {...props}
+  />
+);
+DialogHeader.displayName = "DialogHeader";
+
+const DialogFooter = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
+      className
+    )}
+    {...props}
+  />
+);
+DialogFooter.displayName = "DialogFooter";
+
+const DialogTitle = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Title>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Title
+    ref={ref}
+    className={cn("text-lg font-medium leading-none tracking-tight", className)}
+    {...props}
+  />
+));
+DialogTitle.displayName = DialogPrimitive.Title.displayName;
+
+const DialogDescription = React.forwardRef<
+  React.ElementRef<typeof DialogPrimitive.Description>,
+  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
+>(({ className, ...props }, ref) => (
+  <DialogPrimitive.Description
+    ref={ref}
+    className={cn("text-sm text-muted-foreground", className)}
+    {...props}
+  />
+));
+DialogDescription.displayName = DialogPrimitive.Description.displayName;
+
+export {
+  Dialog,
+  DialogPortal,
+  DialogOverlay,
+  DialogClose,
+  DialogTrigger,
+  DialogContent,
+  DialogHeader,
+  DialogFooter,
+  DialogTitle,
+  DialogDescription,
+};
diff --git a/frontend/src/components/ui/form.tsx b/frontend/src/components/ui/form.tsx
new file mode 100644
index 0000000..6ec196d
--- /dev/null
+++ b/frontend/src/components/ui/form.tsx
@@ -0,0 +1,177 @@
+import * as React from "react";
+import * as LabelPrimitive from "@radix-ui/react-label";
+import { Slot } from "@radix-ui/react-slot";
+import {
+  Controller,
+  ControllerProps,
+  FieldPath,
+  FieldValues,
+  FormProvider,
+  useFormContext,
+} from "react-hook-form";
+
+import { cn } from "@/lib/utils";
+import { Label } from "./label";
+
+const Form = FormProvider;
+
+type FormFieldContextValue<
+  TFieldValues extends FieldValues = FieldValues,
+  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
+> = {
+  name: TName;
+};
+
+const FormFieldContext = React.createContext<FormFieldContextValue>(
+  {} as FormFieldContextValue
+);
+
+const FormField = <
+  TFieldValues extends FieldValues = FieldValues,
+  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
+>({
+  ...props
+}: ControllerProps<TFieldValues, TName>) => {
+  return (
+    <FormFieldContext.Provider value={{ name: props.name }}>
+      <Controller {...props} />
+    </FormFieldContext.Provider>
+  );
+};
+
+const useFormField = () => {
+  const fieldContext = React.useContext(FormFieldContext);
+  const itemContext = React.useContext(FormItemContext);
+  const { getFieldState, formState } = useFormContext();
+
+  const fieldState = getFieldState(fieldContext.name, formState);
+
+  if (!fieldContext) {
+    throw new Error("useFormField should be used within <FormField>");
+  }
+
+  const { id } = itemContext;
+
+  return {
+    id,
+    name: fieldContext.name,
+    formItemId: `${id}-form-item`,
+    formDescriptionId: `${id}-form-item-description`,
+    formMessageId: `${id}-form-item-message`,
+    ...fieldState,
+  };
+};
+
+type FormItemContextValue = {
+  id: string;
+};
+
+const FormItemContext = React.createContext<FormItemContextValue>(
+  {} as FormItemContextValue
+);
+
+const FormItem = React.forwardRef<
+  HTMLDivElement,
+  React.HTMLAttributes<HTMLDivElement>
+>(({ className, ...props }, ref) => {
+  const id = React.useId();
+
+  return (
+    <FormItemContext.Provider value={{ id }}>
+      <div ref={ref} className={cn("space-y-2", className)} {...props} />
+    </FormItemContext.Provider>
+  );
+});
+FormItem.displayName = "FormItem";
+
+const FormLabel = React.forwardRef<
+  React.ElementRef<typeof LabelPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
+>(({ className, ...props }, ref) => {
+  const { error, formItemId } = useFormField();
+
+  return (
+    <Label
+      ref={ref}
+      className={cn(error && "text-destructive", className)}
+      htmlFor={formItemId}
+      {...props}
+    />
+  );
+});
+FormLabel.displayName = "FormLabel";
+
+const FormControl = React.forwardRef<
+  React.ElementRef<typeof Slot>,
+  React.ComponentPropsWithoutRef<typeof Slot>
+>(({ ...props }, ref) => {
+  const { error, formItemId, formDescriptionId, formMessageId } =
+    useFormField();
+
+  return (
+    <Slot
+      ref={ref}
+      id={formItemId}
+      aria-describedby={
+        !error
+          ? `${formDescriptionId}`
+          : `${formDescriptionId} ${formMessageId}`
+      }
+      aria-invalid={!!error}
+      {...props}
+    />
+  );
+});
+FormControl.displayName = "FormControl";
+
+const FormDescription = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLParagraphElement>
+>(({ className, ...props }, ref) => {
+  const { formDescriptionId } = useFormField();
+
+  return (
+    <p
+      ref={ref}
+      id={formDescriptionId}
+      className={cn("text-sm text-muted-foreground", className)}
+      {...props}
+    />
+  );
+});
+FormDescription.displayName = "FormDescription";
+
+const FormMessage = React.forwardRef<
+  HTMLParagraphElement,
+  React.HTMLAttributes<HTMLParagraphElement>
+>(({ className, children, ...props }, ref) => {
+  const { error, formMessageId } = useFormField();
+  const body = error ? String(error?.message) : children;
+
+  if (!body) {
+    return null;
+  }
+
+  return (
+    <p
+      ref={ref}
+      id={formMessageId}
+      className={cn("text-sm font-medium text-destructive", className)}
+      {...props}
+    >
+      {body}
+    </p>
+  );
+});
+FormMessage.displayName = "FormMessage";
+
+export {
+  useFormField,
+  Form,
+  FormItem,
+  FormLabel,
+  FormControl,
+  FormDescription,
+  FormMessage,
+  FormField,
+};
diff --git a/frontend/src/components/ui/input.tsx b/frontend/src/components/ui/input.tsx
new file mode 100644
index 0000000..bc891a3
--- /dev/null
+++ b/frontend/src/components/ui/input.tsx
@@ -0,0 +1,22 @@
+import * as React from "react";
+
+import { cn } from "@/lib/utils";
+
+const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
+  ({ className, type, ...props }, ref) => {
+    return (
+      <input
+        type={type}
+        className={cn(
+          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
+          className
+        )}
+        ref={ref}
+        {...props}
+      />
+    );
+  }
+);
+Input.displayName = "Input";
+
+export { Input };
diff --git a/frontend/src/components/ui/label.tsx b/frontend/src/components/ui/label.tsx
new file mode 100644
index 0000000..7c96064
--- /dev/null
+++ b/frontend/src/components/ui/label.tsx
@@ -0,0 +1,24 @@
+import * as React from "react";
+import * as LabelPrimitive from "@radix-ui/react-label";
+import { cva, type VariantProps } from "class-variance-authority";
+
+import { cn } from "@/lib/utils";
+
+const labelVariants = cva(
+  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
+);
+
+const Label = React.forwardRef<
+  React.ElementRef<typeof LabelPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
+    VariantProps<typeof labelVariants>
+>(({ className, ...props }, ref) => (
+  <LabelPrimitive.Root
+    ref={ref}
+    className={cn(labelVariants(), className)}
+    {...props}
+  />
+));
+Label.displayName = LabelPrimitive.Root.displayName;
+
+export { Label };
diff --git a/frontend/src/components/ui/pagination.tsx b/frontend/src/components/ui/pagination.tsx
new file mode 100644
index 0000000..ae76607
--- /dev/null
+++ b/frontend/src/components/ui/pagination.tsx
@@ -0,0 +1,45 @@
+import { ChevronLeft, ChevronRight } from "lucide-react";
+import { Button } from "./button";
+
+export interface PaginationProps {
+    totalCount: number;
+    page: number;
+    pageSize: number;
+    totalPages: number;
+    onPageChange: (page: number) => void;
+}
+
+const Pagination = ({ totalCount, page, pageSize, totalPages, onPageChange}: PaginationProps) => {
+  const itemsOnPage = Math.min(pageSize, totalCount - page * pageSize);
+  console.log(totalCount, page, pageSize, totalPages, itemsOnPage);
+  return <div className="flex items-center justify-between mt-6">
+  <div className="text-sm text-space-text-secondary">
+    Visar {itemsOnPage} av {totalCount} leveranser
+  </div>
+  <div className="flex items-center gap-2">
+    <Button
+      variant="outline"
+      size="sm"
+      onClick={() => onPageChange(Math.max(1, page - 1))}
+      disabled={page === 1}
+    >
+      <ChevronLeft className="h-4 w-4" />
+    </Button>
+    <span className="text-sm">
+      Sida {page} av {totalPages}
+    </span>
+    <Button
+      variant="outline"
+      size="sm"
+      onClick={() => onPageChange(Math.min(totalPages, page + 1))}
+      disabled={page === totalPages}
+    >
+      <ChevronRight className="h-4 w-4" />
+    </Button>
+  </div>
+</div>
+}
+
+Pagination.displayName = "Pagination";
+
+export default Pagination;
diff --git a/frontend/src/components/ui/select.tsx b/frontend/src/components/ui/select.tsx
new file mode 100644
index 0000000..05db7c3
--- /dev/null
+++ b/frontend/src/components/ui/select.tsx
@@ -0,0 +1,158 @@
+import * as React from "react";
+import * as SelectPrimitive from "@radix-ui/react-select";
+import { Check, ChevronDown, ChevronUp } from "lucide-react";
+
+import { cn } from "@/lib/utils";
+
+const Select = SelectPrimitive.Root;
+
+const SelectGroup = SelectPrimitive.Group;
+
+const SelectValue = SelectPrimitive.Value;
+
+const SelectTrigger = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.Trigger>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
+>(({ className, children, ...props }, ref) => (
+  <SelectPrimitive.Trigger
+    ref={ref}
+    className={cn(
+      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
+      className
+    )}
+    {...props}
+  >
+    {children}
+    <SelectPrimitive.Icon asChild>
+      <ChevronDown className="h-4 w-4 opacity-50" />
+    </SelectPrimitive.Icon>
+  </SelectPrimitive.Trigger>
+));
+SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
+
+const SelectScrollUpButton = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
+>(({ className, ...props }, ref) => (
+  <SelectPrimitive.ScrollUpButton
+    ref={ref}
+    className={cn(
+      "flex cursor-default items-center justify-center py-1",
+      className
+    )}
+    {...props}
+  >
+    <ChevronUp className="h-4 w-4" />
+  </SelectPrimitive.ScrollUpButton>
+));
+SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;
+
+const SelectScrollDownButton = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
+>(({ className, ...props }, ref) => (
+  <SelectPrimitive.ScrollDownButton
+    ref={ref}
+    className={cn(
+      "flex cursor-default items-center justify-center py-1",
+      className
+    )}
+    {...props}
+  >
+    <ChevronDown className="h-4 w-4" />
+  </SelectPrimitive.ScrollDownButton>
+));
+SelectScrollDownButton.displayName =
+  SelectPrimitive.ScrollDownButton.displayName;
+
+const SelectContent = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
+>(({ className, children, position = "popper", ...props }, ref) => (
+  <SelectPrimitive.Portal>
+    <SelectPrimitive.Content
+      ref={ref}
+      className={cn(
+        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
+        position === "popper" &&
+          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
+        className
+      )}
+      position={position}
+      {...props}
+    >
+      <SelectScrollUpButton />
+      <SelectPrimitive.Viewport
+        className={cn(
+          "p-1",
+          position === "popper" &&
+            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
+        )}
+      >
+        {children}
+      </SelectPrimitive.Viewport>
+      <SelectScrollDownButton />
+    </SelectPrimitive.Content>
+  </SelectPrimitive.Portal>
+));
+SelectContent.displayName = SelectPrimitive.Content.displayName;
+
+const SelectLabel = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.Label>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
+>(({ className, ...props }, ref) => (
+  <SelectPrimitive.Label
+    ref={ref}
+    className={cn("py-1.5 pl-8 pr-2 text-sm font-medium", className)}
+    {...props}
+  />
+));
+SelectLabel.displayName = SelectPrimitive.Label.displayName;
+
+const SelectItem = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.Item>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
+>(({ className, children, ...props }, ref) => (
+  <SelectPrimitive.Item
+    ref={ref}
+    className={cn(
+      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
+      className
+    )}
+    {...props}
+  >
+    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
+      <SelectPrimitive.ItemIndicator>
+        <Check className="h-4 w-4" />
+      </SelectPrimitive.ItemIndicator>
+    </span>
+
+    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
+  </SelectPrimitive.Item>
+));
+SelectItem.displayName = SelectPrimitive.Item.displayName;
+
+const SelectSeparator = React.forwardRef<
+  React.ElementRef<typeof SelectPrimitive.Separator>,
+  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
+>(({ className, ...props }, ref) => (
+  <SelectPrimitive.Separator
+    ref={ref}
+    className={cn("-mx-1 my-1 h-px bg-muted", className)}
+    {...props}
+  />
+));
+SelectSeparator.displayName = SelectPrimitive.Separator.displayName;
+
+export {
+  Select,
+  SelectGroup,
+  SelectValue,
+  SelectTrigger,
+  SelectContent,
+  SelectLabel,
+  SelectItem,
+  SelectSeparator,
+  SelectScrollUpButton,
+  SelectScrollDownButton,
+};
diff --git a/frontend/src/components/ui/separator.tsx b/frontend/src/components/ui/separator.tsx
new file mode 100644
index 0000000..754e8a2
--- /dev/null
+++ b/frontend/src/components/ui/separator.tsx
@@ -0,0 +1,28 @@
+import * as React from "react";
+import * as SeparatorPrimitive from "@radix-ui/react-separator";
+import { cn } from "@/lib/utils";
+
+const Separator = React.forwardRef<
+  React.ElementRef<typeof SeparatorPrimitive.Root>,
+  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
+>(
+  (
+    { className, orientation = "horizontal", decorative = true, ...props },
+    ref
+  ) => (
+    <SeparatorPrimitive.Root
+      ref={ref}
+      decorative={decorative}
+      orientation={orientation}
+      className={cn(
+        "shrink-0 bg-border",
+        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
+        className
+      )}
+      {...props}
+    />
+  )
+);
+Separator.displayName = SeparatorPrimitive.Root.displayName;
+
+export { Separator }; 
\ No newline at end of file
diff --git a/frontend/src/components/ui/sheet.tsx b/frontend/src/components/ui/sheet.tsx
new file mode 100644
index 0000000..e40c7d0
--- /dev/null
+++ b/frontend/src/components/ui/sheet.tsx
@@ -0,0 +1,137 @@
+import * as React from "react";
+import * as SheetPrimitive from "@radix-ui/react-dialog";
+import { cva, type VariantProps } from "class-variance-authority";
+import { X } from "lucide-react";
+import { cn } from "@/lib/utils";
+
+const Sheet = SheetPrimitive.Root;
+
+const SheetTrigger = SheetPrimitive.Trigger;
+
+const SheetClose = SheetPrimitive.Close;
+
+const SheetPortal = SheetPrimitive.Portal;
+
+const SheetOverlay = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Overlay>,
+  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
+>(({ className, ...props }, ref) => (
+  <SheetPrimitive.Overlay
+    className={cn(
+      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
+      className
+    )}
+    {...props}
+    ref={ref}
+  />
+));
+SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;
+
+const sheetVariants = cva(
+  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
+  {
+    variants: {
+      side: {
+        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
+        bottom:
+          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
+        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
+        right:
+          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
+      },
+    },
+    defaultVariants: {
+      side: "right",
+    },
+  }
+);
+
+interface SheetContentProps
+  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
+    VariantProps<typeof sheetVariants> {}
+
+const SheetContent = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Content>,
+  SheetContentProps
+>(({ side = "right", className, children, ...props }, ref) => (
+  <SheetPortal>
+    <SheetOverlay />
+    <SheetPrimitive.Content
+      ref={ref}
+      className={cn(sheetVariants({ side }), className)}
+      {...props}
+    >
+      {children}
+      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
+        <X className="h-4 w-4" />
+        <span className="sr-only">Close</span>
+      </SheetPrimitive.Close>
+    </SheetPrimitive.Content>
+  </SheetPortal>
+));
+SheetContent.displayName = SheetPrimitive.Content.displayName;
+
+const SheetHeader = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col space-y-2 text-center sm:text-left",
+      className
+    )}
+    {...props}
+  />
+);
+SheetHeader.displayName = "SheetHeader";
+
+const SheetFooter = ({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) => (
+  <div
+    className={cn(
+      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
+      className
+    )}
+    {...props}
+  />
+);
+SheetFooter.displayName = "SheetFooter";
+
+const SheetTitle = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Title>,
+  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
+>(({ className, ...props }, ref) => (
+  <SheetPrimitive.Title
+    ref={ref}
+    className={cn("text-lg font-semibold text-foreground", className)}
+    {...props}
+  />
+));
+SheetTitle.displayName = SheetPrimitive.Title.displayName;
+
+const SheetDescription = React.forwardRef<
+  React.ElementRef<typeof SheetPrimitive.Description>,
+  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
+>(({ className, ...props }, ref) => (
+  <SheetPrimitive.Description
+    ref={ref}
+    className={cn("text-sm text-muted-foreground", className)}
+    {...props}
+  />
+));
+SheetDescription.displayName = SheetPrimitive.Description.displayName;
+
+export {
+  Sheet,
+  SheetPortal,
+  SheetOverlay,
+  SheetTrigger,
+  SheetClose,
+  SheetContent,
+  SheetHeader,
+  SheetFooter,
+  SheetTitle,
+  SheetDescription,
+}; 
\ No newline at end of file
diff --git a/frontend/src/components/ui/sidebar.tsx b/frontend/src/components/ui/sidebar.tsx
new file mode 100644
index 0000000..db3034c
--- /dev/null
+++ b/frontend/src/components/ui/sidebar.tsx
@@ -0,0 +1,761 @@
+import * as React from "react";
+import { Slot } from "@radix-ui/react-slot";
+import { VariantProps, cva } from "class-variance-authority";
+import { PanelLeft } from "lucide-react";
+
+import { useIsMobile } from "@/hooks/use-mobile";
+import { cn } from "@/lib/utils";
+import { Button } from "./button";
+import { Input } from "./input";
+import { Separator } from "./separator";
+import { Sheet, SheetContent } from "./sheet";
+import { Skeleton } from "./skeleton";
+import {
+  Tooltip,
+  TooltipContent,
+  TooltipProvider,
+  TooltipTrigger,
+} from "./tooltip";
+
+const SIDEBAR_COOKIE_NAME = "sidebar:state";
+const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
+const SIDEBAR_WIDTH = "16rem";
+const SIDEBAR_WIDTH_MOBILE = "18rem";
+const SIDEBAR_WIDTH_ICON = "3rem";
+const SIDEBAR_KEYBOARD_SHORTCUT = "b";
+
+type SidebarContext = {
+  state: "expanded" | "collapsed";
+  open: boolean;
+  setOpen: (open: boolean) => void;
+  openMobile: boolean;
+  setOpenMobile: (open: boolean) => void;
+  isMobile: boolean;
+  toggleSidebar: () => void;
+};
+
+const SidebarContext = React.createContext<SidebarContext | null>(null);
+
+function useSidebar() {
+  const context = React.useContext(SidebarContext);
+  if (!context) {
+    throw new Error("useSidebar must be used within a SidebarProvider.");
+  }
+
+  return context;
+}
+
+const SidebarProvider = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> & {
+    defaultOpen?: boolean;
+    open?: boolean;
+    onOpenChange?: (open: boolean) => void;
+  }
+>(
+  (
+    {
+      defaultOpen = true,
+      open: openProp,
+      onOpenChange: setOpenProp,
+      className,
+      style,
+      children,
+      ...props
+    },
+    ref
+  ) => {
+    const isMobile = useIsMobile();
+    const [openMobile, setOpenMobile] = React.useState(false);
+
+    // This is the internal state of the sidebar.
+    // We use openProp and setOpenProp for control from outside the component.
+    const [_open, _setOpen] = React.useState(defaultOpen);
+    const open = openProp ?? _open;
+    const setOpen = React.useCallback(
+      (value: boolean | ((value: boolean) => boolean)) => {
+        const openState = typeof value === "function" ? value(open) : value;
+        if (setOpenProp) {
+          setOpenProp(openState);
+        } else {
+          _setOpen(openState);
+        }
+
+        // This sets the cookie to keep the sidebar state.
+        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
+      },
+      [setOpenProp, open]
+    );
+
+    // Helper to toggle the sidebar.
+    const toggleSidebar = React.useCallback(() => {
+      return isMobile
+        ? setOpenMobile((open) => !open)
+        : setOpen((open) => !open);
+    }, [isMobile, setOpen, setOpenMobile]);
+
+    // Adds a keyboard shortcut to toggle the sidebar.
+    React.useEffect(() => {
+      const handleKeyDown = (event: KeyboardEvent) => {
+        if (
+          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
+          (event.metaKey || event.ctrlKey)
+        ) {
+          event.preventDefault();
+          toggleSidebar();
+        }
+      };
+
+      window.addEventListener("keydown", handleKeyDown);
+      return () => window.removeEventListener("keydown", handleKeyDown);
+    }, [toggleSidebar]);
+
+    // We add a state so that we can do data-state="expanded" or "collapsed".
+    // This makes it easier to style the sidebar with Tailwind classes.
+    const state = open ? "expanded" : "collapsed";
+
+    const contextValue = React.useMemo<SidebarContext>(
+      () => ({
+        state,
+        open,
+        setOpen,
+        isMobile,
+        openMobile,
+        setOpenMobile,
+        toggleSidebar,
+      }),
+      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
+    );
+
+    return (
+      <SidebarContext.Provider value={contextValue}>
+        <TooltipProvider delayDuration={0}>
+          <div
+            style={
+              {
+                "--sidebar-width": SIDEBAR_WIDTH,
+                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
+                ...style,
+              } as React.CSSProperties
+            }
+            className={cn(
+              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
+              className
+            )}
+            ref={ref}
+            {...props}
+          >
+            {children}
+          </div>
+        </TooltipProvider>
+      </SidebarContext.Provider>
+    );
+  }
+);
+SidebarProvider.displayName = "SidebarProvider";
+
+const Sidebar = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> & {
+    side?: "left" | "right";
+    variant?: "sidebar" | "floating" | "inset";
+    collapsible?: "offcanvas" | "icon" | "none";
+  }
+>(
+  (
+    {
+      side = "left",
+      variant = "sidebar",
+      collapsible = "offcanvas",
+      className,
+      children,
+      ...props
+    },
+    ref
+  ) => {
+    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();
+
+    if (collapsible === "none") {
+      return (
+        <div
+          className={cn(
+            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
+            className
+          )}
+          ref={ref}
+          {...props}
+        >
+          {children}
+        </div>
+      );
+    }
+
+    if (isMobile) {
+      return (
+        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
+          <SheetContent
+            data-sidebar="sidebar"
+            data-mobile="true"
+            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
+            style={
+              {
+                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
+              } as React.CSSProperties
+            }
+            side={side}
+          >
+            <div className="flex h-full w-full flex-col">{children}</div>
+          </SheetContent>
+        </Sheet>
+      );
+    }
+
+    return (
+      <div
+        ref={ref}
+        className="group peer hidden md:block text-sidebar-foreground"
+        data-state={state}
+        data-collapsible={state === "collapsed" ? collapsible : ""}
+        data-variant={variant}
+        data-side={side}
+      >
+        {/* This is what handles the sidebar gap on desktop */}
+        <div
+          className={cn(
+            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
+            "group-data-[collapsible=offcanvas]:w-0",
+            "group-data-[side=right]:rotate-180",
+            variant === "floating" || variant === "inset"
+              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
+              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
+          )}
+        />
+        <div
+          className={cn(
+            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
+            side === "left"
+              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
+              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
+            // Adjust the padding for floating and inset variants.
+            variant === "floating" || variant === "inset"
+              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
+              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
+            className
+          )}
+          {...props}
+        >
+          <div
+            data-sidebar="sidebar"
+            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
+          >
+            {children}
+          </div>
+        </div>
+      </div>
+    );
+  }
+);
+Sidebar.displayName = "Sidebar";
+
+const SidebarTrigger = React.forwardRef<
+  React.ElementRef<typeof Button>,
+  React.ComponentProps<typeof Button>
+>(({ className, onClick, ...props }, ref) => {
+  const { toggleSidebar } = useSidebar();
+
+  return (
+    <Button
+      ref={ref}
+      data-sidebar="trigger"
+      variant="ghost"
+      size="icon"
+      className={cn("h-7 w-7", className)}
+      onClick={(event) => {
+        onClick?.(event);
+        toggleSidebar();
+      }}
+      {...props}
+    >
+      <PanelLeft />
+      <span className="sr-only">Toggle Sidebar</span>
+    </Button>
+  );
+});
+SidebarTrigger.displayName = "SidebarTrigger";
+
+const SidebarRail = React.forwardRef<
+  HTMLButtonElement,
+  React.ComponentProps<"button">
+>(({ className, ...props }, ref) => {
+  const { toggleSidebar } = useSidebar();
+
+  return (
+    <button
+      ref={ref}
+      data-sidebar="rail"
+      aria-label="Toggle Sidebar"
+      tabIndex={-1}
+      onClick={toggleSidebar}
+      title="Toggle Sidebar"
+      className={cn(
+        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
+        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
+        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
+        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
+        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
+        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarRail.displayName = "SidebarRail";
+
+const SidebarInset = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"main">
+>(({ className, ...props }, ref) => {
+  return (
+    <main
+      ref={ref}
+      className={cn(
+        "relative flex min-h-svh flex-1 flex-col bg-background",
+        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarInset.displayName = "SidebarInset";
+
+const SidebarInput = React.forwardRef<
+  React.ElementRef<typeof Input>,
+  React.ComponentProps<typeof Input>
+>(({ className, ...props }, ref) => {
+  return (
+    <Input
+      ref={ref}
+      data-sidebar="input"
+      className={cn(
+        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarInput.displayName = "SidebarInput";
+
+const SidebarHeader = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+  return (
+    <div
+      ref={ref}
+      data-sidebar="header"
+      className={cn("flex flex-col gap-2 p-2", className)}
+      {...props}
+    />
+  );
+});
+SidebarHeader.displayName = "SidebarHeader";
+
+const SidebarFooter = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+  return (
+    <div
+      ref={ref}
+      data-sidebar="footer"
+      className={cn("flex flex-col gap-2 p-2", className)}
+      {...props}
+    />
+  );
+});
+SidebarFooter.displayName = "SidebarFooter";
+
+const SidebarSeparator = React.forwardRef<
+  React.ElementRef<typeof Separator>,
+  React.ComponentProps<typeof Separator>
+>(({ className, ...props }, ref) => {
+  return (
+    <Separator
+      ref={ref}
+      data-sidebar="separator"
+      className={cn("mx-2 w-auto bg-sidebar-border", className)}
+      {...props}
+    />
+  );
+});
+SidebarSeparator.displayName = "SidebarSeparator";
+
+const SidebarContent = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+  return (
+    <div
+      ref={ref}
+      data-sidebar="content"
+      className={cn(
+        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarContent.displayName = "SidebarContent";
+
+const SidebarGroup = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => {
+  return (
+    <div
+      ref={ref}
+      data-sidebar="group"
+      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
+      {...props}
+    />
+  );
+});
+SidebarGroup.displayName = "SidebarGroup";
+
+const SidebarGroupLabel = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> & { asChild?: boolean }
+>(({ className, asChild = false, ...props }, ref) => {
+  const Comp = asChild ? Slot : "div";
+
+  return (
+    <Comp
+      ref={ref}
+      data-sidebar="group-label"
+      className={cn(
+        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
+        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarGroupLabel.displayName = "SidebarGroupLabel";
+
+const SidebarGroupAction = React.forwardRef<
+  HTMLButtonElement,
+  React.ComponentProps<"button"> & { asChild?: boolean }
+>(({ className, asChild = false, ...props }, ref) => {
+  const Comp = asChild ? Slot : "button";
+
+  return (
+    <Comp
+      ref={ref}
+      data-sidebar="group-action"
+      className={cn(
+        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
+        // Increases the hit area of the button on mobile.
+        "after:absolute after:-inset-2 after:md:hidden",
+        "group-data-[collapsible=icon]:hidden",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarGroupAction.displayName = "SidebarGroupAction";
+
+const SidebarGroupContent = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    data-sidebar="group-content"
+    className={cn("w-full text-sm", className)}
+    {...props}
+  />
+));
+SidebarGroupContent.displayName = "SidebarGroupContent";
+
+const SidebarMenu = React.forwardRef<
+  HTMLUListElement,
+  React.ComponentProps<"ul">
+>(({ className, ...props }, ref) => (
+  <ul
+    ref={ref}
+    data-sidebar="menu"
+    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
+    {...props}
+  />
+));
+SidebarMenu.displayName = "SidebarMenu";
+
+const SidebarMenuItem = React.forwardRef<
+  HTMLLIElement,
+  React.ComponentProps<"li">
+>(({ className, ...props }, ref) => (
+  <li
+    ref={ref}
+    data-sidebar="menu-item"
+    className={cn("group/menu-item relative", className)}
+    {...props}
+  />
+));
+SidebarMenuItem.displayName = "SidebarMenuItem";
+
+const sidebarMenuButtonVariants = cva(
+  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
+  {
+    variants: {
+      variant: {
+        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
+        outline:
+          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
+      },
+      size: {
+        default: "h-8 text-sm",
+        sm: "h-7 text-xs",
+        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
+      },
+    },
+    defaultVariants: {
+      variant: "default",
+      size: "default",
+    },
+  }
+);
+
+const SidebarMenuButton = React.forwardRef<
+  HTMLButtonElement,
+  React.ComponentProps<"button"> & {
+    asChild?: boolean;
+    isActive?: boolean;
+    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
+  } & VariantProps<typeof sidebarMenuButtonVariants>
+>(
+  (
+    {
+      asChild = false,
+      isActive = false,
+      variant = "default",
+      size = "default",
+      tooltip,
+      className,
+      ...props
+    },
+    ref
+  ) => {
+    const Comp = asChild ? Slot : "button";
+    const { isMobile, state } = useSidebar();
+
+    const button = (
+      <Comp
+        ref={ref}
+        data-sidebar="menu-button"
+        data-size={size}
+        data-active={isActive}
+        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
+        {...props}
+      />
+    );
+
+    if (!tooltip) {
+      return button;
+    }
+
+    if (typeof tooltip === "string") {
+      tooltip = {
+        children: tooltip,
+      };
+    }
+
+    return (
+      <Tooltip>
+        <TooltipTrigger asChild>{button}</TooltipTrigger>
+        <TooltipContent
+          side="right"
+          align="center"
+          hidden={state !== "collapsed" || isMobile}
+          {...tooltip}
+        />
+      </Tooltip>
+    );
+  }
+);
+SidebarMenuButton.displayName = "SidebarMenuButton";
+
+const SidebarMenuAction = React.forwardRef<
+  HTMLButtonElement,
+  React.ComponentProps<"button"> & {
+    asChild?: boolean;
+    showOnHover?: boolean;
+  }
+>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
+  const Comp = asChild ? Slot : "button";
+
+  return (
+    <Comp
+      ref={ref}
+      data-sidebar="menu-action"
+      className={cn(
+        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
+        // Increases the hit area of the button on mobile.
+        "after:absolute after:-inset-2 after:md:hidden",
+        "peer-data-[size=sm]/menu-button:top-1",
+        "peer-data-[size=default]/menu-button:top-1.5",
+        "peer-data-[size=lg]/menu-button:top-2.5",
+        "group-data-[collapsible=icon]:hidden",
+        showOnHover &&
+          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarMenuAction.displayName = "SidebarMenuAction";
+
+const SidebarMenuBadge = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div">
+>(({ className, ...props }, ref) => (
+  <div
+    ref={ref}
+    data-sidebar="menu-badge"
+    className={cn(
+      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
+      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
+      "peer-data-[size=sm]/menu-button:top-1",
+      "peer-data-[size=default]/menu-button:top-1.5",
+      "peer-data-[size=lg]/menu-button:top-2.5",
+      "group-data-[collapsible=icon]:hidden",
+      className
+    )}
+    {...props}
+  />
+));
+SidebarMenuBadge.displayName = "SidebarMenuBadge";
+
+const SidebarMenuSkeleton = React.forwardRef<
+  HTMLDivElement,
+  React.ComponentProps<"div"> & {
+    showIcon?: boolean;
+  }
+>(({ className, showIcon = false, ...props }, ref) => {
+  // Random width between 50 to 90%.
+  const width = React.useMemo(() => {
+    return `${Math.floor(Math.random() * 40) + 50}%`;
+  }, []);
+
+  return (
+    <div
+      ref={ref}
+      data-sidebar="menu-skeleton"
+      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
+      {...props}
+    >
+      {showIcon && (
+        <Skeleton
+          className="size-4 rounded-md"
+          data-sidebar="menu-skeleton-icon"
+        />
+      )}
+      <Skeleton
+        className="h-4 flex-1 max-w-[--skeleton-width]"
+        data-sidebar="menu-skeleton-text"
+        style={
+          {
+            "--skeleton-width": width,
+          } as React.CSSProperties
+        }
+      />
+    </div>
+  );
+});
+SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";
+
+const SidebarMenuSub = React.forwardRef<
+  HTMLUListElement,
+  React.ComponentProps<"ul">
+>(({ className, ...props }, ref) => (
+  <ul
+    ref={ref}
+    data-sidebar="menu-sub"
+    className={cn(
+      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
+      "group-data-[collapsible=icon]:hidden",
+      className
+    )}
+    {...props}
+  />
+));
+SidebarMenuSub.displayName = "SidebarMenuSub";
+
+const SidebarMenuSubItem = React.forwardRef<
+  HTMLLIElement,
+  React.ComponentProps<"li">
+>(({ ...props }, ref) => <li ref={ref} {...props} />);
+SidebarMenuSubItem.displayName = "SidebarMenuSubItem";
+
+const SidebarMenuSubButton = React.forwardRef<
+  HTMLAnchorElement,
+  React.ComponentProps<"a"> & {
+    asChild?: boolean;
+    size?: "sm" | "md";
+    isActive?: boolean;
+  }
+>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
+  const Comp = asChild ? Slot : "a";
+
+  return (
+    <Comp
+      ref={ref}
+      data-sidebar="menu-sub-button"
+      data-size={size}
+      data-active={isActive}
+      className={cn(
+        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
+        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
+        size === "sm" && "text-xs",
+        size === "md" && "text-sm",
+        "group-data-[collapsible=icon]:hidden",
+        className
+      )}
+      {...props}
+    />
+  );
+});
+SidebarMenuSubButton.displayName = "SidebarMenuSubButton";
+
+export {
+  Sidebar,
+  SidebarContent,
+  SidebarFooter,
+  SidebarGroup,
+  SidebarGroupAction,
+  SidebarGroupContent,
+  SidebarGroupLabel,
+  SidebarHeader,
+  SidebarInput,
+  SidebarInset,
+  SidebarMenu,
+  SidebarMenuAction,
+  SidebarMenuBadge,
+  SidebarMenuButton,
+  SidebarMenuItem,
+  SidebarMenuSkeleton,
+  SidebarMenuSub,
+  SidebarMenuSubButton,
+  SidebarMenuSubItem,
+  SidebarProvider,
+  SidebarRail,
+  SidebarSeparator,
+  SidebarTrigger,
+  useSidebar,
+};
diff --git a/frontend/src/components/ui/skeleton.tsx b/frontend/src/components/ui/skeleton.tsx
new file mode 100644
index 0000000..4f6131f
--- /dev/null
+++ b/frontend/src/components/ui/skeleton.tsx
@@ -0,0 +1,15 @@
+import { cn } from "@/lib/utils";
+
+function Skeleton({
+  className,
+  ...props
+}: React.HTMLAttributes<HTMLDivElement>) {
+  return (
+    <div
+      className={cn("animate-pulse rounded-md bg-muted", className)}
+      {...props}
+    />
+  );
+}
+
+export { Skeleton }; 
\ No newline at end of file
diff --git a/frontend/src/components/ui/table.tsx b/frontend/src/components/ui/table.tsx
new file mode 100644
index 0000000..bb0650a
--- /dev/null
+++ b/frontend/src/components/ui/table.tsx
@@ -0,0 +1,117 @@
+import * as React from "react";
+
+import { cn } from "@/lib/utils";
+
+const Table = React.forwardRef<
+  HTMLTableElement,
+  React.HTMLAttributes<HTMLTableElement>
+>(({ className, ...props }, ref) => (
+  <div className="relative w-full overflow-auto">
+    <table
+      ref={ref}
+      className={cn("w-full caption-bottom text-sm", className)}
+      {...props}
+    />
+  </div>
+));
+Table.displayName = "Table";
+
+const TableHeader = React.forwardRef<
+  HTMLTableSectionElement,
+  React.HTMLAttributes<HTMLTableSectionElement>
+>(({ className, ...props }, ref) => (
+  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
+));
+TableHeader.displayName = "TableHeader";
+
+const TableBody = React.forwardRef<
+  HTMLTableSectionElement,
+  React.HTMLAttributes<HTMLTableSectionElement>
+>(({ className, ...props }, ref) => (
+  <tbody
+    ref={ref}
+    className={cn("[&_tr:last-child]:border-0", className)}
+    {...props}
+  />
+));
+TableBody.displayName = "TableBody";
+
+const TableFooter = React.forwardRef<
+  HTMLTableSectionElement,
+  React.HTMLAttributes<HTMLTableSectionElement>
+>(({ className, ...props }, ref) => (
+  <tfoot
+    ref={ref}
+    className={cn(
+      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
+      className
+    )}
+    {...props}
+  />
+));
+TableFooter.displayName = "TableFooter";
+
+const TableRow = React.forwardRef<
+  HTMLTableRowElement,
+  React.HTMLAttributes<HTMLTableRowElement>
+>(({ className, ...props }, ref) => (
+  <tr
+    ref={ref}
+    className={cn(
+      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
+      className
+    )}
+    {...props}
+  />
+));
+TableRow.displayName = "TableRow";
+
+const TableHead = React.forwardRef<
+  HTMLTableCellElement,
+  React.ThHTMLAttributes<HTMLTableCellElement>
+>(({ className, ...props }, ref) => (
+  <th
+    ref={ref}
+    className={cn(
+      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
+      className
+    )}
+    {...props}
+  />
+));
+TableHead.displayName = "TableHead";
+
+const TableCell = React.forwardRef<
+  HTMLTableCellElement,
+  React.TdHTMLAttributes<HTMLTableCellElement>
+>(({ className, ...props }, ref) => (
+  <td
+    ref={ref}
+    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
+    {...props}
+  />
+));
+TableCell.displayName = "TableCell";
+
+const TableCaption = React.forwardRef<
+  HTMLTableCaptionElement,
+  React.HTMLAttributes<HTMLTableCaptionElement>
+>(({ className, ...props }, ref) => (
+  <caption
+    ref={ref}
+    className={cn("mt-4 text-sm text-muted-foreground", className)}
+    {...props}
+  />
+));
+TableCaption.displayName = "TableCaption";
+
+export {
+  Table,
+  TableHeader,
+  TableBody,
+  TableFooter,
+  TableHead,
+  TableRow,
+  TableCell,
+  TableCaption,
+};
diff --git a/frontend/src/components/ui/tabs.tsx b/frontend/src/components/ui/tabs.tsx
new file mode 100644
index 0000000..a190e9d
--- /dev/null
+++ b/frontend/src/components/ui/tabs.tsx
@@ -0,0 +1,53 @@
+import * as React from "react";
+import * as TabsPrimitive from "@radix-ui/react-tabs";
+
+import { cn } from "@/lib/utils";
+
+const Tabs = TabsPrimitive.Root;
+
+const TabsList = React.forwardRef<
+  React.ElementRef<typeof TabsPrimitive.List>,
+  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
+>(({ className, ...props }, ref) => (
+  <TabsPrimitive.List
+    ref={ref}
+    className={cn(
+      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
+      className
+    )}
+    {...props}
+  />
+));
+TabsList.displayName = TabsPrimitive.List.displayName;
+
+const TabsTrigger = React.forwardRef<
+  React.ElementRef<typeof TabsPrimitive.Trigger>,
+  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
+>(({ className, ...props }, ref) => (
+  <TabsPrimitive.Trigger
+    ref={ref}
+    className={cn(
+      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
+      className
+    )}
+    {...props}
+  />
+));
+TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;
+
+const TabsContent = React.forwardRef<
+  React.ElementRef<typeof TabsPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
+>(({ className, ...props }, ref) => (
+  <TabsPrimitive.Content
+    ref={ref}
+    className={cn(
+      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
+      className
+    )}
+    {...props}
+  />
+));
+TabsContent.displayName = TabsPrimitive.Content.displayName;
+
+export { Tabs, TabsList, TabsTrigger, TabsContent };
diff --git a/frontend/src/components/ui/textarea.tsx b/frontend/src/components/ui/textarea.tsx
new file mode 100644
index 0000000..02a1d83
--- /dev/null
+++ b/frontend/src/components/ui/textarea.tsx
@@ -0,0 +1,21 @@
+import * as React from "react";
+import { cn } from "@/lib/utils";
+
+const Textarea = React.forwardRef<HTMLTextAreaElement, React.TextareaHTMLAttributes<HTMLTextAreaElement>>(
+  ({ className, ...props }, ref) => {
+    return (
+      <textarea
+        className={cn(
+          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
+          className
+        )}
+        ref={ref}
+        {...props}
+      />
+    );
+  }
+);
+
+Textarea.displayName = "Textarea";
+
+export { Textarea };
diff --git a/frontend/src/components/ui/toast.tsx b/frontend/src/components/ui/toast.tsx
new file mode 100644
index 0000000..0aab100
--- /dev/null
+++ b/frontend/src/components/ui/toast.tsx
@@ -0,0 +1,127 @@
+import * as React from "react";
+import * as ToastPrimitives from "@radix-ui/react-toast";
+import { cva, type VariantProps } from "class-variance-authority";
+import { X } from "lucide-react";
+
+import { cn } from "@/lib/utils";
+
+const ToastProvider = ToastPrimitives.Provider;
+
+const ToastViewport = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Viewport>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
+>(({ className, ...props }, ref) => (
+  <ToastPrimitives.Viewport
+    ref={ref}
+    className={cn(
+      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
+      className
+    )}
+    {...props}
+  />
+));
+ToastViewport.displayName = ToastPrimitives.Viewport.displayName;
+
+const toastVariants = cva(
+  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
+  {
+    variants: {
+      variant: {
+        default: "border bg-background text-foreground",
+        destructive:
+          "destructive group border-destructive bg-destructive text-destructive-foreground",
+      },
+    },
+    defaultVariants: {
+      variant: "default",
+    },
+  }
+);
+
+const Toast = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Root>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
+    VariantProps<typeof toastVariants>
+>(({ className, variant, ...props }, ref) => {
+  return (
+    <ToastPrimitives.Root
+      ref={ref}
+      className={cn(toastVariants({ variant }), className)}
+      {...props}
+    />
+  );
+});
+Toast.displayName = ToastPrimitives.Root.displayName;
+
+const ToastAction = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Action>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
+>(({ className, ...props }, ref) => (
+  <ToastPrimitives.Action
+    ref={ref}
+    className={cn(
+      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
+      className
+    )}
+    {...props}
+  />
+));
+ToastAction.displayName = ToastPrimitives.Action.displayName;
+
+const ToastClose = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Close>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
+>(({ className, ...props }, ref) => (
+  <ToastPrimitives.Close
+    ref={ref}
+    className={cn(
+      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
+      className
+    )}
+    toast-close=""
+    {...props}
+  >
+    <X className="h-4 w-4" />
+  </ToastPrimitives.Close>
+));
+ToastClose.displayName = ToastPrimitives.Close.displayName;
+
+const ToastTitle = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Title>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
+>(({ className, ...props }, ref) => (
+  <ToastPrimitives.Title
+    ref={ref}
+    className={cn("text-sm font-medium", className)}
+    {...props}
+  />
+));
+ToastTitle.displayName = ToastPrimitives.Title.displayName;
+
+const ToastDescription = React.forwardRef<
+  React.ElementRef<typeof ToastPrimitives.Description>,
+  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
+>(({ className, ...props }, ref) => (
+  <ToastPrimitives.Description
+    ref={ref}
+    className={cn("text-sm opacity-90", className)}
+    {...props}
+  />
+));
+ToastDescription.displayName = ToastPrimitives.Description.displayName;
+
+type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;
+
+type ToastActionElement = React.ReactElement<typeof ToastAction>;
+
+export {
+  type ToastProps,
+  type ToastActionElement,
+  ToastProvider,
+  ToastViewport,
+  Toast,
+  ToastTitle,
+  ToastDescription,
+  ToastClose,
+  ToastAction,
+};
diff --git a/frontend/src/components/ui/toaster.tsx b/frontend/src/components/ui/toaster.tsx
new file mode 100644
index 0000000..2b8de07
--- /dev/null
+++ b/frontend/src/components/ui/toaster.tsx
@@ -0,0 +1,33 @@
+import { useToast } from "@/hooks/use-toast"
+import {
+  Toast,
+  ToastClose,
+  ToastDescription,
+  ToastProvider,
+  ToastTitle,
+  ToastViewport,
+} from "./toast"
+
+export function Toaster() {
+  const { toasts } = useToast()
+
+  return (
+    <ToastProvider>
+      {toasts.map(function ({ id, title, description, action, ...props }) {
+        return (
+          <Toast key={id} {...props}>
+            <div className="grid gap-1">
+              {title && <ToastTitle>{title}</ToastTitle>}
+              {description && (
+                <ToastDescription>{description}</ToastDescription>
+              )}
+            </div>
+            {action}
+            <ToastClose />
+          </Toast>
+        )
+      })}
+      <ToastViewport />
+    </ToastProvider>
+  )
+}
diff --git a/frontend/src/components/ui/tooltip.tsx b/frontend/src/components/ui/tooltip.tsx
new file mode 100644
index 0000000..6614932
--- /dev/null
+++ b/frontend/src/components/ui/tooltip.tsx
@@ -0,0 +1,27 @@
+import * as React from "react";
+import * as TooltipPrimitive from "@radix-ui/react-tooltip";
+import { cn } from "@/lib/utils";
+
+const TooltipProvider = TooltipPrimitive.Provider;
+
+const Tooltip = TooltipPrimitive.Root;
+
+const TooltipTrigger = TooltipPrimitive.Trigger;
+
+const TooltipContent = React.forwardRef<
+  React.ElementRef<typeof TooltipPrimitive.Content>,
+  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
+>(({ className, sideOffset = 4, ...props }, ref) => (
+  <TooltipPrimitive.Content
+    ref={ref}
+    sideOffset={sideOffset}
+    className={cn(
+      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
+      className
+    )}
+    {...props}
+  />
+));
+TooltipContent.displayName = TooltipPrimitive.Content.displayName;
+
+export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }; 
\ No newline at end of file
diff --git a/frontend/src/components/ui/use-toast.ts b/frontend/src/components/ui/use-toast.ts
new file mode 100644
index 0000000..b0aef21
--- /dev/null
+++ b/frontend/src/components/ui/use-toast.ts
@@ -0,0 +1,3 @@
+import { useToast, toast } from "@/hooks/use-toast";
+
+export { useToast, toast };
diff --git a/frontend/src/contexts/AuthContext.tsx b/frontend/src/contexts/AuthContext.tsx
new file mode 100644
index 0000000..0cc4c6f
--- /dev/null
+++ b/frontend/src/contexts/AuthContext.tsx
@@ -0,0 +1,102 @@
+"use client";
+
+import React, { createContext, useContext, useState, useEffect } from "react";
+import { toast } from "sonner";
+import { useRouter } from "next/navigation";
+import { api } from "../services/api";
+import { mapBackendRoleToFrontend } from "@/utils/shipment-status";
+
+interface User {
+  email: string;
+  name: string;
+  role: "customer" | "pilot" | "admin";
+}
+
+interface AuthContextType {
+  user: User | null;
+  isAuthenticated: boolean;
+  login: (email: string, password: string) => Promise<boolean>;
+  logout: () => void;
+  updateUserProfile?: (updates: Partial<User>) => void;
+}
+
+const AuthContext = createContext<AuthContextType | undefined>(undefined);
+
+export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
+  children,
+}) => {
+  const [user, setUser] = useState<User | null>(null);
+  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
+  const router = useRouter();
+
+  useEffect(() => {
+    const storedUser = localStorage.getItem("user");
+    if (storedUser) {
+      try {
+        const parsedUser = JSON.parse(storedUser);
+        setUser(parsedUser);
+        setIsAuthenticated(true);
+      } catch (error) {
+        console.error("Failed to parse stored user data", error);
+        localStorage.removeItem("user");
+      }
+    }
+  }, []);
+
+  const login = async (email: string, password: string): Promise<boolean> => {
+    try {
+      const loginResponse = await api.post<{ message: string }>('/auth/login', { email, password });
+      if (!loginResponse.ok) {
+        throw new Error('Login failed');
+      }
+      
+      const userResponse = await api.get<User>('/users/me');
+      if (!userResponse.ok) {
+        throw new Error('Failed to fetch user data');
+      }
+      
+      const user = userResponse.data;
+      user.role = mapBackendRoleToFrontend(parseInt(user.role + ""));
+      setUser(user);
+      setIsAuthenticated(true);
+      localStorage.setItem("user", JSON.stringify(user));
+      toast.success(`Välkommen, ${user.name}!`);
+      return true;
+    } catch {
+      toast.error("Felaktiga inloggningsuppgifter");
+      return false;
+    }
+  };
+
+  const logout = () => {
+    setUser(null);
+    setIsAuthenticated(false);
+    localStorage.removeItem("user");
+    toast.info("Du har loggats ut");
+    router.push("/");
+  };
+
+  const updateUserProfile = (updates: Partial<User>) => {
+    if (user) {
+      const updatedUser = { ...user, ...updates };
+      setUser(updatedUser);
+      localStorage.setItem("user", JSON.stringify(updatedUser));
+    }
+  };
+
+  return (
+    <AuthContext.Provider
+      value={{ user, isAuthenticated, login, logout, updateUserProfile }}
+    >
+      {children}
+    </AuthContext.Provider>
+  );
+};
+
+export const useAuth = () => {
+  const context = useContext(AuthContext);
+  if (context === undefined) {
+    throw new Error("useAuth must be used within an AuthProvider");
+  }
+  return context;
+};
diff --git a/frontend/src/data/mock-data.ts b/frontend/src/data/mock-data.ts
new file mode 100644
index 0000000..a2e3376
--- /dev/null
+++ b/frontend/src/data/mock-data.ts
@@ -0,0 +1,177 @@
+export interface MockPilot {
+    id: string;
+    name: string;
+    email: string;
+    status: 'active' | 'inactive';
+    experience: string;
+    assignedShipments: number;
+    rating: number;
+    available?: boolean;
+}
+
+export interface MockShipment {
+    id: string;
+    customer: string;
+    origin: string;
+    destination: string;
+    scheduledDate: string;
+    status: string;
+    cargo: string;
+    weight?: string;
+    pilot?: string | null;
+}
+
+export interface MockOngoingShipment {
+    id: string;
+    from: string;
+    to: string;
+    date: string;
+    status: string;
+    progress: number;
+    pilot: string;
+    ship: string;
+}
+
+export const MOCK_PILOTS: MockPilot[] = [
+    {
+        id: "P1001",
+        name: "Erik Nilsson",
+        email: "pilot@example.com",
+        status: "active",
+        experience: "5 years",
+        assignedShipments: 1,
+        rating: 4.8,
+        available: true
+    },
+    {
+        id: "P1002",
+        name: "Anna Lindberg",
+        email: "anna.lindberg@example.com",
+        status: "inactive",
+        experience: "3 years",
+        assignedShipments: 0,
+        rating: 4.5,
+        available: true
+    },
+    {
+        id: "P1003",
+        name: "Lars Svensson",
+        email: "lars.svensson@example.com",
+        status: "active",
+        experience: "7 years",
+        assignedShipments: 1,
+        rating: 4.9,
+        available: false
+    }
+];
+
+export const MOCK_SHIPMENTS: MockShipment[] = [
+    {
+        id: "SHIP-1001",
+        customer: "Johan Andersson",
+        origin: "Stockholm, Sweden",
+        destination: "Lunar Colony Alpha",
+        scheduledDate: "2025-04-25",
+        status: "pending_approval",
+        cargo: "Scientific Equipment",
+        weight: "250kg",
+        pilot: null
+    },
+    {
+        id: "SHIP-1002",
+        customer: "Maria Johansson",
+        origin: "Gothenburg, Sweden",
+        destination: "Mars Base One",
+        scheduledDate: "2025-04-28",
+        status: "approved",
+        cargo: "Medical Supplies",
+        weight: "180kg",
+        pilot: null
+    },
+    {
+        id: "SHIP-1003",
+        customer: "Erik Nilsson",
+        origin: "Malmö, Sweden",
+        destination: "Titan Research Station",
+        scheduledDate: "2025-05-02",
+        status: "assigned",
+        cargo: "Construction Materials",
+        weight: "500kg",
+        pilot: "Lars Svensson"
+    }
+];
+
+export const MOCK_ASSIGNED_SHIPMENTS: MockShipment[] = [
+    {
+        id: "SHIP-1001",
+        customer: "Johan Andersson",
+        origin: "Stockholm, Sweden",
+        destination: "Lunar Colony Alpha",
+        scheduledDate: "2025-04-25",
+        status: "pending",
+        cargo: "Scientific Equipment"
+    },
+    {
+        id: "SHIP-1002",
+        customer: "Maria Johansson",
+        origin: "Gothenburg, Sweden",
+        destination: "Mars Base One",
+        scheduledDate: "2025-04-28",
+        status: "in_transit",
+        cargo: "Medical Supplies"
+    },
+    {
+        id: "SHIP-1003",
+        customer: "Erik Nilsson",
+        origin: "Malmö, Sweden",
+        destination: "Titan Research Station",
+        scheduledDate: "2025-05-02",
+        status: "completed",
+        cargo: "Construction Materials"
+    }
+];
+
+export const MOCK_ONGOING_SHIPMENTS: MockOngoingShipment[] = [
+    {
+        id: "SC-1234567",
+        from: "Jorden, Alpha Station",
+        to: "Mars, Olympus Station",
+        date: "2023-04-10",
+        status: "I transit",
+        progress: 60,
+        pilot: "Anna Karlsson",
+        ship: "Stellar Phoenix IX"
+    },
+    {
+        id: "SC-7654321",
+        from: "Jorden, Beta Station",
+        to: "Europa, Ice Harbor",
+        date: "2023-04-12",
+        status: "Förbereder",
+        progress: 20,
+        pilot: "Marcus Lindqvist",
+        ship: "Quantum Voyager"
+    },
+    {
+        id: "SC-9876543",
+        from: "Mars, Olympus Station",
+        to: "Jorden, Gamma Station",
+        date: "2023-04-08",
+        status: "Närmar sig destination",
+        progress: 85,
+        pilot: "Elsa Berg",
+        ship: "Nebula Sprinter"
+    }
+];
+
+export const SHIPMENT_STATUS_MAP = {
+    pending_approval: { label: "Väntar på godkännande", color: "bg-amber-500" },
+    approved: { label: "Godkänd", color: "bg-blue-500" },
+    assigned: { label: "Tilldelad", color: "bg-green-500" },
+    rejected: { label: "Nekad", color: "bg-red-500" },
+    completed: { label: "Avslutad", color: "bg-purple-500" },
+    pending: { label: "Väntar", color: "bg-amber-500" },
+    in_transit: { label: "Under transport", color: "bg-blue-500" },
+    preparing: { label: "Förbereder", color: "bg-yellow-500" },
+    approaching: { label: "Närmar sig destination", color: "bg-indigo-500" }
+}; 
\ No newline at end of file
diff --git a/frontend/src/hooks/use-mobile.tsx b/frontend/src/hooks/use-mobile.tsx
new file mode 100644
index 0000000..2b0fe1d
--- /dev/null
+++ b/frontend/src/hooks/use-mobile.tsx
@@ -0,0 +1,19 @@
+import * as React from "react"
+
+const MOBILE_BREAKPOINT = 768
+
+export function useIsMobile() {
+  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
+
+  React.useEffect(() => {
+    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
+    const onChange = () => {
+      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
+    }
+    mql.addEventListener("change", onChange)
+    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
+    return () => mql.removeEventListener("change", onChange)
+  }, [])
+
+  return !!isMobile
+}
diff --git a/frontend/src/hooks/use-toast.ts b/frontend/src/hooks/use-toast.ts
new file mode 100644
index 0000000..1bc3d9e
--- /dev/null
+++ b/frontend/src/hooks/use-toast.ts
@@ -0,0 +1,181 @@
+"use client";
+
+import * as React from "react";
+
+import type { ToastActionElement, ToastProps } from "@/components/ui/toast";
+
+const TOAST_LIMIT = 1;
+const TOAST_REMOVE_DELAY = 1000000;
+
+type ToasterToast = ToastProps & {
+  id: string;
+  title?: React.ReactNode;
+  description?: React.ReactNode;
+  action?: ToastActionElement;
+};
+
+let count = 0;
+
+function genId() {
+  count = (count + 1) % Number.MAX_SAFE_INTEGER;
+  return count.toString();
+}
+
+type Action =
+  | {
+      type: "ADD_TOAST";
+      toast: ToasterToast;
+    }
+  | {
+      type: "UPDATE_TOAST";
+      toast: Partial<ToasterToast>;
+    }
+  | {
+      type: "DISMISS_TOAST";
+      toastId?: ToasterToast["id"];
+    }
+  | {
+      type: "REMOVE_TOAST";
+      toastId?: ToasterToast["id"];
+    };
+
+interface State {
+  toasts: ToasterToast[];
+}
+
+const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();
+
+const addToRemoveQueue = (toastId: string) => {
+  if (toastTimeouts.has(toastId)) {
+    return;
+  }
+
+  const timeout = setTimeout(() => {
+    toastTimeouts.delete(toastId);
+    dispatch({
+      type: "REMOVE_TOAST",
+      toastId: toastId,
+    });
+  }, TOAST_REMOVE_DELAY);
+
+  toastTimeouts.set(toastId, timeout);
+};
+
+export const reducer = (state: State, action: Action): State => {
+  switch (action.type) {
+    case "ADD_TOAST":
+      return {
+        ...state,
+        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
+      };
+
+    case "UPDATE_TOAST":
+      return {
+        ...state,
+        toasts: state.toasts.map((t) =>
+          t.id === action.toast.id ? { ...t, ...action.toast } : t
+        ),
+      };
+
+    case "DISMISS_TOAST": {
+      const { toastId } = action;
+
+      // ! Side effects ! - This could be extracted into a dismissToast() action,
+      // but I'll keep it here for simplicity
+      if (toastId) {
+        addToRemoveQueue(toastId);
+      } else {
+        state.toasts.forEach((toast) => {
+          addToRemoveQueue(toast.id);
+        });
+      }
+
+      return {
+        ...state,
+        toasts: state.toasts.map((t) =>
+          t.id === toastId || toastId === undefined
+            ? {
+                ...t,
+                open: false,
+              }
+            : t
+        ),
+      };
+    }
+    case "REMOVE_TOAST":
+      if (action.toastId === undefined) {
+        return {
+          ...state,
+          toasts: [],
+        };
+      }
+      return {
+        ...state,
+        toasts: state.toasts.filter((t) => t.id !== action.toastId),
+      };
+  }
+};
+
+const listeners: Array<(state: State) => void> = [];
+
+let memoryState: State = { toasts: [] };
+
+function dispatch(action: Action) {
+  memoryState = reducer(memoryState, action);
+  listeners.forEach((listener) => {
+    listener(memoryState);
+  });
+}
+
+type Toast = Omit<ToasterToast, "id">;
+
+function toast({ ...props }: Toast) {
+  const id = genId();
+
+  const update = (props: ToasterToast) =>
+    dispatch({
+      type: "UPDATE_TOAST",
+      toast: { ...props, id },
+    });
+  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });
+
+  dispatch({
+    type: "ADD_TOAST",
+    toast: {
+      ...props,
+      id,
+      open: true,
+      onOpenChange: (open: boolean) => {
+        if (!open) dismiss();
+      },
+    },
+  });
+
+  return {
+    id: id,
+    dismiss,
+    update,
+  };
+}
+
+function useToast() {
+  const [state, setState] = React.useState<State>(memoryState);
+
+  React.useEffect(() => {
+    listeners.push(setState);
+    return () => {
+      const index = listeners.indexOf(setState);
+      if (index > -1) {
+        listeners.splice(index, 1);
+      }
+    };
+  }, [state]);
+
+  return {
+    ...state,
+    toast,
+    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
+  };
+}
+
+export { useToast, toast };
diff --git a/frontend/src/lib/utils.ts b/frontend/src/lib/utils.ts
new file mode 100644
index 0000000..2164ec6
--- /dev/null
+++ b/frontend/src/lib/utils.ts
@@ -0,0 +1,6 @@
+import { type ClassValue, clsx } from "clsx";
+import { twMerge } from "tailwind-merge";
+
+export function cn(...inputs: ClassValue[]) {
+  return twMerge(clsx(inputs));
+} 
\ No newline at end of file
diff --git a/frontend/src/model/paginated-result.ts b/frontend/src/model/paginated-result.ts
new file mode 100644
index 0000000..553f7fd
--- /dev/null
+++ b/frontend/src/model/paginated-result.ts
@@ -0,0 +1,7 @@
+export interface PaginatedResult<T> {
+    items: T[];
+    totalCount: number;
+    page: number;
+    pageSize: number;
+    totalPages: number;
+}
diff --git a/frontend/src/model/shipment.ts b/frontend/src/model/shipment.ts
new file mode 100644
index 0000000..4c6349c
--- /dev/null
+++ b/frontend/src/model/shipment.ts
@@ -0,0 +1,37 @@
+import { ShipmentStatus } from './types';
+import User from './user';
+
+export interface ShipmentContact {
+    name: string;
+    email: string;
+    planet: string;
+    station: string;
+}
+
+export interface CustomsForm {
+    containsLifeforms: boolean;
+    lifeformType?: string | null;
+    isPlasmaActive: boolean;
+    plasmaStabilityLevel?: number | null;
+    originPlanetLawsConfirmed: boolean;
+    customsNotes?: string | null;
+    quarantineRequired?: boolean | null;
+}
+
+export default interface Shipment {
+    id: string;
+    customerId: string;
+    pilotId?: string | null;
+    sender: ShipmentContact;
+    receiver: ShipmentContact;
+    weight: number;
+    category: string;
+    priority: string;
+    description?: string | null;
+    hasInsurance: boolean;
+    status: ShipmentStatus;
+    createdAt: string;
+    updatedAt: string;
+    pilot?: User | null;
+    customs?: CustomsForm;
+}
diff --git a/frontend/src/model/types.ts b/frontend/src/model/types.ts
new file mode 100644
index 0000000..270a04a
--- /dev/null
+++ b/frontend/src/model/types.ts
@@ -0,0 +1,22 @@
+export enum UserRole {
+    Customer = 'Customer',
+    Pilot = 'Pilot',
+    Admin = 'Admin'
+}
+
+export enum ShipmentStatus {
+    WaitingForApproval = 'WaitingForApproval',
+    Approved = 'Approved',
+    Denied = 'Denied',
+    Assigned = 'Assigned',
+    InTransit = 'InTransit',
+    Delivered = 'Delivered',
+    Cancelled = 'Cancelled'
+}
+
+export enum RiskLevel {
+    Low = 'Low',
+    Medium = 'Medium',
+    High = 'High',
+    Critical = 'Critical'
+}
diff --git a/frontend/src/model/user.ts b/frontend/src/model/user.ts
new file mode 100644
index 0000000..d418fa1
--- /dev/null
+++ b/frontend/src/model/user.ts
@@ -0,0 +1,12 @@
+import { UserRole } from './types';
+
+export default interface User {
+    id: string;
+    name: string;
+    email: string;
+    role: UserRole;
+    createdAt: string;
+    // Pilot-specific properties
+    experience?: string;
+    isActive?: boolean;
+}
diff --git a/frontend/src/services/api.ts b/frontend/src/services/api.ts
new file mode 100644
index 0000000..2d01642
--- /dev/null
+++ b/frontend/src/services/api.ts
@@ -0,0 +1,54 @@
+const API_BASE_URL = 'http://localhost:5000/api';
+
+interface ApiResponse<T> {
+    data: T;
+    status: number;
+    ok: boolean;
+}
+
+async function apiRequest<T>(
+    endpoint: string,
+    options: RequestInit = {}
+): Promise<ApiResponse<T>> {
+    const url = `${API_BASE_URL}${endpoint}`;
+    const defaultOptions: RequestInit = {
+        credentials: 'include',
+        headers: {
+            'Content-Type': 'application/json',
+        },
+    };
+
+    const response = await fetch(url, {
+        ...defaultOptions,
+        ...options,
+        headers: {
+            ...defaultOptions.headers,
+            ...options.headers,
+        },
+    });
+
+    const data = await response.json();
+    return {
+        data,
+        status: response.status,
+        ok: response.ok,
+    };
+}
+
+export const api = {
+    get: <T>(endpoint: string) => apiRequest<T>(endpoint, { method: 'GET' }),
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    post: <T>(endpoint: string, body: any) => 
+        apiRequest<T>(endpoint, { 
+            method: 'POST', 
+            body: JSON.stringify(body) 
+        }),
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    put: <T>(endpoint: string, body: any) => 
+        apiRequest<T>(endpoint, { 
+            method: 'PUT', 
+            body: JSON.stringify(body) 
+        }),
+    delete: <T>(endpoint: string) => 
+        apiRequest<T>(endpoint, { method: 'DELETE' }),
+}; 
\ No newline at end of file
diff --git a/frontend/src/services/pilot-service.ts b/frontend/src/services/pilot-service.ts
new file mode 100644
index 0000000..8256f63
--- /dev/null
+++ b/frontend/src/services/pilot-service.ts
@@ -0,0 +1,98 @@
+import { api } from "./api";
+import { PaginatedResult } from "@/model/paginated-result";
+
+export interface Pilot {
+  id: string;
+  name: string;
+  email: string;
+  isActive: boolean;
+  experience: string;
+  assignedShipments: number;
+  rating: number;
+  available?: boolean;
+}
+
+export interface PilotsFilter {
+  page?: number;
+  pageSize?: number;
+  search?: string;
+  isActive?: boolean;
+}
+
+interface CreatePilotDto {
+  name: string;
+  email: string;
+  experience: string;
+}
+
+interface UpdatePilotDto {
+  name: string;
+  email: string;
+  experience: string;
+}
+
+export const getPilots = async(filter: PilotsFilter = {}): Promise<PaginatedResult<Pilot>> => {
+  const queryParams = new URLSearchParams();
+  
+  if (filter.page) queryParams.append('page', filter.page.toString());
+  if (filter.pageSize) queryParams.append('pageSize', filter.pageSize.toString());
+  if (filter.search) queryParams.append('search', filter.search);
+  if (filter.isActive !== undefined) queryParams.append('isActive', filter.isActive.toString());
+  
+  const url = `/pilots${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
+  const response = await api.get<PaginatedResult<Pilot>>(url);
+  
+  if (!response.ok) {
+    console.error('Fel vid hämtning av piloter:', response.status);
+    throw new Error('Kunde inte hämta piloter');
+  }
+  
+  return response.data;
+}
+
+export const getPilotById = async(id: string): Promise<Pilot> => {
+  const response = await api.get<Pilot>(`/pilots/${id}`);
+  
+  if (!response.ok) {
+    throw new Error('Kunde inte hämta pilot');
+  }
+  
+  return response.data;
+}
+
+export const getPilotAvailability = async(id: string): Promise<{isAvailable: boolean, activeShipments: number, maxShipments: number}> => {
+  const response = await api.get<{isAvailable: boolean, activeShipments: number, maxShipments: number}>(`/pilots/${id}/availability`);
+  
+  if (!response.ok) {
+    throw new Error('Kunde inte hämta pilottillgänglighet');
+  }
+  
+  return response.data;
+}
+
+export const updatePilotStatus = async(id: string, isActive: boolean): Promise<void> => {
+  const response = await api.put(`/pilots/${id}/status`, { isActive });
+  if (!response.ok) {
+    throw new Error('Kunde inte uppdatera pilotstatus');
+  }
+}
+
+export const createPilot = async(pilotData: CreatePilotDto): Promise<string> => {
+  try {
+    const response = await api.post<string>('/pilots', pilotData);
+    if (!response.ok) {
+      throw new Error('Kunde inte skapa pilot');
+    }
+    return response.data;
+  } catch (error) {
+    throw new Error(`Fel vid skapande av pilot: ${error instanceof Error ? error.message : 'Okänt fel'}`);
+  }
+}
+
+export const updatePilot = async(id: string, pilotData: UpdatePilotDto): Promise<void> => {
+  const response = await api.put(`/pilots/${id}`, pilotData);
+  
+  if (!response.ok) {
+    throw new Error('Kunde inte uppdatera pilot');
+  }
+}
diff --git a/frontend/src/services/shipment-service.ts b/frontend/src/services/shipment-service.ts
new file mode 100644
index 0000000..df1edb4
--- /dev/null
+++ b/frontend/src/services/shipment-service.ts
@@ -0,0 +1,94 @@
+import { api } from "./api";
+import Shipment, { ShipmentContact, CustomsForm } from "../model/shipment";
+import { ShipmentStatus } from "../model/types";
+import { mapBackendStatusToFrontend, mapFrontendStatusToBackend } from "../utils/shipment-status";
+import { PaginatedResult } from "@/model/paginated-result";
+
+export interface CreateShipmentRequest {
+    origin: ShipmentContact;
+    destination: ShipmentContact;
+    weight: number;
+    category: string;
+    priority: string;
+    description?: string | null;
+    hasInsurance: boolean;
+    customs?: CustomsForm;
+}
+
+export interface UpdateShipmentStatusRequest {
+    status: ShipmentStatus;
+}
+
+export interface AssignPilotRequest {
+    pilotId: string;
+}
+
+export interface ShipmentsFilter {
+    search?: string;
+    status?: ShipmentStatus;
+    page?: number;
+    pageSize?: number;
+}
+
+export const getShipments = async (filter?: ShipmentsFilter): Promise<PaginatedResult<Shipment>> => {
+    const queryParams = new URLSearchParams();
+    if (filter?.search) queryParams.append('search', filter.search);
+    if (filter?.status) queryParams.append('status', mapFrontendStatusToBackend(filter.status).toString());
+    queryParams.append('page', (filter?.page || 1).toString());
+    queryParams.append('pageSize', (filter?.pageSize || 10).toString());
+    
+    const response = await api.get<PaginatedResult<Shipment>>(`/shipments?${queryParams.toString()}`);
+    
+    // Convert status in each shipment from numeric to string enum
+    const convertedItems = response.data.items.map(shipment => ({
+        ...shipment,
+        status: mapBackendStatusToFrontend(shipment.status as unknown as number)
+    }));
+
+    return {
+        ...response.data,
+        items: convertedItems
+    };
+};
+
+export const getShipmentById = async (id: string): Promise<Shipment> => {
+    const response = await api.get<Shipment>(`/shipments/${id}`);
+    
+    // Convert status from numeric to string enum
+    return {
+        ...response.data,
+        status: mapBackendStatusToFrontend(response.data.status as unknown as number)
+    };
+};
+
+export const createShipment = async (request: CreateShipmentRequest): Promise<Shipment> => {
+    const response = await api.post<Shipment>('/shipments', request);
+    
+    // Convert status from numeric to string enum
+    return {
+        ...response.data,
+        status: mapBackendStatusToFrontend(response.data.status as unknown as number)
+    };
+};
+
+export const updateShipmentStatus = async (id: string, request: UpdateShipmentStatusRequest): Promise<Shipment> => {
+    const backendStatus = mapFrontendStatusToBackend(request.status);
+    const response = await api.put<Shipment>(`/shipments/${id}/status`, { status: backendStatus });
+    
+    // Convert status from numeric to string enum
+    return {
+        ...response.data,
+        status: mapBackendStatusToFrontend(response.data.status as unknown as number)
+    };
+};
+
+export const assignPilot = async (id: string, request: AssignPilotRequest): Promise<Shipment> => {
+    const response = await api.put<Shipment>(`/shipments/${id}/assign-pilot`, request);
+    
+    // Convert status from numeric to string enum
+    return {
+        ...response.data,
+        status: mapBackendStatusToFrontend(response.data.status as unknown as number)
+    };
+};
+
diff --git a/frontend/src/types/user.ts b/frontend/src/types/user.ts
new file mode 100644
index 0000000..cfad399
--- /dev/null
+++ b/frontend/src/types/user.ts
@@ -0,0 +1,20 @@
+export type UserRole = "customer" | "pilot" | "admin";
+
+export interface User {
+  id: string;
+  email: string;
+  name: string;
+  role: UserRole;
+  createdAt: string;
+  updatedAt: string;
+}
+
+export interface UserSettings {
+  id: string;
+  userId: string;
+  theme: "light" | "dark" | "system";
+  notifications: boolean;
+  language: string;
+  createdAt: string;
+  updatedAt: string;
+} 
\ No newline at end of file
diff --git a/frontend/src/utils/shipment-status.ts b/frontend/src/utils/shipment-status.ts
new file mode 100644
index 0000000..9f7b5cf
--- /dev/null
+++ b/frontend/src/utils/shipment-status.ts
@@ -0,0 +1,68 @@
+import { UserRole } from '@/types/user';
+import { ShipmentStatus } from '../model/types';
+
+// Map backend numeric enum values to frontend string enum
+export const mapBackendStatusToFrontend = (status: number): ShipmentStatus => {
+    switch (status) {
+        case 0: return ShipmentStatus.WaitingForApproval;
+        case 1: return ShipmentStatus.Approved;
+        case 2: return ShipmentStatus.Denied;
+        case 3: return ShipmentStatus.Assigned;
+        case 4: return ShipmentStatus.InTransit;
+        case 5: return ShipmentStatus.Delivered;
+        case 6: return ShipmentStatus.Cancelled;
+        default: throw new Error(`Unknown shipment status: ${status}`);
+    }
+};
+
+// Map frontend string enum to backend numeric enum
+export const mapFrontendStatusToBackend = (status: ShipmentStatus): number => {
+    switch (status) {
+        case ShipmentStatus.WaitingForApproval: return 0;
+        case ShipmentStatus.Approved: return 1;
+        case ShipmentStatus.Denied: return 2;
+        case ShipmentStatus.Assigned: return 3;
+        case ShipmentStatus.InTransit: return 4;
+        case ShipmentStatus.Delivered: return 5;
+        case ShipmentStatus.Cancelled: return 6;
+        default: throw new Error(`Unknown shipment status: ${status}`);
+    }
+};
+
+// Get display text for a status
+export const getStatusDisplayText = (status: ShipmentStatus): string => {
+    switch (status) {
+        case ShipmentStatus.WaitingForApproval: return 'Väntar på godkännande';
+        case ShipmentStatus.Approved: return 'Godkänd';
+        case ShipmentStatus.Denied: return 'Nekad';
+        case ShipmentStatus.Assigned: return 'Tilldelad';
+        case ShipmentStatus.InTransit: return 'Under transport';
+        case ShipmentStatus.Delivered: return 'Levererad';
+        case ShipmentStatus.Cancelled: return 'Avbruten';
+        default: return 'Okänd status';
+    }
+};
+
+// Get color class for a status
+export const getStatusColorClass = (status: ShipmentStatus): string => {
+    switch (status) {
+        case ShipmentStatus.WaitingForApproval: return 'bg-amber-500';
+        case ShipmentStatus.Approved: return 'bg-blue-500';
+        case ShipmentStatus.Denied: return 'bg-red-500';
+        case ShipmentStatus.Assigned: return 'bg-green-500';
+        case ShipmentStatus.InTransit: return 'bg-indigo-500';
+        case ShipmentStatus.Delivered: return 'bg-emerald-500';
+        case ShipmentStatus.Cancelled: return 'bg-gray-500';
+        default: return 'bg-gray-500';
+    }
+}; 
+
+// Map backend numeric enum values to frontend string enum
+export const mapBackendRoleToFrontend = (role: number): UserRole => {
+    switch (role) {
+        case 0: return "customer";
+        case 1: return "pilot";
+        case 2: return "admin";
+        default: throw new Error(`Unknown user role: ${role}`);
+    }
+};
diff --git a/frontend/tailwind.config.ts b/frontend/tailwind.config.ts
new file mode 100644
index 0000000..903c4dc
--- /dev/null
+++ b/frontend/tailwind.config.ts
@@ -0,0 +1,137 @@
+import type { Config } from "tailwindcss";
+
+export default {
+  darkMode: ["class"],
+  content: [
+    "./pages/**/*.{ts,tsx}",
+    "./components/**/*.{ts,tsx}",
+    "./app/**/*.{ts,tsx}",
+    "./src/**/*.{ts,tsx}",
+  ],
+  prefix: "",
+  theme: {
+    container: {
+      center: true,
+      padding: "2rem",
+      screens: {
+        "2xl": "1400px",
+      },
+    },
+    extend: {
+      colors: {
+        border: "hsl(var(--border))",
+        input: "hsl(var(--input))",
+        ring: "hsl(var(--ring))",
+        background: "hsl(var(--background))",
+        foreground: "hsl(var(--foreground))",
+        primary: {
+          DEFAULT: "hsl(var(--primary))",
+          foreground: "hsl(var(--primary-foreground))",
+        },
+        secondary: {
+          DEFAULT: "hsl(var(--secondary))",
+          foreground: "hsl(var(--secondary-foreground))",
+        },
+        destructive: {
+          DEFAULT: "hsl(var(--destructive))",
+          foreground: "hsl(var(--destructive-foreground))",
+        },
+        muted: {
+          DEFAULT: "hsl(var(--muted))",
+          foreground: "hsl(var(--muted-foreground))",
+        },
+        accent: {
+          DEFAULT: "hsl(var(--accent))",
+          foreground: "hsl(var(--accent-foreground))",
+        },
+        popover: {
+          DEFAULT: "hsl(var(--popover))",
+          foreground: "hsl(var(--popover-foreground))",
+        },
+        card: {
+          DEFAULT: "hsl(var(--card))",
+          foreground: "hsl(var(--card-foreground))",
+        },
+        sidebar: {
+          DEFAULT: "hsl(var(--sidebar-background))",
+          foreground: "hsl(var(--sidebar-foreground))",
+          primary: "hsl(var(--sidebar-primary))",
+          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
+          accent: "hsl(var(--sidebar-accent))",
+          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
+          border: "hsl(var(--sidebar-border))",
+          ring: "hsl(var(--sidebar-ring))",
+        },
+        // Custom space theme colors
+        space: {
+          dark: "#0B0E18",
+          primary: "#151923",
+          // primary: "#1A1F2C",
+          secondary: "#253151",
+          "accent-blue": "#33C3F0",
+          "accent-purple": "#9b87f5",
+          "text-primary": "#FFFFFF",
+          "text-secondary": "#B8C3E6",
+          success: "#4CAF50",
+          warning: "#FFC107",
+          danger: "#FF5252",
+          info: "#2196F3",
+          highlight: "#FE5F55",
+        },
+      },
+      fontFamily: {
+        orbitron: ["Play", "sans-serif"],
+        inter: ["Inter", "sans-serif"],
+      },
+      keyframes: {
+        "accordion-down": {
+          from: {
+            height: "0",
+          },
+          to: {
+            height: "var(--radix-accordion-content-height)",
+          },
+        },
+        "accordion-up": {
+          from: {
+            height: "var(--radix-accordion-content-height)",
+          },
+          to: {
+            height: "0",
+          },
+        },
+        "pulse-glow": {
+          "0%, 100%": { opacity: "1" },
+          "50%": { opacity: "0.6" },
+        },
+        float: {
+          "0%, 100%": { transform: "translateY(0)" },
+          "50%": { transform: "translateY(-10px)" },
+        },
+        "space-particle": {
+          "0%": { transform: "translateY(0) translateX(0)", opacity: "0" },
+          "50%": { opacity: "0.5" },
+          "100%": {
+            transform: "translateY(20px) translateX(20px)",
+            opacity: "0",
+          },
+        },
+      },
+      animation: {
+        "accordion-down": "accordion-down 0.2s ease-out",
+        "accordion-up": "accordion-up 0.2s ease-out",
+        "pulse-glow": "pulse-glow 3s ease-in-out infinite",
+        float: "float 6s ease-in-out infinite",
+        "space-particle": "space-particle 8s ease-in-out infinite",
+      },
+      backgroundImage: {
+        "space-gradient": "linear-gradient(to bottom, #0B0E18, #1A1F2C)",
+        "button-gradient": "linear-gradient(to right, #9b87f5, #33C3F0)",
+        "card-gradient":
+          "linear-gradient(to bottom right, rgba(37, 49, 81, 0.8), rgba(26, 31, 44, 0.4))",
+        stars: "url('/stars-bg.png')",
+      },
+    },
+  },
+  plugins: [require("tailwindcss-animate")],
+} satisfies Config;
diff --git a/frontend/tsconfig.json b/frontend/tsconfig.json
new file mode 100644
index 0000000..63d598c
--- /dev/null
+++ b/frontend/tsconfig.json
@@ -0,0 +1,29 @@
+{
+  "compilerOptions": {
+    "target": "es5",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "strict": true,
+    "forceConsistentCasingInFileNames": true,
+    "noEmit": true,
+    "esModuleInterop": true,
+    "module": "esnext",
+    "moduleResolution": "bundler",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "jsx": "preserve",
+    "incremental": true,
+    "plugins": [
+      {
+        "name": "next"
+      }
+    ],
+    "paths": {
+      "@/*": ["./src/*"],
+      "@lib/*": ["./lib/*"]
+    }
+  },
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
+  "exclude": ["node_modules"]
+} 
\ No newline at end of file
-- 
2.46.0


From efc17c1541990d6b4b6ffaedc7b545c161193684 Mon Sep 17 00:00:00 2001
From: Nils Kjellman <nils@queenslab.se>
Date: Thu, 15 May 2025 21:29:43 +0200
Subject: [PATCH 2/2] abstract getCustomRiskLevel

---
 frontend/app/dashboard/shipments/add/page.tsx |  47 ++----
 .../app/dashboard/shipments/assigned/page.tsx | 144 ++++++++++++------
 frontend/src/utils/customs-risk.ts            |  33 ++++
 3 files changed, 146 insertions(+), 78 deletions(-)
 create mode 100644 frontend/src/utils/customs-risk.ts

diff --git a/frontend/app/dashboard/shipments/add/page.tsx b/frontend/app/dashboard/shipments/add/page.tsx
index 5fec0c7..081ed1c 100644
--- a/frontend/app/dashboard/shipments/add/page.tsx
+++ b/frontend/app/dashboard/shipments/add/page.tsx
@@ -18,6 +18,7 @@ import { useAuth } from "@/contexts/AuthContext";
 import { createShipment } from "@/services/shipment-service";
 import { useRouter } from "next/navigation";
 import { CustomsForm } from "@/model/shipment";
+import { getCustomsRiskLevel } from "@/utils/customs-risk";
 
 const BookShipment = () => {
   const { toast } = useToast();
@@ -137,38 +138,20 @@ const BookShipment = () => {
     }
   };
 
-  // Risk classification function
-  const getRiskLevel = () => {
-    // Plasmaaktiv + stabilitet < 5 + livsform
-    if (
-      isPlasmaActive &&
-      typeof plasmaStabilityLevel === "number" &&
-      plasmaStabilityLevel < 5 &&
-      containsLifeforms
-    ) {
-      return { label: "Kritisk", color: "text-red-600", emoji: "🔴" };
-    }
-    // Livsform + okänd art
-    if (
-      containsLifeforms &&
-      (!lifeformType ||
-        lifeformType.trim().toLowerCase() === "okänd" ||
-        lifeformType.trim().toLowerCase() === "unknown")
-    ) {
-      return { label: "Hög", color: "text-orange-500", emoji: "🔶" };
-    }
-    // Plasmaaktiv med stabilitet 5–7
-    if (
+  const customsRisk = getCustomsRiskLevel({
+    containsLifeforms,
+    lifeformType: containsLifeforms ? lifeformType : undefined,
+    isPlasmaActive,
+    plasmaStabilityLevel: isPlasmaActive ? plasmaStabilityLevel : undefined,
+    originPlanetLawsConfirmed,
+    customsNotes: customsNotes || undefined,
+    quarantineRequired:
       isPlasmaActive &&
       typeof plasmaStabilityLevel === "number" &&
-      plasmaStabilityLevel >= 5 &&
-      plasmaStabilityLevel <= 7
-    ) {
-      return { label: "Medel", color: "text-yellow-500", emoji: "🟡" };
-    }
-    // Inga specialegenskaper
-    return { label: "Låg", color: "text-green-600", emoji: "🟢" };
-  };
+      plasmaStabilityLevel < 4
+        ? quarantineRequired
+        : undefined,
+  });
 
   return (
     <div className="max-w-4xl mx-auto">
@@ -388,8 +371,8 @@ const BookShipment = () => {
             <div className="border-t border-space-secondary/30 pt-6">
               <h3 className="text-lg font-medium mb-4">Tullformulär</h3>
               <div className="mb-4">
-                <span className={`font-semibold ${getRiskLevel().color}`}>
-                  {getRiskLevel().emoji} Risknivå: {getRiskLevel().label}
+                <span className={`font-semibold ${customsRisk.color}`}>
+                  {customsRisk.emoji} Risknivå: {customsRisk.label}
                 </span>
               </div>
               <div className="space-y-4">
diff --git a/frontend/app/dashboard/shipments/assigned/page.tsx b/frontend/app/dashboard/shipments/assigned/page.tsx
index 3813989..a39b2e2 100644
--- a/frontend/app/dashboard/shipments/assigned/page.tsx
+++ b/frontend/app/dashboard/shipments/assigned/page.tsx
@@ -15,20 +15,33 @@ import { Button } from "@/components/ui/button";
 import { CheckCircle, AlertCircle, Loader } from "lucide-react";
 import { useQuery } from "@tanstack/react-query";
 import { ShipmentStatus } from "@/model/types";
-import { getShipments, ShipmentsFilter, updateShipmentStatus } from "@/services/shipment-service";
-import { getStatusDisplayText, getStatusColorClass } from "@/utils/shipment-status";
+import {
+  getShipments,
+  ShipmentsFilter,
+  updateShipmentStatus,
+} from "@/services/shipment-service";
+import {
+  getStatusDisplayText,
+  getStatusColorClass,
+} from "@/utils/shipment-status";
 import Pagination from "@/components/ui/pagination";
+import { CustomsForm } from "@/model/shipment";
+import { getCustomsRiskLevel } from "@/utils/customs-risk";
 
 const AssignedShipments = () => {
   const { user } = useAuth();
   const [page, setPage] = useState(1);
-  
-  const { data: shipments, refetch, isLoading } = useQuery({
+
+  const {
+    data: shipments,
+    refetch,
+    isLoading,
+  } = useQuery({
     queryKey: ["shipments", page],
     queryFn: () => {
       const filter: ShipmentsFilter = {
         page,
-        pageSize: 10
+        pageSize: 10,
       };
       return getShipments(filter);
     },
@@ -47,10 +60,15 @@ const AssignedShipments = () => {
     );
   }
 
-  const handleUpdateStatus = async (shipmentId: string, newStatus: ShipmentStatus) => {
+  const handleUpdateStatus = async (
+    shipmentId: string,
+    newStatus: ShipmentStatus
+  ) => {
     await updateShipmentStatus(shipmentId, { status: newStatus });
     toast.success(
-      `Status uppdaterad för frakt ${shipmentId} till ${getStatusDisplayText(newStatus)}`
+      `Status uppdaterad för frakt ${shipmentId} till ${getStatusDisplayText(
+        newStatus
+      )}`
     );
     refetch();
   };
@@ -83,46 +101,80 @@ const AssignedShipments = () => {
               </TableRow>
             </TableHeader>
             <TableBody>
-              {shipments.items.map((shipment, ix) => (
-                <TableRow key={shipment.id}>
-                  <TableCell>{ix + 1}</TableCell>
-                  <TableCell>{shipment.sender.name}</TableCell>
-                  <TableCell>{shipment.sender.station + " @ " + shipment.sender.planet}</TableCell>
-                  <TableCell>{shipment.receiver.station + " @ " + shipment.receiver.planet}</TableCell>
-                  <TableCell>{shipment.category}</TableCell>
-                  <TableCell>
-                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColorClass(shipment.status)}`}>
-                      {getStatusDisplayText(shipment.status)}
-                    </span>
-                  </TableCell>
-                  <TableCell>
-                    <div className="flex gap-2">
-                      {shipment.status === "Assigned" && (
-                        <Button
-                          variant="outline"
-                          size="sm"
-                          onClick={() =>
-                            handleUpdateStatus(shipment.id, ShipmentStatus.InTransit)
-                          }
-                        >
-                          Påbörja Transport
-                        </Button>
-                      )}
-                      {shipment.status === "InTransit" && (
-                        <Button
-                          variant="outline"
-                          size="sm"
-                          onClick={() =>
-                            handleUpdateStatus(shipment.id, ShipmentStatus.Delivered)
-                          }
-                        >
-                          Markera Levererad
-                        </Button>
+              {shipments.items.map((shipment, ix) => {
+                const customsRisk = getCustomsRiskLevel(shipment.customs);
+                return (
+                  <TableRow key={shipment.id}>
+                    <TableCell>{ix + 1}</TableCell>
+                    <TableCell>{shipment.sender.name}</TableCell>
+                    <TableCell>
+                      {shipment.sender.station + " @ " + shipment.sender.planet}
+                    </TableCell>
+                    <TableCell>
+                      {shipment.receiver.station +
+                        " @ " +
+                        shipment.receiver.planet}
+                    </TableCell>
+                    <TableCell>{shipment.category}</TableCell>
+                    <TableCell>
+                      <span
+                        className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColorClass(
+                          shipment.status
+                        )}`}
+                      >
+                        {getStatusDisplayText(shipment.status)}
+                      </span>
+                      {/* Customs risk badge */}
+                      {shipment.customs && (
+                        <div className="mt-1 flex items-center gap-2">
+                          <span
+                            className={`text-xs font-semibold ${customsRisk.color}`}
+                          >
+                            {customsRisk.emoji} Risk: {customsRisk.label}
+                          </span>
+                          {shipment.customs.quarantineRequired && (
+                            <span className="text-xs font-semibold text-pink-600 ml-2">
+                              Karantän krävs
+                            </span>
+                          )}
+                        </div>
                       )}
-                    </div>
-                  </TableCell>
-                </TableRow>
-              ))}
+                    </TableCell>
+                    <TableCell>
+                      <div className="flex gap-2">
+                        {shipment.status === "Assigned" && (
+                          <Button
+                            variant="outline"
+                            size="sm"
+                            onClick={() =>
+                              handleUpdateStatus(
+                                shipment.id,
+                                ShipmentStatus.InTransit
+                              )
+                            }
+                          >
+                            Påbörja Transport
+                          </Button>
+                        )}
+                        {shipment.status === "InTransit" && (
+                          <Button
+                            variant="outline"
+                            size="sm"
+                            onClick={() =>
+                              handleUpdateStatus(
+                                shipment.id,
+                                ShipmentStatus.Delivered
+                              )
+                            }
+                          >
+                            Markera Levererad
+                          </Button>
+                        )}
+                      </div>
+                    </TableCell>
+                  </TableRow>
+                );
+              })}
             </TableBody>
           </Table>
         </div>
diff --git a/frontend/src/utils/customs-risk.ts b/frontend/src/utils/customs-risk.ts
new file mode 100644
index 0000000..ec15335
--- /dev/null
+++ b/frontend/src/utils/customs-risk.ts
@@ -0,0 +1,33 @@
+import { CustomsForm } from "@/model/shipment";
+
+export function getCustomsRiskLevel(customs?: CustomsForm) {
+  if (!customs) return { label: "Okänd", color: "text-gray-400", emoji: "❔" };
+  // Plasmaaktiv + stabilitet < 5 + livsform
+  if (
+    customs.isPlasmaActive &&
+    typeof customs.plasmaStabilityLevel === "number" &&
+    customs.plasmaStabilityLevel < 5 &&
+    customs.containsLifeforms
+  ) {
+    return { label: "Kritisk", color: "text-red-600", emoji: "🔴" };
+  }
+  // Livsform + okänd art
+  if (
+    customs.containsLifeforms &&
+    customs.lifeformType &&
+    ["okänd", "vet ej", "ej känd"].includes(customs.lifeformType.trim().toLowerCase())
+  ) {
+    return { label: "Hög", color: "text-orange-500", emoji: "🔶" };
+  }
+  // Plasmaaktiv med stabilitet 5–7
+  if (
+    customs.isPlasmaActive &&
+    typeof customs.plasmaStabilityLevel === "number" &&
+    customs.plasmaStabilityLevel >= 5 &&
+    customs.plasmaStabilityLevel <= 7
+  ) {
+    return { label: "Medel", color: "text-yellow-500", emoji: "🟡" };
+  }
+  // Inga specialegenskaper
+  return { label: "Låg", color: "text-green-600", emoji: "🟢" };
+} 
\ No newline at end of file
-- 
2.46.0

